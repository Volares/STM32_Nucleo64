
nucleo-l476rg-ADCDMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000481c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080049a4  080049a4  000149a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049ec  080049ec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080049ec  080049ec  000149ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049f4  080049f4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049f4  080049f4  000149f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049f8  080049f8  000149f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080049fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002150  2000000c  08004a08  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000215c  08004a08  0002215c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f8f8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f84  00000000  00000000  0002f934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d18  00000000  00000000  000318b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c60  00000000  00000000  000325d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027835  00000000  00000000  00033230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ea92  00000000  00000000  0005aa65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000facb0  00000000  00000000  000694f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001641a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036e4  00000000  00000000  001641f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800498c 	.word	0x0800498c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800498c 	.word	0x0800498c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fb40 	bl	8000b54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f816 	bl	8000504 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f92a 	bl	8000730 <MX_GPIO_Init>
  MX_DMA_Init();
 80004dc:	f000 f90a 	bl	80006f4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004e0:	f000 f8d8 	bl	8000694 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80004e4:	f000 f860 	bl	80005a8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
//  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
//  {
//  	Error_Handler();
//  }
  HAL_ADC_Start_DMA(&hadc1, (uint32_t)*adc_buf, ADC_BUF_LEN);
 80004e8:	4b04      	ldr	r3, [pc, #16]	; (80004fc <main+0x30>)
 80004ea:	881b      	ldrh	r3, [r3, #0]
 80004ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80004f0:	4619      	mov	r1, r3
 80004f2:	4803      	ldr	r0, [pc, #12]	; (8000500 <main+0x34>)
 80004f4:	f000 fed6 	bl	80012a4 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f8:	e7fe      	b.n	80004f8 <main+0x2c>
 80004fa:	bf00      	nop
 80004fc:	20000158 	.word	0x20000158
 8000500:	20000028 	.word	0x20000028

08000504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b096      	sub	sp, #88	; 0x58
 8000508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050a:	f107 0314 	add.w	r3, r7, #20
 800050e:	2244      	movs	r2, #68	; 0x44
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f004 fa32 	bl	800497c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000518:	463b      	mov	r3, r7
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
 8000520:	609a      	str	r2, [r3, #8]
 8000522:	60da      	str	r2, [r3, #12]
 8000524:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000526:	f44f 7000 	mov.w	r0, #512	; 0x200
 800052a:	f002 fa3b 	bl	80029a4 <HAL_PWREx_ControlVoltageScaling>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000534:	f000 f980 	bl	8000838 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000538:	2302      	movs	r3, #2
 800053a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800053c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000540:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000542:	2310      	movs	r3, #16
 8000544:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000546:	2302      	movs	r3, #2
 8000548:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800054a:	2302      	movs	r3, #2
 800054c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800054e:	2301      	movs	r3, #1
 8000550:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000552:	230a      	movs	r3, #10
 8000554:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000556:	2307      	movs	r3, #7
 8000558:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800055a:	2302      	movs	r3, #2
 800055c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800055e:	2302      	movs	r3, #2
 8000560:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000562:	f107 0314 	add.w	r3, r7, #20
 8000566:	4618      	mov	r0, r3
 8000568:	f002 fa72 	bl	8002a50 <HAL_RCC_OscConfig>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000572:	f000 f961 	bl	8000838 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000576:	230f      	movs	r3, #15
 8000578:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800057a:	2303      	movs	r3, #3
 800057c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800057e:	2300      	movs	r3, #0
 8000580:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000582:	2300      	movs	r3, #0
 8000584:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000586:	2300      	movs	r3, #0
 8000588:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800058a:	463b      	mov	r3, r7
 800058c:	2104      	movs	r1, #4
 800058e:	4618      	mov	r0, r3
 8000590:	f002 fe3a 	bl	8003208 <HAL_RCC_ClockConfig>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800059a:	f000 f94d 	bl	8000838 <Error_Handler>
  }
}
 800059e:	bf00      	nop
 80005a0:	3758      	adds	r7, #88	; 0x58
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
	...

080005a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08a      	sub	sp, #40	; 0x28
 80005ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ae:	f107 031c 	add.w	r3, r7, #28
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
 80005b6:	605a      	str	r2, [r3, #4]
 80005b8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]
 80005c8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005ca:	4b2f      	ldr	r3, [pc, #188]	; (8000688 <MX_ADC1_Init+0xe0>)
 80005cc:	4a2f      	ldr	r2, [pc, #188]	; (800068c <MX_ADC1_Init+0xe4>)
 80005ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005d0:	4b2d      	ldr	r3, [pc, #180]	; (8000688 <MX_ADC1_Init+0xe0>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005d6:	4b2c      	ldr	r3, [pc, #176]	; (8000688 <MX_ADC1_Init+0xe0>)
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005dc:	4b2a      	ldr	r3, [pc, #168]	; (8000688 <MX_ADC1_Init+0xe0>)
 80005de:	2200      	movs	r2, #0
 80005e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005e2:	4b29      	ldr	r3, [pc, #164]	; (8000688 <MX_ADC1_Init+0xe0>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005e8:	4b27      	ldr	r3, [pc, #156]	; (8000688 <MX_ADC1_Init+0xe0>)
 80005ea:	2204      	movs	r2, #4
 80005ec:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005ee:	4b26      	ldr	r3, [pc, #152]	; (8000688 <MX_ADC1_Init+0xe0>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005f4:	4b24      	ldr	r3, [pc, #144]	; (8000688 <MX_ADC1_Init+0xe0>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80005fa:	4b23      	ldr	r3, [pc, #140]	; (8000688 <MX_ADC1_Init+0xe0>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000600:	4b21      	ldr	r3, [pc, #132]	; (8000688 <MX_ADC1_Init+0xe0>)
 8000602:	2200      	movs	r2, #0
 8000604:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000608:	4b1f      	ldr	r3, [pc, #124]	; (8000688 <MX_ADC1_Init+0xe0>)
 800060a:	2200      	movs	r2, #0
 800060c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800060e:	4b1e      	ldr	r3, [pc, #120]	; (8000688 <MX_ADC1_Init+0xe0>)
 8000610:	2200      	movs	r2, #0
 8000612:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000614:	4b1c      	ldr	r3, [pc, #112]	; (8000688 <MX_ADC1_Init+0xe0>)
 8000616:	2201      	movs	r2, #1
 8000618:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800061c:	4b1a      	ldr	r3, [pc, #104]	; (8000688 <MX_ADC1_Init+0xe0>)
 800061e:	2200      	movs	r2, #0
 8000620:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000622:	4b19      	ldr	r3, [pc, #100]	; (8000688 <MX_ADC1_Init+0xe0>)
 8000624:	2200      	movs	r2, #0
 8000626:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800062a:	4817      	ldr	r0, [pc, #92]	; (8000688 <MX_ADC1_Init+0xe0>)
 800062c:	f000 fce4 	bl	8000ff8 <HAL_ADC_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000636:	f000 f8ff 	bl	8000838 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800063a:	2300      	movs	r3, #0
 800063c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800063e:	f107 031c 	add.w	r3, r7, #28
 8000642:	4619      	mov	r1, r3
 8000644:	4810      	ldr	r0, [pc, #64]	; (8000688 <MX_ADC1_Init+0xe0>)
 8000646:	f001 fc23 	bl	8001e90 <HAL_ADCEx_MultiModeConfigChannel>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000650:	f000 f8f2 	bl	8000838 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000654:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <MX_ADC1_Init+0xe8>)
 8000656:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000658:	2306      	movs	r3, #6
 800065a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800065c:	2300      	movs	r3, #0
 800065e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000660:	237f      	movs	r3, #127	; 0x7f
 8000662:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000664:	2304      	movs	r3, #4
 8000666:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	4619      	mov	r1, r3
 8000670:	4805      	ldr	r0, [pc, #20]	; (8000688 <MX_ADC1_Init+0xe0>)
 8000672:	f000 fedd 	bl	8001430 <HAL_ADC_ConfigChannel>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800067c:	f000 f8dc 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000680:	bf00      	nop
 8000682:	3728      	adds	r7, #40	; 0x28
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000028 	.word	0x20000028
 800068c:	50040000 	.word	0x50040000
 8000690:	14f00020 	.word	0x14f00020

08000694 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000698:	4b14      	ldr	r3, [pc, #80]	; (80006ec <MX_USART2_UART_Init+0x58>)
 800069a:	4a15      	ldr	r2, [pc, #84]	; (80006f0 <MX_USART2_UART_Init+0x5c>)
 800069c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <MX_USART2_UART_Init+0x58>)
 80006a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006a6:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_USART2_UART_Init+0x58>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <MX_USART2_UART_Init+0x58>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <MX_USART2_UART_Init+0x58>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <MX_USART2_UART_Init+0x58>)
 80006ba:	220c      	movs	r2, #12
 80006bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006be:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <MX_USART2_UART_Init+0x58>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c4:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_USART2_UART_Init+0x58>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ca:	4b08      	ldr	r3, [pc, #32]	; (80006ec <MX_USART2_UART_Init+0x58>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MX_USART2_UART_Init+0x58>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006d6:	4805      	ldr	r0, [pc, #20]	; (80006ec <MX_USART2_UART_Init+0x58>)
 80006d8:	f003 fc76 	bl	8003fc8 <HAL_UART_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006e2:	f000 f8a9 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	200000d4 	.word	0x200000d4
 80006f0:	40004400 	.word	0x40004400

080006f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006fa:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_DMA_Init+0x38>)
 80006fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006fe:	4a0b      	ldr	r2, [pc, #44]	; (800072c <MX_DMA_Init+0x38>)
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	6493      	str	r3, [r2, #72]	; 0x48
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <MX_DMA_Init+0x38>)
 8000708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000712:	2200      	movs	r2, #0
 8000714:	2100      	movs	r1, #0
 8000716:	200b      	movs	r0, #11
 8000718:	f001 fd45 	bl	80021a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800071c:	200b      	movs	r0, #11
 800071e:	f001 fd5e 	bl	80021de <HAL_NVIC_EnableIRQ>

}
 8000722:	bf00      	nop
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40021000 	.word	0x40021000

08000730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08a      	sub	sp, #40	; 0x28
 8000734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000746:	4b2c      	ldr	r3, [pc, #176]	; (80007f8 <MX_GPIO_Init+0xc8>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074a:	4a2b      	ldr	r2, [pc, #172]	; (80007f8 <MX_GPIO_Init+0xc8>)
 800074c:	f043 0304 	orr.w	r3, r3, #4
 8000750:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000752:	4b29      	ldr	r3, [pc, #164]	; (80007f8 <MX_GPIO_Init+0xc8>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000756:	f003 0304 	and.w	r3, r3, #4
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075e:	4b26      	ldr	r3, [pc, #152]	; (80007f8 <MX_GPIO_Init+0xc8>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000762:	4a25      	ldr	r2, [pc, #148]	; (80007f8 <MX_GPIO_Init+0xc8>)
 8000764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000768:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076a:	4b23      	ldr	r3, [pc, #140]	; (80007f8 <MX_GPIO_Init+0xc8>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	4b20      	ldr	r3, [pc, #128]	; (80007f8 <MX_GPIO_Init+0xc8>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	4a1f      	ldr	r2, [pc, #124]	; (80007f8 <MX_GPIO_Init+0xc8>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000782:	4b1d      	ldr	r3, [pc, #116]	; (80007f8 <MX_GPIO_Init+0xc8>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	4b1a      	ldr	r3, [pc, #104]	; (80007f8 <MX_GPIO_Init+0xc8>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	4a19      	ldr	r2, [pc, #100]	; (80007f8 <MX_GPIO_Init+0xc8>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079a:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <MX_GPIO_Init+0xc8>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80007ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b0:	f002 f8d2 	bl	8002958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ba:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	4619      	mov	r1, r3
 80007ca:	480c      	ldr	r0, [pc, #48]	; (80007fc <MX_GPIO_Init+0xcc>)
 80007cc:	f001 ff1a 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_10;
 80007d0:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80007d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d6:	2301      	movs	r3, #1
 80007d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007de:	2300      	movs	r3, #0
 80007e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e2:	f107 0314 	add.w	r3, r7, #20
 80007e6:	4619      	mov	r1, r3
 80007e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ec:	f001 ff0a 	bl	8002604 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007f0:	bf00      	nop
 80007f2:	3728      	adds	r7, #40	; 0x28
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40021000 	.word	0x40021000
 80007fc:	48000800 	.word	0x48000800

08000800 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */

// Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000808:	2201      	movs	r2, #1
 800080a:	2120      	movs	r1, #32
 800080c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000810:	f002 f8a2 	bl	8002958 <HAL_GPIO_WritePin>
}
 8000814:	bf00      	nop
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000824:	2200      	movs	r2, #0
 8000826:	2120      	movs	r1, #32
 8000828:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800082c:	f002 f894 	bl	8002958 <HAL_GPIO_WritePin>
}
 8000830:	bf00      	nop
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800083c:	b672      	cpsid	i
}
 800083e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000840:	e7fe      	b.n	8000840 <Error_Handler+0x8>
	...

08000844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084a:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <HAL_MspInit+0x44>)
 800084c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800084e:	4a0e      	ldr	r2, [pc, #56]	; (8000888 <HAL_MspInit+0x44>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	6613      	str	r3, [r2, #96]	; 0x60
 8000856:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <HAL_MspInit+0x44>)
 8000858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <HAL_MspInit+0x44>)
 8000864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000866:	4a08      	ldr	r2, [pc, #32]	; (8000888 <HAL_MspInit+0x44>)
 8000868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800086c:	6593      	str	r3, [r2, #88]	; 0x58
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <HAL_MspInit+0x44>)
 8000870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087a:	bf00      	nop
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	40021000 	.word	0x40021000

0800088c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b0ac      	sub	sp, #176	; 0xb0
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	2288      	movs	r2, #136	; 0x88
 80008aa:	2100      	movs	r1, #0
 80008ac:	4618      	mov	r0, r3
 80008ae:	f004 f865 	bl	800497c <memset>
  if(hadc->Instance==ADC1)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a3d      	ldr	r2, [pc, #244]	; (80009ac <HAL_ADC_MspInit+0x120>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d172      	bne.n	80009a2 <HAL_ADC_MspInit+0x116>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008c0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80008c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80008c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80008ca:	2302      	movs	r3, #2
 80008cc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80008ce:	2301      	movs	r3, #1
 80008d0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80008d2:	2308      	movs	r3, #8
 80008d4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80008d6:	2307      	movs	r3, #7
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80008da:	2302      	movs	r3, #2
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80008de:	2302      	movs	r3, #2
 80008e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80008e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80008e6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	4618      	mov	r0, r3
 80008ee:	f002 feaf 	bl	8003650 <HAL_RCCEx_PeriphCLKConfig>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80008f8:	f7ff ff9e 	bl	8000838 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80008fc:	4b2c      	ldr	r3, [pc, #176]	; (80009b0 <HAL_ADC_MspInit+0x124>)
 80008fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000900:	4a2b      	ldr	r2, [pc, #172]	; (80009b0 <HAL_ADC_MspInit+0x124>)
 8000902:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000906:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000908:	4b29      	ldr	r3, [pc, #164]	; (80009b0 <HAL_ADC_MspInit+0x124>)
 800090a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000910:	613b      	str	r3, [r7, #16]
 8000912:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000914:	4b26      	ldr	r3, [pc, #152]	; (80009b0 <HAL_ADC_MspInit+0x124>)
 8000916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000918:	4a25      	ldr	r2, [pc, #148]	; (80009b0 <HAL_ADC_MspInit+0x124>)
 800091a:	f043 0301 	orr.w	r3, r3, #1
 800091e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000920:	4b23      	ldr	r3, [pc, #140]	; (80009b0 <HAL_ADC_MspInit+0x124>)
 8000922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000924:	f003 0301 	and.w	r3, r3, #1
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800092c:	2301      	movs	r3, #1
 800092e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000932:	230b      	movs	r3, #11
 8000934:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000942:	4619      	mov	r1, r3
 8000944:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000948:	f001 fe5c 	bl	8002604 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800094c:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <HAL_ADC_MspInit+0x128>)
 800094e:	4a1a      	ldr	r2, [pc, #104]	; (80009b8 <HAL_ADC_MspInit+0x12c>)
 8000950:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000952:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <HAL_ADC_MspInit+0x128>)
 8000954:	2200      	movs	r2, #0
 8000956:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000958:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <HAL_ADC_MspInit+0x128>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800095e:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <HAL_ADC_MspInit+0x128>)
 8000960:	2200      	movs	r2, #0
 8000962:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000964:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <HAL_ADC_MspInit+0x128>)
 8000966:	2280      	movs	r2, #128	; 0x80
 8000968:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800096a:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <HAL_ADC_MspInit+0x128>)
 800096c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000970:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000972:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <HAL_ADC_MspInit+0x128>)
 8000974:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000978:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <HAL_ADC_MspInit+0x128>)
 800097c:	2220      	movs	r2, #32
 800097e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <HAL_ADC_MspInit+0x128>)
 8000982:	2200      	movs	r2, #0
 8000984:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000986:	480b      	ldr	r0, [pc, #44]	; (80009b4 <HAL_ADC_MspInit+0x128>)
 8000988:	f001 fc44 	bl	8002214 <HAL_DMA_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 8000992:	f7ff ff51 	bl	8000838 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4a06      	ldr	r2, [pc, #24]	; (80009b4 <HAL_ADC_MspInit+0x128>)
 800099a:	64da      	str	r2, [r3, #76]	; 0x4c
 800099c:	4a05      	ldr	r2, [pc, #20]	; (80009b4 <HAL_ADC_MspInit+0x128>)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009a2:	bf00      	nop
 80009a4:	37b0      	adds	r7, #176	; 0xb0
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	50040000 	.word	0x50040000
 80009b0:	40021000 	.word	0x40021000
 80009b4:	2000008c 	.word	0x2000008c
 80009b8:	40020008 	.word	0x40020008

080009bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b0ac      	sub	sp, #176	; 0xb0
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	2288      	movs	r2, #136	; 0x88
 80009da:	2100      	movs	r1, #0
 80009dc:	4618      	mov	r0, r3
 80009de:	f003 ffcd 	bl	800497c <memset>
  if(huart->Instance==USART2)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a21      	ldr	r2, [pc, #132]	; (8000a6c <HAL_UART_MspInit+0xb0>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d13b      	bne.n	8000a64 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009ec:	2302      	movs	r3, #2
 80009ee:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009f0:	2300      	movs	r3, #0
 80009f2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	4618      	mov	r0, r3
 80009fa:	f002 fe29 	bl	8003650 <HAL_RCCEx_PeriphCLKConfig>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a04:	f7ff ff18 	bl	8000838 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a08:	4b19      	ldr	r3, [pc, #100]	; (8000a70 <HAL_UART_MspInit+0xb4>)
 8000a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a0c:	4a18      	ldr	r2, [pc, #96]	; (8000a70 <HAL_UART_MspInit+0xb4>)
 8000a0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a12:	6593      	str	r3, [r2, #88]	; 0x58
 8000a14:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <HAL_UART_MspInit+0xb4>)
 8000a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a1c:	613b      	str	r3, [r7, #16]
 8000a1e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a20:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <HAL_UART_MspInit+0xb4>)
 8000a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a24:	4a12      	ldr	r2, [pc, #72]	; (8000a70 <HAL_UART_MspInit+0xb4>)
 8000a26:	f043 0301 	orr.w	r3, r3, #1
 8000a2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2c:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <HAL_UART_MspInit+0xb4>)
 8000a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a30:	f003 0301 	and.w	r3, r3, #1
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a38:	230c      	movs	r3, #12
 8000a3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a50:	2307      	movs	r3, #7
 8000a52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a56:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a60:	f001 fdd0 	bl	8002604 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a64:	bf00      	nop
 8000a66:	37b0      	adds	r7, #176	; 0xb0
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40004400 	.word	0x40004400
 8000a70:	40021000 	.word	0x40021000

08000a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <NMI_Handler+0x4>

08000a7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7e:	e7fe      	b.n	8000a7e <HardFault_Handler+0x4>

08000a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <MemManage_Handler+0x4>

08000a86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a8a:	e7fe      	b.n	8000a8a <BusFault_Handler+0x4>

08000a8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <UsageFault_Handler+0x4>

08000a92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac0:	f000 f8a4 	bl	8000c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000acc:	4802      	ldr	r0, [pc, #8]	; (8000ad8 <DMA1_Channel1_IRQHandler+0x10>)
 8000ace:	f001 fcb9 	bl	8002444 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	2000008c 	.word	0x2000008c

08000adc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <SystemInit+0x20>)
 8000ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ae6:	4a05      	ldr	r2, [pc, #20]	; (8000afc <SystemInit+0x20>)
 8000ae8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b38 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b04:	f7ff ffea 	bl	8000adc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b08:	480c      	ldr	r0, [pc, #48]	; (8000b3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b0a:	490d      	ldr	r1, [pc, #52]	; (8000b40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b0c:	4a0d      	ldr	r2, [pc, #52]	; (8000b44 <LoopForever+0xe>)
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b10:	e002      	b.n	8000b18 <LoopCopyDataInit>

08000b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b16:	3304      	adds	r3, #4

08000b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b1c:	d3f9      	bcc.n	8000b12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1e:	4a0a      	ldr	r2, [pc, #40]	; (8000b48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b20:	4c0a      	ldr	r4, [pc, #40]	; (8000b4c <LoopForever+0x16>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b24:	e001      	b.n	8000b2a <LoopFillZerobss>

08000b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b28:	3204      	adds	r2, #4

08000b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b2c:	d3fb      	bcc.n	8000b26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b2e:	f003 ff01 	bl	8004934 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b32:	f7ff fccb 	bl	80004cc <main>

08000b36 <LoopForever>:

LoopForever:
    b LoopForever
 8000b36:	e7fe      	b.n	8000b36 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b38:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b40:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b44:	080049fc 	.word	0x080049fc
  ldr r2, =_sbss
 8000b48:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b4c:	2000215c 	.word	0x2000215c

08000b50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b50:	e7fe      	b.n	8000b50 <ADC1_2_IRQHandler>
	...

08000b54 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_Init+0x3c>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a0b      	ldr	r2, [pc, #44]	; (8000b90 <HAL_Init+0x3c>)
 8000b64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b68:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b6a:	2003      	movs	r0, #3
 8000b6c:	f001 fb10 	bl	8002190 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b70:	2000      	movs	r0, #0
 8000b72:	f000 f80f 	bl	8000b94 <HAL_InitTick>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d002      	beq.n	8000b82 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	71fb      	strb	r3, [r7, #7]
 8000b80:	e001      	b.n	8000b86 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b82:	f7ff fe5f 	bl	8000844 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b86:	79fb      	ldrb	r3, [r7, #7]
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40022000 	.word	0x40022000

08000b94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ba0:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <HAL_InitTick+0x6c>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d023      	beq.n	8000bf0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ba8:	4b16      	ldr	r3, [pc, #88]	; (8000c04 <HAL_InitTick+0x70>)
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <HAL_InitTick+0x6c>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f001 fb1b 	bl	80021fa <HAL_SYSTICK_Config>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d10f      	bne.n	8000bea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2b0f      	cmp	r3, #15
 8000bce:	d809      	bhi.n	8000be4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	6879      	ldr	r1, [r7, #4]
 8000bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd8:	f001 fae5 	bl	80021a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bdc:	4a0a      	ldr	r2, [pc, #40]	; (8000c08 <HAL_InitTick+0x74>)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6013      	str	r3, [r2, #0]
 8000be2:	e007      	b.n	8000bf4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000be4:	2301      	movs	r3, #1
 8000be6:	73fb      	strb	r3, [r7, #15]
 8000be8:	e004      	b.n	8000bf4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	73fb      	strb	r3, [r7, #15]
 8000bee:	e001      	b.n	8000bf4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3710      	adds	r7, #16
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000008 	.word	0x20000008
 8000c04:	20000000 	.word	0x20000000
 8000c08:	20000004 	.word	0x20000004

08000c0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <HAL_IncTick+0x20>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	461a      	mov	r2, r3
 8000c16:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <HAL_IncTick+0x24>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	4a04      	ldr	r2, [pc, #16]	; (8000c30 <HAL_IncTick+0x24>)
 8000c1e:	6013      	str	r3, [r2, #0]
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	20000008 	.word	0x20000008
 8000c30:	20002158 	.word	0x20002158

08000c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return uwTick;
 8000c38:	4b03      	ldr	r3, [pc, #12]	; (8000c48 <HAL_GetTick+0x14>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	20002158 	.word	0x20002158

08000c4c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	689b      	ldr	r3, [r3, #8]
 8000c5a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	431a      	orrs	r2, r3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	609a      	str	r2, [r3, #8]
}
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000c72:	b480      	push	{r7}
 8000c74:	b083      	sub	sp, #12
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
 8000c7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	431a      	orrs	r2, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b087      	sub	sp, #28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
 8000cc0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	3360      	adds	r3, #96	; 0x60
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	4413      	add	r3, r2
 8000cce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <LL_ADC_SetOffset+0x44>)
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000cde:	683a      	ldr	r2, [r7, #0]
 8000ce0:	430a      	orrs	r2, r1
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000cec:	bf00      	nop
 8000cee:	371c      	adds	r7, #28
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	03fff000 	.word	0x03fff000

08000cfc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	3360      	adds	r3, #96	; 0x60
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	4413      	add	r3, r2
 8000d12:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b087      	sub	sp, #28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	3360      	adds	r3, #96	; 0x60
 8000d38:	461a      	mov	r2, r3
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	4413      	add	r3, r2
 8000d40:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	431a      	orrs	r2, r3
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000d52:	bf00      	nop
 8000d54:	371c      	adds	r7, #28
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	b083      	sub	sp, #12
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	68db      	ldr	r3, [r3, #12]
 8000d6a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d101      	bne.n	8000d76 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000d72:	2301      	movs	r3, #1
 8000d74:	e000      	b.n	8000d78 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000d76:	2300      	movs	r3, #0
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b087      	sub	sp, #28
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	3330      	adds	r3, #48	; 0x30
 8000d94:	461a      	mov	r2, r3
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	0a1b      	lsrs	r3, r3, #8
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	f003 030c 	and.w	r3, r3, #12
 8000da0:	4413      	add	r3, r2
 8000da2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	f003 031f 	and.w	r3, r3, #31
 8000dae:	211f      	movs	r1, #31
 8000db0:	fa01 f303 	lsl.w	r3, r1, r3
 8000db4:	43db      	mvns	r3, r3
 8000db6:	401a      	ands	r2, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	0e9b      	lsrs	r3, r3, #26
 8000dbc:	f003 011f 	and.w	r1, r3, #31
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	f003 031f 	and.w	r3, r3, #31
 8000dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dca:	431a      	orrs	r2, r3
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000dd0:	bf00      	nop
 8000dd2:	371c      	adds	r7, #28
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b087      	sub	sp, #28
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	3314      	adds	r3, #20
 8000dec:	461a      	mov	r2, r3
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	0e5b      	lsrs	r3, r3, #25
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	f003 0304 	and.w	r3, r3, #4
 8000df8:	4413      	add	r3, r2
 8000dfa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	0d1b      	lsrs	r3, r3, #20
 8000e04:	f003 031f 	and.w	r3, r3, #31
 8000e08:	2107      	movs	r1, #7
 8000e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	401a      	ands	r2, r3
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	0d1b      	lsrs	r3, r3, #20
 8000e16:	f003 031f 	and.w	r3, r3, #31
 8000e1a:	6879      	ldr	r1, [r7, #4]
 8000e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e20:	431a      	orrs	r2, r3
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000e26:	bf00      	nop
 8000e28:	371c      	adds	r7, #28
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
	...

08000e34 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	401a      	ands	r2, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f003 0318 	and.w	r3, r3, #24
 8000e56:	4908      	ldr	r1, [pc, #32]	; (8000e78 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000e58:	40d9      	lsrs	r1, r3
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	400b      	ands	r3, r1
 8000e5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e62:	431a      	orrs	r2, r3
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000e6a:	bf00      	nop
 8000e6c:	3714      	adds	r7, #20
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	0007ffff 	.word	0x0007ffff

08000e7c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	689b      	ldr	r3, [r3, #8]
 8000e88:	f003 031f 	and.w	r3, r3, #31
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000ea8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	6093      	str	r3, [r2, #8]
}
 8000eb0:	bf00      	nop
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000ecc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ed0:	d101      	bne.n	8000ed6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e000      	b.n	8000ed8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000ed6:	2300      	movs	r3, #0
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000ef4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ef8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000f20:	d101      	bne.n	8000f26 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000f22:	2301      	movs	r3, #1
 8000f24:	e000      	b.n	8000f28 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000f26:	2300      	movs	r3, #0
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000f44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f48:	f043 0201 	orr.w	r2, r3, #1
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	f003 0301 	and.w	r3, r3, #1
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d101      	bne.n	8000f74 <LL_ADC_IsEnabled+0x18>
 8000f70:	2301      	movs	r3, #1
 8000f72:	e000      	b.n	8000f76 <LL_ADC_IsEnabled+0x1a>
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000f82:	b480      	push	{r7}
 8000f84:	b083      	sub	sp, #12
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000f92:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f96:	f043 0204 	orr.w	r2, r3, #4
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000faa:	b480      	push	{r7}
 8000fac:	b083      	sub	sp, #12
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	f003 0304 	and.w	r3, r3, #4
 8000fba:	2b04      	cmp	r3, #4
 8000fbc:	d101      	bne.n	8000fc2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e000      	b.n	8000fc4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000fc2:	2300      	movs	r3, #0
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	f003 0308 	and.w	r3, r3, #8
 8000fe0:	2b08      	cmp	r3, #8
 8000fe2:	d101      	bne.n	8000fe8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e000      	b.n	8000fea <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
	...

08000ff8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000ff8:	b590      	push	{r4, r7, lr}
 8000ffa:	b089      	sub	sp, #36	; 0x24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001000:	2300      	movs	r3, #0
 8001002:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001004:	2300      	movs	r3, #0
 8001006:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d101      	bne.n	8001012 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e136      	b.n	8001280 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	691b      	ldr	r3, [r3, #16]
 8001016:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800101c:	2b00      	cmp	r3, #0
 800101e:	d109      	bne.n	8001034 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f7ff fc33 	bl	800088c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2200      	movs	r2, #0
 8001030:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ff3f 	bl	8000ebc <LL_ADC_IsDeepPowerDownEnabled>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d004      	beq.n	800104e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff25 	bl	8000e98 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff ff5a 	bl	8000f0c <LL_ADC_IsInternalRegulatorEnabled>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d115      	bne.n	800108a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff ff3e 	bl	8000ee4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001068:	4b87      	ldr	r3, [pc, #540]	; (8001288 <HAL_ADC_Init+0x290>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	099b      	lsrs	r3, r3, #6
 800106e:	4a87      	ldr	r2, [pc, #540]	; (800128c <HAL_ADC_Init+0x294>)
 8001070:	fba2 2303 	umull	r2, r3, r2, r3
 8001074:	099b      	lsrs	r3, r3, #6
 8001076:	3301      	adds	r3, #1
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800107c:	e002      	b.n	8001084 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	3b01      	subs	r3, #1
 8001082:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d1f9      	bne.n	800107e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff ff3c 	bl	8000f0c <LL_ADC_IsInternalRegulatorEnabled>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d10d      	bne.n	80010b6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800109e:	f043 0210 	orr.w	r2, r3, #16
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010aa:	f043 0201 	orr.w	r2, r3, #1
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff ff75 	bl	8000faa <LL_ADC_REG_IsConversionOngoing>
 80010c0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010c6:	f003 0310 	and.w	r3, r3, #16
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	f040 80cf 	bne.w	800126e <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	f040 80cb 	bne.w	800126e <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010dc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80010e0:	f043 0202 	orr.w	r2, r3, #2
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff35 	bl	8000f5c <LL_ADC_IsEnabled>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d115      	bne.n	8001124 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80010f8:	4865      	ldr	r0, [pc, #404]	; (8001290 <HAL_ADC_Init+0x298>)
 80010fa:	f7ff ff2f 	bl	8000f5c <LL_ADC_IsEnabled>
 80010fe:	4604      	mov	r4, r0
 8001100:	4864      	ldr	r0, [pc, #400]	; (8001294 <HAL_ADC_Init+0x29c>)
 8001102:	f7ff ff2b 	bl	8000f5c <LL_ADC_IsEnabled>
 8001106:	4603      	mov	r3, r0
 8001108:	431c      	orrs	r4, r3
 800110a:	4863      	ldr	r0, [pc, #396]	; (8001298 <HAL_ADC_Init+0x2a0>)
 800110c:	f7ff ff26 	bl	8000f5c <LL_ADC_IsEnabled>
 8001110:	4603      	mov	r3, r0
 8001112:	4323      	orrs	r3, r4
 8001114:	2b00      	cmp	r3, #0
 8001116:	d105      	bne.n	8001124 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	4619      	mov	r1, r3
 800111e:	485f      	ldr	r0, [pc, #380]	; (800129c <HAL_ADC_Init+0x2a4>)
 8001120:	f7ff fd94 	bl	8000c4c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	7e5b      	ldrb	r3, [r3, #25]
 8001128:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800112e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001134:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800113a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001142:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001144:	4313      	orrs	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800114e:	2b01      	cmp	r3, #1
 8001150:	d106      	bne.n	8001160 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001156:	3b01      	subs	r3, #1
 8001158:	045b      	lsls	r3, r3, #17
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4313      	orrs	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001164:	2b00      	cmp	r3, #0
 8001166:	d009      	beq.n	800117c <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800116c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001174:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4313      	orrs	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	68da      	ldr	r2, [r3, #12]
 8001182:	4b47      	ldr	r3, [pc, #284]	; (80012a0 <HAL_ADC_Init+0x2a8>)
 8001184:	4013      	ands	r3, r2
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	6812      	ldr	r2, [r2, #0]
 800118a:	69b9      	ldr	r1, [r7, #24]
 800118c:	430b      	orrs	r3, r1
 800118e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ff08 	bl	8000faa <LL_ADC_REG_IsConversionOngoing>
 800119a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff ff15 	bl	8000fd0 <LL_ADC_INJ_IsConversionOngoing>
 80011a6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d13d      	bne.n	800122a <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d13a      	bne.n	800122a <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80011b8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80011c0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80011d0:	f023 0302 	bic.w	r3, r3, #2
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	6812      	ldr	r2, [r2, #0]
 80011d8:	69b9      	ldr	r1, [r7, #24]
 80011da:	430b      	orrs	r3, r1
 80011dc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d118      	bne.n	800121a <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	691b      	ldr	r3, [r3, #16]
 80011ee:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80011f2:	f023 0304 	bic.w	r3, r3, #4
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80011fe:	4311      	orrs	r1, r2
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001204:	4311      	orrs	r1, r2
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800120a:	430a      	orrs	r2, r1
 800120c:	431a      	orrs	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f042 0201 	orr.w	r2, r2, #1
 8001216:	611a      	str	r2, [r3, #16]
 8001218:	e007      	b.n	800122a <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	691a      	ldr	r2, [r3, #16]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f022 0201 	bic.w	r2, r2, #1
 8001228:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	691b      	ldr	r3, [r3, #16]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d10c      	bne.n	800124c <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001238:	f023 010f 	bic.w	r1, r3, #15
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	69db      	ldr	r3, [r3, #28]
 8001240:	1e5a      	subs	r2, r3, #1
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	430a      	orrs	r2, r1
 8001248:	631a      	str	r2, [r3, #48]	; 0x30
 800124a:	e007      	b.n	800125c <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f022 020f 	bic.w	r2, r2, #15
 800125a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001260:	f023 0303 	bic.w	r3, r3, #3
 8001264:	f043 0201 	orr.w	r2, r3, #1
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	655a      	str	r2, [r3, #84]	; 0x54
 800126c:	e007      	b.n	800127e <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001272:	f043 0210 	orr.w	r2, r3, #16
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800127e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001280:	4618      	mov	r0, r3
 8001282:	3724      	adds	r7, #36	; 0x24
 8001284:	46bd      	mov	sp, r7
 8001286:	bd90      	pop	{r4, r7, pc}
 8001288:	20000000 	.word	0x20000000
 800128c:	053e2d63 	.word	0x053e2d63
 8001290:	50040000 	.word	0x50040000
 8001294:	50040100 	.word	0x50040100
 8001298:	50040200 	.word	0x50040200
 800129c:	50040300 	.word	0x50040300
 80012a0:	fff0c007 	.word	0xfff0c007

080012a4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80012b0:	4853      	ldr	r0, [pc, #332]	; (8001400 <HAL_ADC_Start_DMA+0x15c>)
 80012b2:	f7ff fde3 	bl	8000e7c <LL_ADC_GetMultimode>
 80012b6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff fe74 	bl	8000faa <LL_ADC_REG_IsConversionOngoing>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	f040 8093 	bne.w	80013f0 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d101      	bne.n	80012d8 <HAL_ADC_Start_DMA+0x34>
 80012d4:	2302      	movs	r3, #2
 80012d6:	e08e      	b.n	80013f6 <HAL_ADC_Start_DMA+0x152>
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	2201      	movs	r2, #1
 80012dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a47      	ldr	r2, [pc, #284]	; (8001404 <HAL_ADC_Start_DMA+0x160>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d008      	beq.n	80012fc <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d005      	beq.n	80012fc <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	2b05      	cmp	r3, #5
 80012f4:	d002      	beq.n	80012fc <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	2b09      	cmp	r3, #9
 80012fa:	d172      	bne.n	80013e2 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80012fc:	68f8      	ldr	r0, [r7, #12]
 80012fe:	f000 fc87 	bl	8001c10 <ADC_Enable>
 8001302:	4603      	mov	r3, r0
 8001304:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001306:	7dfb      	ldrb	r3, [r7, #23]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d165      	bne.n	80013d8 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001310:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001314:	f023 0301 	bic.w	r3, r3, #1
 8001318:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a38      	ldr	r2, [pc, #224]	; (8001408 <HAL_ADC_Start_DMA+0x164>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d002      	beq.n	8001330 <HAL_ADC_Start_DMA+0x8c>
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	e000      	b.n	8001332 <HAL_ADC_Start_DMA+0x8e>
 8001330:	4b36      	ldr	r3, [pc, #216]	; (800140c <HAL_ADC_Start_DMA+0x168>)
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	6812      	ldr	r2, [r2, #0]
 8001336:	4293      	cmp	r3, r2
 8001338:	d002      	beq.n	8001340 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d105      	bne.n	800134c <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001344:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001350:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d006      	beq.n	8001366 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800135c:	f023 0206 	bic.w	r2, r3, #6
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	659a      	str	r2, [r3, #88]	; 0x58
 8001364:	e002      	b.n	800136c <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	2200      	movs	r2, #0
 800136a:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001370:	4a27      	ldr	r2, [pc, #156]	; (8001410 <HAL_ADC_Start_DMA+0x16c>)
 8001372:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001378:	4a26      	ldr	r2, [pc, #152]	; (8001414 <HAL_ADC_Start_DMA+0x170>)
 800137a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001380:	4a25      	ldr	r2, [pc, #148]	; (8001418 <HAL_ADC_Start_DMA+0x174>)
 8001382:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	221c      	movs	r2, #28
 800138a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	2200      	movs	r2, #0
 8001390:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	685a      	ldr	r2, [r3, #4]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f042 0210 	orr.w	r2, r2, #16
 80013a2:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	68da      	ldr	r2, [r3, #12]
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f042 0201 	orr.w	r2, r2, #1
 80013b2:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	3340      	adds	r3, #64	; 0x40
 80013be:	4619      	mov	r1, r3
 80013c0:	68ba      	ldr	r2, [r7, #8]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f000 ffde 	bl	8002384 <HAL_DMA_Start_IT>
 80013c8:	4603      	mov	r3, r0
 80013ca:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff fdd6 	bl	8000f82 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80013d6:	e00d      	b.n	80013f4 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2200      	movs	r2, #0
 80013dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80013e0:	e008      	b.n	80013f4 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80013ee:	e001      	b.n	80013f4 <HAL_ADC_Start_DMA+0x150>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80013f0:	2302      	movs	r3, #2
 80013f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80013f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	50040300 	.word	0x50040300
 8001404:	50040200 	.word	0x50040200
 8001408:	50040100 	.word	0x50040100
 800140c:	50040000 	.word	0x50040000
 8001410:	08001d1d 	.word	0x08001d1d
 8001414:	08001df5 	.word	0x08001df5
 8001418:	08001e11 	.word	0x08001e11

0800141c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b0b6      	sub	sp, #216	; 0xd8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800143a:	2300      	movs	r3, #0
 800143c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001440:	2300      	movs	r3, #0
 8001442:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800144a:	2b01      	cmp	r3, #1
 800144c:	d101      	bne.n	8001452 <HAL_ADC_ConfigChannel+0x22>
 800144e:	2302      	movs	r3, #2
 8001450:	e3c7      	b.n	8001be2 <HAL_ADC_ConfigChannel+0x7b2>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2201      	movs	r2, #1
 8001456:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fda3 	bl	8000faa <LL_ADC_REG_IsConversionOngoing>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	f040 83a8 	bne.w	8001bbc <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	2b05      	cmp	r3, #5
 8001472:	d824      	bhi.n	80014be <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	3b02      	subs	r3, #2
 800147a:	2b03      	cmp	r3, #3
 800147c:	d81b      	bhi.n	80014b6 <HAL_ADC_ConfigChannel+0x86>
 800147e:	a201      	add	r2, pc, #4	; (adr r2, 8001484 <HAL_ADC_ConfigChannel+0x54>)
 8001480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001484:	08001495 	.word	0x08001495
 8001488:	0800149d 	.word	0x0800149d
 800148c:	080014a5 	.word	0x080014a5
 8001490:	080014ad 	.word	0x080014ad
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	220c      	movs	r2, #12
 8001498:	605a      	str	r2, [r3, #4]
          break;
 800149a:	e011      	b.n	80014c0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	2212      	movs	r2, #18
 80014a0:	605a      	str	r2, [r3, #4]
          break;
 80014a2:	e00d      	b.n	80014c0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	2218      	movs	r2, #24
 80014a8:	605a      	str	r2, [r3, #4]
          break;
 80014aa:	e009      	b.n	80014c0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014b2:	605a      	str	r2, [r3, #4]
          break;
 80014b4:	e004      	b.n	80014c0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	2206      	movs	r2, #6
 80014ba:	605a      	str	r2, [r3, #4]
          break;
 80014bc:	e000      	b.n	80014c0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80014be:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6818      	ldr	r0, [r3, #0]
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	6859      	ldr	r1, [r3, #4]
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	461a      	mov	r2, r3
 80014ce:	f7ff fc59 	bl	8000d84 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff fd67 	bl	8000faa <LL_ADC_REG_IsConversionOngoing>
 80014dc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fd73 	bl	8000fd0 <LL_ADC_INJ_IsConversionOngoing>
 80014ea:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80014ee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	f040 81a6 	bne.w	8001844 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80014f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	f040 81a1 	bne.w	8001844 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6818      	ldr	r0, [r3, #0]
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	6819      	ldr	r1, [r3, #0]
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	461a      	mov	r2, r3
 8001510:	f7ff fc64 	bl	8000ddc <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	695a      	ldr	r2, [r3, #20]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	08db      	lsrs	r3, r3, #3
 8001520:	f003 0303 	and.w	r3, r3, #3
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	691b      	ldr	r3, [r3, #16]
 8001532:	2b04      	cmp	r3, #4
 8001534:	d00a      	beq.n	800154c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6818      	ldr	r0, [r3, #0]
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	6919      	ldr	r1, [r3, #16]
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001546:	f7ff fbb5 	bl	8000cb4 <LL_ADC_SetOffset>
 800154a:	e17b      	b.n	8001844 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2100      	movs	r1, #0
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff fbd2 	bl	8000cfc <LL_ADC_GetOffsetChannel>
 8001558:	4603      	mov	r3, r0
 800155a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800155e:	2b00      	cmp	r3, #0
 8001560:	d10a      	bne.n	8001578 <HAL_ADC_ConfigChannel+0x148>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2100      	movs	r1, #0
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff fbc7 	bl	8000cfc <LL_ADC_GetOffsetChannel>
 800156e:	4603      	mov	r3, r0
 8001570:	0e9b      	lsrs	r3, r3, #26
 8001572:	f003 021f 	and.w	r2, r3, #31
 8001576:	e01e      	b.n	80015b6 <HAL_ADC_ConfigChannel+0x186>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2100      	movs	r1, #0
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff fbbc 	bl	8000cfc <LL_ADC_GetOffsetChannel>
 8001584:	4603      	mov	r3, r0
 8001586:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800158a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800158e:	fa93 f3a3 	rbit	r3, r3
 8001592:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001596:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800159a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800159e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d101      	bne.n	80015aa <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80015a6:	2320      	movs	r3, #32
 80015a8:	e004      	b.n	80015b4 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80015aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80015ae:	fab3 f383 	clz	r3, r3
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d105      	bne.n	80015ce <HAL_ADC_ConfigChannel+0x19e>
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	0e9b      	lsrs	r3, r3, #26
 80015c8:	f003 031f 	and.w	r3, r3, #31
 80015cc:	e018      	b.n	8001600 <HAL_ADC_ConfigChannel+0x1d0>
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80015da:	fa93 f3a3 	rbit	r3, r3
 80015de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80015e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80015e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80015ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80015f2:	2320      	movs	r3, #32
 80015f4:	e004      	b.n	8001600 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80015f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80015fa:	fab3 f383 	clz	r3, r3
 80015fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001600:	429a      	cmp	r2, r3
 8001602:	d106      	bne.n	8001612 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2200      	movs	r2, #0
 800160a:	2100      	movs	r1, #0
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff fb8b 	bl	8000d28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2101      	movs	r1, #1
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff fb6f 	bl	8000cfc <LL_ADC_GetOffsetChannel>
 800161e:	4603      	mov	r3, r0
 8001620:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001624:	2b00      	cmp	r3, #0
 8001626:	d10a      	bne.n	800163e <HAL_ADC_ConfigChannel+0x20e>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2101      	movs	r1, #1
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff fb64 	bl	8000cfc <LL_ADC_GetOffsetChannel>
 8001634:	4603      	mov	r3, r0
 8001636:	0e9b      	lsrs	r3, r3, #26
 8001638:	f003 021f 	and.w	r2, r3, #31
 800163c:	e01e      	b.n	800167c <HAL_ADC_ConfigChannel+0x24c>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2101      	movs	r1, #1
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff fb59 	bl	8000cfc <LL_ADC_GetOffsetChannel>
 800164a:	4603      	mov	r3, r0
 800164c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001650:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001654:	fa93 f3a3 	rbit	r3, r3
 8001658:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800165c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001660:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001664:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001668:	2b00      	cmp	r3, #0
 800166a:	d101      	bne.n	8001670 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 800166c:	2320      	movs	r3, #32
 800166e:	e004      	b.n	800167a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001670:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001674:	fab3 f383 	clz	r3, r3
 8001678:	b2db      	uxtb	r3, r3
 800167a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001684:	2b00      	cmp	r3, #0
 8001686:	d105      	bne.n	8001694 <HAL_ADC_ConfigChannel+0x264>
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	0e9b      	lsrs	r3, r3, #26
 800168e:	f003 031f 	and.w	r3, r3, #31
 8001692:	e018      	b.n	80016c6 <HAL_ADC_ConfigChannel+0x296>
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80016a0:	fa93 f3a3 	rbit	r3, r3
 80016a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80016a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80016ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80016b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d101      	bne.n	80016bc <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80016b8:	2320      	movs	r3, #32
 80016ba:	e004      	b.n	80016c6 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80016bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80016c0:	fab3 f383 	clz	r3, r3
 80016c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d106      	bne.n	80016d8 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2200      	movs	r2, #0
 80016d0:	2101      	movs	r1, #1
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff fb28 	bl	8000d28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2102      	movs	r1, #2
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fb0c 	bl	8000cfc <LL_ADC_GetOffsetChannel>
 80016e4:	4603      	mov	r3, r0
 80016e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d10a      	bne.n	8001704 <HAL_ADC_ConfigChannel+0x2d4>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2102      	movs	r1, #2
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff fb01 	bl	8000cfc <LL_ADC_GetOffsetChannel>
 80016fa:	4603      	mov	r3, r0
 80016fc:	0e9b      	lsrs	r3, r3, #26
 80016fe:	f003 021f 	and.w	r2, r3, #31
 8001702:	e01e      	b.n	8001742 <HAL_ADC_ConfigChannel+0x312>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2102      	movs	r1, #2
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff faf6 	bl	8000cfc <LL_ADC_GetOffsetChannel>
 8001710:	4603      	mov	r3, r0
 8001712:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001716:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800171a:	fa93 f3a3 	rbit	r3, r3
 800171e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001722:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001726:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800172a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001732:	2320      	movs	r3, #32
 8001734:	e004      	b.n	8001740 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001736:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800173a:	fab3 f383 	clz	r3, r3
 800173e:	b2db      	uxtb	r3, r3
 8001740:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800174a:	2b00      	cmp	r3, #0
 800174c:	d105      	bne.n	800175a <HAL_ADC_ConfigChannel+0x32a>
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	0e9b      	lsrs	r3, r3, #26
 8001754:	f003 031f 	and.w	r3, r3, #31
 8001758:	e016      	b.n	8001788 <HAL_ADC_ConfigChannel+0x358>
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001762:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001766:	fa93 f3a3 	rbit	r3, r3
 800176a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800176c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800176e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001772:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001776:	2b00      	cmp	r3, #0
 8001778:	d101      	bne.n	800177e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800177a:	2320      	movs	r3, #32
 800177c:	e004      	b.n	8001788 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800177e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001782:	fab3 f383 	clz	r3, r3
 8001786:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001788:	429a      	cmp	r2, r3
 800178a:	d106      	bne.n	800179a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2200      	movs	r2, #0
 8001792:	2102      	movs	r1, #2
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff fac7 	bl	8000d28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2103      	movs	r1, #3
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff faab 	bl	8000cfc <LL_ADC_GetOffsetChannel>
 80017a6:	4603      	mov	r3, r0
 80017a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d10a      	bne.n	80017c6 <HAL_ADC_ConfigChannel+0x396>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2103      	movs	r1, #3
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff faa0 	bl	8000cfc <LL_ADC_GetOffsetChannel>
 80017bc:	4603      	mov	r3, r0
 80017be:	0e9b      	lsrs	r3, r3, #26
 80017c0:	f003 021f 	and.w	r2, r3, #31
 80017c4:	e017      	b.n	80017f6 <HAL_ADC_ConfigChannel+0x3c6>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2103      	movs	r1, #3
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff fa95 	bl	8000cfc <LL_ADC_GetOffsetChannel>
 80017d2:	4603      	mov	r3, r0
 80017d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017d8:	fa93 f3a3 	rbit	r3, r3
 80017dc:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80017de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017e0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80017e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d101      	bne.n	80017ec <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80017e8:	2320      	movs	r3, #32
 80017ea:	e003      	b.n	80017f4 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80017ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017ee:	fab3 f383 	clz	r3, r3
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d105      	bne.n	800180e <HAL_ADC_ConfigChannel+0x3de>
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	0e9b      	lsrs	r3, r3, #26
 8001808:	f003 031f 	and.w	r3, r3, #31
 800180c:	e011      	b.n	8001832 <HAL_ADC_ConfigChannel+0x402>
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001814:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001816:	fa93 f3a3 	rbit	r3, r3
 800181a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800181c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800181e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001820:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001826:	2320      	movs	r3, #32
 8001828:	e003      	b.n	8001832 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800182a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800182c:	fab3 f383 	clz	r3, r3
 8001830:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001832:	429a      	cmp	r2, r3
 8001834:	d106      	bne.n	8001844 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2200      	movs	r2, #0
 800183c:	2103      	movs	r1, #3
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff fa72 	bl	8000d28 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff fb87 	bl	8000f5c <LL_ADC_IsEnabled>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	f040 813f 	bne.w	8001ad4 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6818      	ldr	r0, [r3, #0]
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	6819      	ldr	r1, [r3, #0]
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	461a      	mov	r2, r3
 8001864:	f7ff fae6 	bl	8000e34 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	4a8e      	ldr	r2, [pc, #568]	; (8001aa8 <HAL_ADC_ConfigChannel+0x678>)
 800186e:	4293      	cmp	r3, r2
 8001870:	f040 8130 	bne.w	8001ad4 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001880:	2b00      	cmp	r3, #0
 8001882:	d10b      	bne.n	800189c <HAL_ADC_ConfigChannel+0x46c>
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	0e9b      	lsrs	r3, r3, #26
 800188a:	3301      	adds	r3, #1
 800188c:	f003 031f 	and.w	r3, r3, #31
 8001890:	2b09      	cmp	r3, #9
 8001892:	bf94      	ite	ls
 8001894:	2301      	movls	r3, #1
 8001896:	2300      	movhi	r3, #0
 8001898:	b2db      	uxtb	r3, r3
 800189a:	e019      	b.n	80018d0 <HAL_ADC_ConfigChannel+0x4a0>
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018a4:	fa93 f3a3 	rbit	r3, r3
 80018a8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80018aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018ac:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80018ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d101      	bne.n	80018b8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80018b4:	2320      	movs	r3, #32
 80018b6:	e003      	b.n	80018c0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80018b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018ba:	fab3 f383 	clz	r3, r3
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	3301      	adds	r3, #1
 80018c2:	f003 031f 	and.w	r3, r3, #31
 80018c6:	2b09      	cmp	r3, #9
 80018c8:	bf94      	ite	ls
 80018ca:	2301      	movls	r3, #1
 80018cc:	2300      	movhi	r3, #0
 80018ce:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d079      	beq.n	80019c8 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d107      	bne.n	80018f0 <HAL_ADC_ConfigChannel+0x4c0>
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	0e9b      	lsrs	r3, r3, #26
 80018e6:	3301      	adds	r3, #1
 80018e8:	069b      	lsls	r3, r3, #26
 80018ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018ee:	e015      	b.n	800191c <HAL_ADC_ConfigChannel+0x4ec>
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018f8:	fa93 f3a3 	rbit	r3, r3
 80018fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80018fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001900:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001904:	2b00      	cmp	r3, #0
 8001906:	d101      	bne.n	800190c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001908:	2320      	movs	r3, #32
 800190a:	e003      	b.n	8001914 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 800190c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800190e:	fab3 f383 	clz	r3, r3
 8001912:	b2db      	uxtb	r3, r3
 8001914:	3301      	adds	r3, #1
 8001916:	069b      	lsls	r3, r3, #26
 8001918:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001924:	2b00      	cmp	r3, #0
 8001926:	d109      	bne.n	800193c <HAL_ADC_ConfigChannel+0x50c>
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	0e9b      	lsrs	r3, r3, #26
 800192e:	3301      	adds	r3, #1
 8001930:	f003 031f 	and.w	r3, r3, #31
 8001934:	2101      	movs	r1, #1
 8001936:	fa01 f303 	lsl.w	r3, r1, r3
 800193a:	e017      	b.n	800196c <HAL_ADC_ConfigChannel+0x53c>
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001942:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001944:	fa93 f3a3 	rbit	r3, r3
 8001948:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800194a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800194c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800194e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001950:	2b00      	cmp	r3, #0
 8001952:	d101      	bne.n	8001958 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001954:	2320      	movs	r3, #32
 8001956:	e003      	b.n	8001960 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001958:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800195a:	fab3 f383 	clz	r3, r3
 800195e:	b2db      	uxtb	r3, r3
 8001960:	3301      	adds	r3, #1
 8001962:	f003 031f 	and.w	r3, r3, #31
 8001966:	2101      	movs	r1, #1
 8001968:	fa01 f303 	lsl.w	r3, r1, r3
 800196c:	ea42 0103 	orr.w	r1, r2, r3
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001978:	2b00      	cmp	r3, #0
 800197a:	d10a      	bne.n	8001992 <HAL_ADC_ConfigChannel+0x562>
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	0e9b      	lsrs	r3, r3, #26
 8001982:	3301      	adds	r3, #1
 8001984:	f003 021f 	and.w	r2, r3, #31
 8001988:	4613      	mov	r3, r2
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	4413      	add	r3, r2
 800198e:	051b      	lsls	r3, r3, #20
 8001990:	e018      	b.n	80019c4 <HAL_ADC_ConfigChannel+0x594>
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800199a:	fa93 f3a3 	rbit	r3, r3
 800199e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80019a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80019a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80019aa:	2320      	movs	r3, #32
 80019ac:	e003      	b.n	80019b6 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80019ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019b0:	fab3 f383 	clz	r3, r3
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	3301      	adds	r3, #1
 80019b8:	f003 021f 	and.w	r2, r3, #31
 80019bc:	4613      	mov	r3, r2
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	4413      	add	r3, r2
 80019c2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019c4:	430b      	orrs	r3, r1
 80019c6:	e080      	b.n	8001aca <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d107      	bne.n	80019e4 <HAL_ADC_ConfigChannel+0x5b4>
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	0e9b      	lsrs	r3, r3, #26
 80019da:	3301      	adds	r3, #1
 80019dc:	069b      	lsls	r3, r3, #26
 80019de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019e2:	e015      	b.n	8001a10 <HAL_ADC_ConfigChannel+0x5e0>
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ec:	fa93 f3a3 	rbit	r3, r3
 80019f0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80019f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019f4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80019f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d101      	bne.n	8001a00 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80019fc:	2320      	movs	r3, #32
 80019fe:	e003      	b.n	8001a08 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a02:	fab3 f383 	clz	r3, r3
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	3301      	adds	r3, #1
 8001a0a:	069b      	lsls	r3, r3, #26
 8001a0c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d109      	bne.n	8001a30 <HAL_ADC_ConfigChannel+0x600>
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	0e9b      	lsrs	r3, r3, #26
 8001a22:	3301      	adds	r3, #1
 8001a24:	f003 031f 	and.w	r3, r3, #31
 8001a28:	2101      	movs	r1, #1
 8001a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2e:	e017      	b.n	8001a60 <HAL_ADC_ConfigChannel+0x630>
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a36:	6a3b      	ldr	r3, [r7, #32]
 8001a38:	fa93 f3a3 	rbit	r3, r3
 8001a3c:	61fb      	str	r3, [r7, #28]
  return result;
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d101      	bne.n	8001a4c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001a48:	2320      	movs	r3, #32
 8001a4a:	e003      	b.n	8001a54 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4e:	fab3 f383 	clz	r3, r3
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	3301      	adds	r3, #1
 8001a56:	f003 031f 	and.w	r3, r3, #31
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a60:	ea42 0103 	orr.w	r1, r2, r3
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d10d      	bne.n	8001a8c <HAL_ADC_ConfigChannel+0x65c>
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	0e9b      	lsrs	r3, r3, #26
 8001a76:	3301      	adds	r3, #1
 8001a78:	f003 021f 	and.w	r2, r3, #31
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	4413      	add	r3, r2
 8001a82:	3b1e      	subs	r3, #30
 8001a84:	051b      	lsls	r3, r3, #20
 8001a86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a8a:	e01d      	b.n	8001ac8 <HAL_ADC_ConfigChannel+0x698>
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	fa93 f3a3 	rbit	r3, r3
 8001a98:	613b      	str	r3, [r7, #16]
  return result;
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d103      	bne.n	8001aac <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001aa4:	2320      	movs	r3, #32
 8001aa6:	e005      	b.n	8001ab4 <HAL_ADC_ConfigChannel+0x684>
 8001aa8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	fab3 f383 	clz	r3, r3
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	f003 021f 	and.w	r2, r3, #31
 8001aba:	4613      	mov	r3, r2
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	4413      	add	r3, r2
 8001ac0:	3b1e      	subs	r3, #30
 8001ac2:	051b      	lsls	r3, r3, #20
 8001ac4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ac8:	430b      	orrs	r3, r1
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	6892      	ldr	r2, [r2, #8]
 8001ace:	4619      	mov	r1, r3
 8001ad0:	f7ff f984 	bl	8000ddc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	4b44      	ldr	r3, [pc, #272]	; (8001bec <HAL_ADC_ConfigChannel+0x7bc>)
 8001ada:	4013      	ands	r3, r2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d07a      	beq.n	8001bd6 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ae0:	4843      	ldr	r0, [pc, #268]	; (8001bf0 <HAL_ADC_ConfigChannel+0x7c0>)
 8001ae2:	f7ff f8d9 	bl	8000c98 <LL_ADC_GetCommonPathInternalCh>
 8001ae6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a41      	ldr	r2, [pc, #260]	; (8001bf4 <HAL_ADC_ConfigChannel+0x7c4>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d12c      	bne.n	8001b4e <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001af4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001af8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d126      	bne.n	8001b4e <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a3c      	ldr	r2, [pc, #240]	; (8001bf8 <HAL_ADC_ConfigChannel+0x7c8>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d004      	beq.n	8001b14 <HAL_ADC_ConfigChannel+0x6e4>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a3b      	ldr	r2, [pc, #236]	; (8001bfc <HAL_ADC_ConfigChannel+0x7cc>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d15d      	bne.n	8001bd0 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b18:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4834      	ldr	r0, [pc, #208]	; (8001bf0 <HAL_ADC_ConfigChannel+0x7c0>)
 8001b20:	f7ff f8a7 	bl	8000c72 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b24:	4b36      	ldr	r3, [pc, #216]	; (8001c00 <HAL_ADC_ConfigChannel+0x7d0>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	099b      	lsrs	r3, r3, #6
 8001b2a:	4a36      	ldr	r2, [pc, #216]	; (8001c04 <HAL_ADC_ConfigChannel+0x7d4>)
 8001b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b30:	099b      	lsrs	r3, r3, #6
 8001b32:	1c5a      	adds	r2, r3, #1
 8001b34:	4613      	mov	r3, r2
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	4413      	add	r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001b3e:	e002      	b.n	8001b46 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	3b01      	subs	r3, #1
 8001b44:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1f9      	bne.n	8001b40 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b4c:	e040      	b.n	8001bd0 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a2d      	ldr	r2, [pc, #180]	; (8001c08 <HAL_ADC_ConfigChannel+0x7d8>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d118      	bne.n	8001b8a <HAL_ADC_ConfigChannel+0x75a>
 8001b58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d112      	bne.n	8001b8a <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a23      	ldr	r2, [pc, #140]	; (8001bf8 <HAL_ADC_ConfigChannel+0x7c8>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d004      	beq.n	8001b78 <HAL_ADC_ConfigChannel+0x748>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a22      	ldr	r2, [pc, #136]	; (8001bfc <HAL_ADC_ConfigChannel+0x7cc>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d12d      	bne.n	8001bd4 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b80:	4619      	mov	r1, r3
 8001b82:	481b      	ldr	r0, [pc, #108]	; (8001bf0 <HAL_ADC_ConfigChannel+0x7c0>)
 8001b84:	f7ff f875 	bl	8000c72 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001b88:	e024      	b.n	8001bd4 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a1f      	ldr	r2, [pc, #124]	; (8001c0c <HAL_ADC_ConfigChannel+0x7dc>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d120      	bne.n	8001bd6 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001b94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d11a      	bne.n	8001bd6 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a14      	ldr	r2, [pc, #80]	; (8001bf8 <HAL_ADC_ConfigChannel+0x7c8>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d115      	bne.n	8001bd6 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001baa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001bae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	480e      	ldr	r0, [pc, #56]	; (8001bf0 <HAL_ADC_ConfigChannel+0x7c0>)
 8001bb6:	f7ff f85c 	bl	8000c72 <LL_ADC_SetCommonPathInternalCh>
 8001bba:	e00c      	b.n	8001bd6 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc0:	f043 0220 	orr.w	r2, r3, #32
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001bce:	e002      	b.n	8001bd6 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001bd0:	bf00      	nop
 8001bd2:	e000      	b.n	8001bd6 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001bd4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001bde:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	37d8      	adds	r7, #216	; 0xd8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	80080000 	.word	0x80080000
 8001bf0:	50040300 	.word	0x50040300
 8001bf4:	c7520000 	.word	0xc7520000
 8001bf8:	50040000 	.word	0x50040000
 8001bfc:	50040200 	.word	0x50040200
 8001c00:	20000000 	.word	0x20000000
 8001c04:	053e2d63 	.word	0x053e2d63
 8001c08:	cb840000 	.word	0xcb840000
 8001c0c:	80000001 	.word	0x80000001

08001c10 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff f99b 	bl	8000f5c <LL_ADC_IsEnabled>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d169      	bne.n	8001d00 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	689a      	ldr	r2, [r3, #8]
 8001c32:	4b36      	ldr	r3, [pc, #216]	; (8001d0c <ADC_Enable+0xfc>)
 8001c34:	4013      	ands	r3, r2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d00d      	beq.n	8001c56 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c3e:	f043 0210 	orr.w	r2, r3, #16
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4a:	f043 0201 	orr.w	r2, r3, #1
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e055      	b.n	8001d02 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff f96a 	bl	8000f34 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001c60:	482b      	ldr	r0, [pc, #172]	; (8001d10 <ADC_Enable+0x100>)
 8001c62:	f7ff f819 	bl	8000c98 <LL_ADC_GetCommonPathInternalCh>
 8001c66:	4603      	mov	r3, r0
 8001c68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d013      	beq.n	8001c98 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c70:	4b28      	ldr	r3, [pc, #160]	; (8001d14 <ADC_Enable+0x104>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	099b      	lsrs	r3, r3, #6
 8001c76:	4a28      	ldr	r2, [pc, #160]	; (8001d18 <ADC_Enable+0x108>)
 8001c78:	fba2 2303 	umull	r2, r3, r2, r3
 8001c7c:	099b      	lsrs	r3, r3, #6
 8001c7e:	1c5a      	adds	r2, r3, #1
 8001c80:	4613      	mov	r3, r2
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	4413      	add	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001c8a:	e002      	b.n	8001c92 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1f9      	bne.n	8001c8c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001c98:	f7fe ffcc 	bl	8000c34 <HAL_GetTick>
 8001c9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c9e:	e028      	b.n	8001cf2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff f959 	bl	8000f5c <LL_ADC_IsEnabled>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d104      	bne.n	8001cba <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff f93d 	bl	8000f34 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001cba:	f7fe ffbb 	bl	8000c34 <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d914      	bls.n	8001cf2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d00d      	beq.n	8001cf2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cda:	f043 0210 	orr.w	r2, r3, #16
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce6:	f043 0201 	orr.w	r2, r3, #1
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e007      	b.n	8001d02 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0301 	and.w	r3, r3, #1
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d1cf      	bne.n	8001ca0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	8000003f 	.word	0x8000003f
 8001d10:	50040300 	.word	0x50040300
 8001d14:	20000000 	.word	0x20000000
 8001d18:	053e2d63 	.word	0x053e2d63

08001d1c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d28:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d2e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d14b      	bne.n	8001dce <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d3a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0308 	and.w	r3, r3, #8
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d021      	beq.n	8001d94 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff f802 	bl	8000d5e <LL_ADC_REG_IsTriggerSourceSWStart>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d032      	beq.n	8001dc6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d12b      	bne.n	8001dc6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d11f      	bne.n	8001dc6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d8a:	f043 0201 	orr.w	r2, r3, #1
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	655a      	str	r2, [r3, #84]	; 0x54
 8001d92:	e018      	b.n	8001dc6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d111      	bne.n	8001dc6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d105      	bne.n	8001dc6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dbe:	f043 0201 	orr.w	r2, r3, #1
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f7fe fd28 	bl	800081c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001dcc:	e00e      	b.n	8001dec <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd2:	f003 0310 	and.w	r3, r3, #16
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8001dda:	68f8      	ldr	r0, [r7, #12]
 8001ddc:	f7ff fb1e 	bl	800141c <HAL_ADC_ErrorCallback>
}
 8001de0:	e004      	b.n	8001dec <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	4798      	blx	r3
}
 8001dec:	bf00      	nop
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e00:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001e02:	68f8      	ldr	r0, [r7, #12]
 8001e04:	f7fe fcfc 	bl	8000800 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e08:	bf00      	nop
 8001e0a:	3710      	adds	r7, #16
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2e:	f043 0204 	orr.w	r2, r3, #4
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f7ff faf0 	bl	800141c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e3c:	bf00      	nop
 8001e3e:	3710      	adds	r7, #16
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <LL_ADC_IsEnabled>:
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d101      	bne.n	8001e5c <LL_ADC_IsEnabled+0x18>
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e000      	b.n	8001e5e <LL_ADC_IsEnabled+0x1a>
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <LL_ADC_REG_IsConversionOngoing>:
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f003 0304 	and.w	r3, r3, #4
 8001e7a:	2b04      	cmp	r3, #4
 8001e7c:	d101      	bne.n	8001e82 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e000      	b.n	8001e84 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001e90:	b590      	push	{r4, r7, lr}
 8001e92:	b09f      	sub	sp, #124	; 0x7c
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d101      	bne.n	8001eae <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001eaa:	2302      	movs	r3, #2
 8001eac:	e093      	b.n	8001fd6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001eba:	2300      	movs	r3, #0
 8001ebc:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a47      	ldr	r2, [pc, #284]	; (8001fe0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d102      	bne.n	8001ece <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001ec8:	4b46      	ldr	r3, [pc, #280]	; (8001fe4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001eca:	60bb      	str	r3, [r7, #8]
 8001ecc:	e001      	b.n	8001ed2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d10b      	bne.n	8001ef0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001edc:	f043 0220 	orr.w	r2, r3, #32
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e072      	b.n	8001fd6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff ffb9 	bl	8001e6a <LL_ADC_REG_IsConversionOngoing>
 8001ef8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff ffb3 	bl	8001e6a <LL_ADC_REG_IsConversionOngoing>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d154      	bne.n	8001fb4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001f0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d151      	bne.n	8001fb4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001f10:	4b35      	ldr	r3, [pc, #212]	; (8001fe8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001f12:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d02c      	beq.n	8001f76 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	6859      	ldr	r1, [r3, #4]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f2e:	035b      	lsls	r3, r3, #13
 8001f30:	430b      	orrs	r3, r1
 8001f32:	431a      	orrs	r2, r3
 8001f34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f36:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f38:	4829      	ldr	r0, [pc, #164]	; (8001fe0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001f3a:	f7ff ff83 	bl	8001e44 <LL_ADC_IsEnabled>
 8001f3e:	4604      	mov	r4, r0
 8001f40:	4828      	ldr	r0, [pc, #160]	; (8001fe4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001f42:	f7ff ff7f 	bl	8001e44 <LL_ADC_IsEnabled>
 8001f46:	4603      	mov	r3, r0
 8001f48:	431c      	orrs	r4, r3
 8001f4a:	4828      	ldr	r0, [pc, #160]	; (8001fec <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001f4c:	f7ff ff7a 	bl	8001e44 <LL_ADC_IsEnabled>
 8001f50:	4603      	mov	r3, r0
 8001f52:	4323      	orrs	r3, r4
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d137      	bne.n	8001fc8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001f58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001f60:	f023 030f 	bic.w	r3, r3, #15
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	6811      	ldr	r1, [r2, #0]
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	6892      	ldr	r2, [r2, #8]
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f72:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f74:	e028      	b.n	8001fc8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001f76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f80:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f82:	4817      	ldr	r0, [pc, #92]	; (8001fe0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001f84:	f7ff ff5e 	bl	8001e44 <LL_ADC_IsEnabled>
 8001f88:	4604      	mov	r4, r0
 8001f8a:	4816      	ldr	r0, [pc, #88]	; (8001fe4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001f8c:	f7ff ff5a 	bl	8001e44 <LL_ADC_IsEnabled>
 8001f90:	4603      	mov	r3, r0
 8001f92:	431c      	orrs	r4, r3
 8001f94:	4815      	ldr	r0, [pc, #84]	; (8001fec <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001f96:	f7ff ff55 	bl	8001e44 <LL_ADC_IsEnabled>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	4323      	orrs	r3, r4
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d112      	bne.n	8001fc8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001fa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001faa:	f023 030f 	bic.w	r3, r3, #15
 8001fae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001fb0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001fb2:	e009      	b.n	8001fc8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb8:	f043 0220 	orr.w	r2, r3, #32
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001fc6:	e000      	b.n	8001fca <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001fc8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001fd2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	377c      	adds	r7, #124	; 0x7c
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd90      	pop	{r4, r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	50040000 	.word	0x50040000
 8001fe4:	50040100 	.word	0x50040100
 8001fe8:	50040300 	.word	0x50040300
 8001fec:	50040200 	.word	0x50040200

08001ff0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002000:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <__NVIC_SetPriorityGrouping+0x44>)
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002006:	68ba      	ldr	r2, [r7, #8]
 8002008:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800200c:	4013      	ands	r3, r2
 800200e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002018:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800201c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002022:	4a04      	ldr	r2, [pc, #16]	; (8002034 <__NVIC_SetPriorityGrouping+0x44>)
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	60d3      	str	r3, [r2, #12]
}
 8002028:	bf00      	nop
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800203c:	4b04      	ldr	r3, [pc, #16]	; (8002050 <__NVIC_GetPriorityGrouping+0x18>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	0a1b      	lsrs	r3, r3, #8
 8002042:	f003 0307 	and.w	r3, r3, #7
}
 8002046:	4618      	mov	r0, r3
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	e000ed00 	.word	0xe000ed00

08002054 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800205e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002062:	2b00      	cmp	r3, #0
 8002064:	db0b      	blt.n	800207e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	f003 021f 	and.w	r2, r3, #31
 800206c:	4907      	ldr	r1, [pc, #28]	; (800208c <__NVIC_EnableIRQ+0x38>)
 800206e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002072:	095b      	lsrs	r3, r3, #5
 8002074:	2001      	movs	r0, #1
 8002076:	fa00 f202 	lsl.w	r2, r0, r2
 800207a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	e000e100 	.word	0xe000e100

08002090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	6039      	str	r1, [r7, #0]
 800209a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800209c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	db0a      	blt.n	80020ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	490c      	ldr	r1, [pc, #48]	; (80020dc <__NVIC_SetPriority+0x4c>)
 80020aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ae:	0112      	lsls	r2, r2, #4
 80020b0:	b2d2      	uxtb	r2, r2
 80020b2:	440b      	add	r3, r1
 80020b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020b8:	e00a      	b.n	80020d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	4908      	ldr	r1, [pc, #32]	; (80020e0 <__NVIC_SetPriority+0x50>)
 80020c0:	79fb      	ldrb	r3, [r7, #7]
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	3b04      	subs	r3, #4
 80020c8:	0112      	lsls	r2, r2, #4
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	440b      	add	r3, r1
 80020ce:	761a      	strb	r2, [r3, #24]
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	e000e100 	.word	0xe000e100
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b089      	sub	sp, #36	; 0x24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	f1c3 0307 	rsb	r3, r3, #7
 80020fe:	2b04      	cmp	r3, #4
 8002100:	bf28      	it	cs
 8002102:	2304      	movcs	r3, #4
 8002104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	3304      	adds	r3, #4
 800210a:	2b06      	cmp	r3, #6
 800210c:	d902      	bls.n	8002114 <NVIC_EncodePriority+0x30>
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	3b03      	subs	r3, #3
 8002112:	e000      	b.n	8002116 <NVIC_EncodePriority+0x32>
 8002114:	2300      	movs	r3, #0
 8002116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002118:	f04f 32ff 	mov.w	r2, #4294967295
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	43da      	mvns	r2, r3
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	401a      	ands	r2, r3
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800212c:	f04f 31ff 	mov.w	r1, #4294967295
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	fa01 f303 	lsl.w	r3, r1, r3
 8002136:	43d9      	mvns	r1, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800213c:	4313      	orrs	r3, r2
         );
}
 800213e:	4618      	mov	r0, r3
 8002140:	3724      	adds	r7, #36	; 0x24
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
	...

0800214c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3b01      	subs	r3, #1
 8002158:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800215c:	d301      	bcc.n	8002162 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800215e:	2301      	movs	r3, #1
 8002160:	e00f      	b.n	8002182 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002162:	4a0a      	ldr	r2, [pc, #40]	; (800218c <SysTick_Config+0x40>)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3b01      	subs	r3, #1
 8002168:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800216a:	210f      	movs	r1, #15
 800216c:	f04f 30ff 	mov.w	r0, #4294967295
 8002170:	f7ff ff8e 	bl	8002090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002174:	4b05      	ldr	r3, [pc, #20]	; (800218c <SysTick_Config+0x40>)
 8002176:	2200      	movs	r2, #0
 8002178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800217a:	4b04      	ldr	r3, [pc, #16]	; (800218c <SysTick_Config+0x40>)
 800217c:	2207      	movs	r2, #7
 800217e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	e000e010 	.word	0xe000e010

08002190 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f7ff ff29 	bl	8001ff0 <__NVIC_SetPriorityGrouping>
}
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b086      	sub	sp, #24
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	4603      	mov	r3, r0
 80021ae:	60b9      	str	r1, [r7, #8]
 80021b0:	607a      	str	r2, [r7, #4]
 80021b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021b8:	f7ff ff3e 	bl	8002038 <__NVIC_GetPriorityGrouping>
 80021bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	68b9      	ldr	r1, [r7, #8]
 80021c2:	6978      	ldr	r0, [r7, #20]
 80021c4:	f7ff ff8e 	bl	80020e4 <NVIC_EncodePriority>
 80021c8:	4602      	mov	r2, r0
 80021ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ce:	4611      	mov	r1, r2
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ff5d 	bl	8002090 <__NVIC_SetPriority>
}
 80021d6:	bf00      	nop
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	4603      	mov	r3, r0
 80021e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff ff31 	bl	8002054 <__NVIC_EnableIRQ>
}
 80021f2:	bf00      	nop
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b082      	sub	sp, #8
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7ff ffa2 	bl	800214c <SysTick_Config>
 8002208:	4603      	mov	r3, r0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
	...

08002214 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e098      	b.n	8002358 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	461a      	mov	r2, r3
 800222c:	4b4d      	ldr	r3, [pc, #308]	; (8002364 <HAL_DMA_Init+0x150>)
 800222e:	429a      	cmp	r2, r3
 8002230:	d80f      	bhi.n	8002252 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	461a      	mov	r2, r3
 8002238:	4b4b      	ldr	r3, [pc, #300]	; (8002368 <HAL_DMA_Init+0x154>)
 800223a:	4413      	add	r3, r2
 800223c:	4a4b      	ldr	r2, [pc, #300]	; (800236c <HAL_DMA_Init+0x158>)
 800223e:	fba2 2303 	umull	r2, r3, r2, r3
 8002242:	091b      	lsrs	r3, r3, #4
 8002244:	009a      	lsls	r2, r3, #2
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a48      	ldr	r2, [pc, #288]	; (8002370 <HAL_DMA_Init+0x15c>)
 800224e:	641a      	str	r2, [r3, #64]	; 0x40
 8002250:	e00e      	b.n	8002270 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	461a      	mov	r2, r3
 8002258:	4b46      	ldr	r3, [pc, #280]	; (8002374 <HAL_DMA_Init+0x160>)
 800225a:	4413      	add	r3, r2
 800225c:	4a43      	ldr	r2, [pc, #268]	; (800236c <HAL_DMA_Init+0x158>)
 800225e:	fba2 2303 	umull	r2, r3, r2, r3
 8002262:	091b      	lsrs	r3, r3, #4
 8002264:	009a      	lsls	r2, r3, #2
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a42      	ldr	r2, [pc, #264]	; (8002378 <HAL_DMA_Init+0x164>)
 800226e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2202      	movs	r2, #2
 8002274:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800228a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002294:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a1b      	ldr	r3, [r3, #32]
 80022b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022ca:	d039      	beq.n	8002340 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d0:	4a27      	ldr	r2, [pc, #156]	; (8002370 <HAL_DMA_Init+0x15c>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d11a      	bne.n	800230c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80022d6:	4b29      	ldr	r3, [pc, #164]	; (800237c <HAL_DMA_Init+0x168>)
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022de:	f003 031c 	and.w	r3, r3, #28
 80022e2:	210f      	movs	r1, #15
 80022e4:	fa01 f303 	lsl.w	r3, r1, r3
 80022e8:	43db      	mvns	r3, r3
 80022ea:	4924      	ldr	r1, [pc, #144]	; (800237c <HAL_DMA_Init+0x168>)
 80022ec:	4013      	ands	r3, r2
 80022ee:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80022f0:	4b22      	ldr	r3, [pc, #136]	; (800237c <HAL_DMA_Init+0x168>)
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6859      	ldr	r1, [r3, #4]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fc:	f003 031c 	and.w	r3, r3, #28
 8002300:	fa01 f303 	lsl.w	r3, r1, r3
 8002304:	491d      	ldr	r1, [pc, #116]	; (800237c <HAL_DMA_Init+0x168>)
 8002306:	4313      	orrs	r3, r2
 8002308:	600b      	str	r3, [r1, #0]
 800230a:	e019      	b.n	8002340 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800230c:	4b1c      	ldr	r3, [pc, #112]	; (8002380 <HAL_DMA_Init+0x16c>)
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002314:	f003 031c 	and.w	r3, r3, #28
 8002318:	210f      	movs	r1, #15
 800231a:	fa01 f303 	lsl.w	r3, r1, r3
 800231e:	43db      	mvns	r3, r3
 8002320:	4917      	ldr	r1, [pc, #92]	; (8002380 <HAL_DMA_Init+0x16c>)
 8002322:	4013      	ands	r3, r2
 8002324:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002326:	4b16      	ldr	r3, [pc, #88]	; (8002380 <HAL_DMA_Init+0x16c>)
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6859      	ldr	r1, [r3, #4]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002332:	f003 031c 	and.w	r3, r3, #28
 8002336:	fa01 f303 	lsl.w	r3, r1, r3
 800233a:	4911      	ldr	r1, [pc, #68]	; (8002380 <HAL_DMA_Init+0x16c>)
 800233c:	4313      	orrs	r3, r2
 800233e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	40020407 	.word	0x40020407
 8002368:	bffdfff8 	.word	0xbffdfff8
 800236c:	cccccccd 	.word	0xcccccccd
 8002370:	40020000 	.word	0x40020000
 8002374:	bffdfbf8 	.word	0xbffdfbf8
 8002378:	40020400 	.word	0x40020400
 800237c:	400200a8 	.word	0x400200a8
 8002380:	400204a8 	.word	0x400204a8

08002384 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
 8002390:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002392:	2300      	movs	r3, #0
 8002394:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800239c:	2b01      	cmp	r3, #1
 800239e:	d101      	bne.n	80023a4 <HAL_DMA_Start_IT+0x20>
 80023a0:	2302      	movs	r3, #2
 80023a2:	e04b      	b.n	800243c <HAL_DMA_Start_IT+0xb8>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d13a      	bne.n	800242e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2202      	movs	r2, #2
 80023bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 0201 	bic.w	r2, r2, #1
 80023d4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	68b9      	ldr	r1, [r7, #8]
 80023dc:	68f8      	ldr	r0, [r7, #12]
 80023de:	f000 f8e0 	bl	80025a2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d008      	beq.n	80023fc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f042 020e 	orr.w	r2, r2, #14
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	e00f      	b.n	800241c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 0204 	bic.w	r2, r2, #4
 800240a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 020a 	orr.w	r2, r2, #10
 800241a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f042 0201 	orr.w	r2, r2, #1
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	e005      	b.n	800243a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002436:	2302      	movs	r3, #2
 8002438:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800243a:	7dfb      	ldrb	r3, [r7, #23]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3718      	adds	r7, #24
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002460:	f003 031c 	and.w	r3, r3, #28
 8002464:	2204      	movs	r2, #4
 8002466:	409a      	lsls	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	4013      	ands	r3, r2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d026      	beq.n	80024be <HAL_DMA_IRQHandler+0x7a>
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	f003 0304 	and.w	r3, r3, #4
 8002476:	2b00      	cmp	r3, #0
 8002478:	d021      	beq.n	80024be <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0320 	and.w	r3, r3, #32
 8002484:	2b00      	cmp	r3, #0
 8002486:	d107      	bne.n	8002498 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f022 0204 	bic.w	r2, r2, #4
 8002496:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249c:	f003 021c 	and.w	r2, r3, #28
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a4:	2104      	movs	r1, #4
 80024a6:	fa01 f202 	lsl.w	r2, r1, r2
 80024aa:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d071      	beq.n	8002598 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80024bc:	e06c      	b.n	8002598 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c2:	f003 031c 	and.w	r3, r3, #28
 80024c6:	2202      	movs	r2, #2
 80024c8:	409a      	lsls	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	4013      	ands	r3, r2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d02e      	beq.n	8002530 <HAL_DMA_IRQHandler+0xec>
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d029      	beq.n	8002530 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0320 	and.w	r3, r3, #32
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10b      	bne.n	8002502 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 020a 	bic.w	r2, r2, #10
 80024f8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002506:	f003 021c 	and.w	r2, r3, #28
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	2102      	movs	r1, #2
 8002510:	fa01 f202 	lsl.w	r2, r1, r2
 8002514:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002522:	2b00      	cmp	r3, #0
 8002524:	d038      	beq.n	8002598 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800252e:	e033      	b.n	8002598 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002534:	f003 031c 	and.w	r3, r3, #28
 8002538:	2208      	movs	r2, #8
 800253a:	409a      	lsls	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	4013      	ands	r3, r2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d02a      	beq.n	800259a <HAL_DMA_IRQHandler+0x156>
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	f003 0308 	and.w	r3, r3, #8
 800254a:	2b00      	cmp	r3, #0
 800254c:	d025      	beq.n	800259a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 020e 	bic.w	r2, r2, #14
 800255c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002562:	f003 021c 	and.w	r2, r3, #28
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	2101      	movs	r1, #1
 800256c:	fa01 f202 	lsl.w	r2, r1, r2
 8002570:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800258c:	2b00      	cmp	r3, #0
 800258e:	d004      	beq.n	800259a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002598:	bf00      	nop
 800259a:	bf00      	nop
}
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025a2:	b480      	push	{r7}
 80025a4:	b085      	sub	sp, #20
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	60f8      	str	r0, [r7, #12]
 80025aa:	60b9      	str	r1, [r7, #8]
 80025ac:	607a      	str	r2, [r7, #4]
 80025ae:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b4:	f003 021c 	and.w	r2, r3, #28
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025bc:	2101      	movs	r1, #1
 80025be:	fa01 f202 	lsl.w	r2, r1, r2
 80025c2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	2b10      	cmp	r3, #16
 80025d2:	d108      	bne.n	80025e6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68ba      	ldr	r2, [r7, #8]
 80025e2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80025e4:	e007      	b.n	80025f6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68ba      	ldr	r2, [r7, #8]
 80025ec:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	60da      	str	r2, [r3, #12]
}
 80025f6:	bf00      	nop
 80025f8:	3714      	adds	r7, #20
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
	...

08002604 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002604:	b480      	push	{r7}
 8002606:	b087      	sub	sp, #28
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800260e:	2300      	movs	r3, #0
 8002610:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002612:	e17f      	b.n	8002914 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	2101      	movs	r1, #1
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	fa01 f303 	lsl.w	r3, r1, r3
 8002620:	4013      	ands	r3, r2
 8002622:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2b00      	cmp	r3, #0
 8002628:	f000 8171 	beq.w	800290e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f003 0303 	and.w	r3, r3, #3
 8002634:	2b01      	cmp	r3, #1
 8002636:	d005      	beq.n	8002644 <HAL_GPIO_Init+0x40>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f003 0303 	and.w	r3, r3, #3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d130      	bne.n	80026a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	2203      	movs	r2, #3
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	43db      	mvns	r3, r3
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	4013      	ands	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	68da      	ldr	r2, [r3, #12]
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	4313      	orrs	r3, r2
 800266c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800267a:	2201      	movs	r2, #1
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43db      	mvns	r3, r3
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	4013      	ands	r3, r2
 8002688:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	091b      	lsrs	r3, r3, #4
 8002690:	f003 0201 	and.w	r2, r3, #1
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	4313      	orrs	r3, r2
 800269e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	2b03      	cmp	r3, #3
 80026b0:	d118      	bne.n	80026e4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80026b8:	2201      	movs	r2, #1
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	43db      	mvns	r3, r3
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	4013      	ands	r3, r2
 80026c6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	08db      	lsrs	r3, r3, #3
 80026ce:	f003 0201 	and.w	r2, r3, #1
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	4313      	orrs	r3, r2
 80026dc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f003 0303 	and.w	r3, r3, #3
 80026ec:	2b03      	cmp	r3, #3
 80026ee:	d017      	beq.n	8002720 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	2203      	movs	r2, #3
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	43db      	mvns	r3, r3
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	4013      	ands	r3, r2
 8002706:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	4313      	orrs	r3, r2
 8002718:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f003 0303 	and.w	r3, r3, #3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d123      	bne.n	8002774 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	08da      	lsrs	r2, r3, #3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3208      	adds	r2, #8
 8002734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002738:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f003 0307 	and.w	r3, r3, #7
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	220f      	movs	r2, #15
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	43db      	mvns	r3, r3
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	4013      	ands	r3, r2
 800274e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	691a      	ldr	r2, [r3, #16]
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	4313      	orrs	r3, r2
 8002764:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	08da      	lsrs	r2, r3, #3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	3208      	adds	r2, #8
 800276e:	6939      	ldr	r1, [r7, #16]
 8002770:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	2203      	movs	r2, #3
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	43db      	mvns	r3, r3
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	4013      	ands	r3, r2
 800278a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f003 0203 	and.w	r2, r3, #3
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	4313      	orrs	r3, r2
 80027a0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f000 80ac 	beq.w	800290e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027b6:	4b5f      	ldr	r3, [pc, #380]	; (8002934 <HAL_GPIO_Init+0x330>)
 80027b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ba:	4a5e      	ldr	r2, [pc, #376]	; (8002934 <HAL_GPIO_Init+0x330>)
 80027bc:	f043 0301 	orr.w	r3, r3, #1
 80027c0:	6613      	str	r3, [r2, #96]	; 0x60
 80027c2:	4b5c      	ldr	r3, [pc, #368]	; (8002934 <HAL_GPIO_Init+0x330>)
 80027c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	60bb      	str	r3, [r7, #8]
 80027cc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80027ce:	4a5a      	ldr	r2, [pc, #360]	; (8002938 <HAL_GPIO_Init+0x334>)
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	089b      	lsrs	r3, r3, #2
 80027d4:	3302      	adds	r3, #2
 80027d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027da:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	f003 0303 	and.w	r3, r3, #3
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	220f      	movs	r2, #15
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	43db      	mvns	r3, r3
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	4013      	ands	r3, r2
 80027f0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80027f8:	d025      	beq.n	8002846 <HAL_GPIO_Init+0x242>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a4f      	ldr	r2, [pc, #316]	; (800293c <HAL_GPIO_Init+0x338>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d01f      	beq.n	8002842 <HAL_GPIO_Init+0x23e>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a4e      	ldr	r2, [pc, #312]	; (8002940 <HAL_GPIO_Init+0x33c>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d019      	beq.n	800283e <HAL_GPIO_Init+0x23a>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a4d      	ldr	r2, [pc, #308]	; (8002944 <HAL_GPIO_Init+0x340>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d013      	beq.n	800283a <HAL_GPIO_Init+0x236>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a4c      	ldr	r2, [pc, #304]	; (8002948 <HAL_GPIO_Init+0x344>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d00d      	beq.n	8002836 <HAL_GPIO_Init+0x232>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a4b      	ldr	r2, [pc, #300]	; (800294c <HAL_GPIO_Init+0x348>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d007      	beq.n	8002832 <HAL_GPIO_Init+0x22e>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a4a      	ldr	r2, [pc, #296]	; (8002950 <HAL_GPIO_Init+0x34c>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d101      	bne.n	800282e <HAL_GPIO_Init+0x22a>
 800282a:	2306      	movs	r3, #6
 800282c:	e00c      	b.n	8002848 <HAL_GPIO_Init+0x244>
 800282e:	2307      	movs	r3, #7
 8002830:	e00a      	b.n	8002848 <HAL_GPIO_Init+0x244>
 8002832:	2305      	movs	r3, #5
 8002834:	e008      	b.n	8002848 <HAL_GPIO_Init+0x244>
 8002836:	2304      	movs	r3, #4
 8002838:	e006      	b.n	8002848 <HAL_GPIO_Init+0x244>
 800283a:	2303      	movs	r3, #3
 800283c:	e004      	b.n	8002848 <HAL_GPIO_Init+0x244>
 800283e:	2302      	movs	r3, #2
 8002840:	e002      	b.n	8002848 <HAL_GPIO_Init+0x244>
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <HAL_GPIO_Init+0x244>
 8002846:	2300      	movs	r3, #0
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	f002 0203 	and.w	r2, r2, #3
 800284e:	0092      	lsls	r2, r2, #2
 8002850:	4093      	lsls	r3, r2
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	4313      	orrs	r3, r2
 8002856:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002858:	4937      	ldr	r1, [pc, #220]	; (8002938 <HAL_GPIO_Init+0x334>)
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	089b      	lsrs	r3, r3, #2
 800285e:	3302      	adds	r3, #2
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002866:	4b3b      	ldr	r3, [pc, #236]	; (8002954 <HAL_GPIO_Init+0x350>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	43db      	mvns	r3, r3
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	4013      	ands	r3, r2
 8002874:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	4313      	orrs	r3, r2
 8002888:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800288a:	4a32      	ldr	r2, [pc, #200]	; (8002954 <HAL_GPIO_Init+0x350>)
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002890:	4b30      	ldr	r3, [pc, #192]	; (8002954 <HAL_GPIO_Init+0x350>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	43db      	mvns	r3, r3
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	4013      	ands	r3, r2
 800289e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d003      	beq.n	80028b4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80028b4:	4a27      	ldr	r2, [pc, #156]	; (8002954 <HAL_GPIO_Init+0x350>)
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80028ba:	4b26      	ldr	r3, [pc, #152]	; (8002954 <HAL_GPIO_Init+0x350>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	43db      	mvns	r3, r3
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	4013      	ands	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4313      	orrs	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80028de:	4a1d      	ldr	r2, [pc, #116]	; (8002954 <HAL_GPIO_Init+0x350>)
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80028e4:	4b1b      	ldr	r3, [pc, #108]	; (8002954 <HAL_GPIO_Init+0x350>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	43db      	mvns	r3, r3
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	4013      	ands	r3, r2
 80028f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d003      	beq.n	8002908 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	4313      	orrs	r3, r2
 8002906:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002908:	4a12      	ldr	r2, [pc, #72]	; (8002954 <HAL_GPIO_Init+0x350>)
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	3301      	adds	r3, #1
 8002912:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	fa22 f303 	lsr.w	r3, r2, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	f47f ae78 	bne.w	8002614 <HAL_GPIO_Init+0x10>
  }
}
 8002924:	bf00      	nop
 8002926:	bf00      	nop
 8002928:	371c      	adds	r7, #28
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	40021000 	.word	0x40021000
 8002938:	40010000 	.word	0x40010000
 800293c:	48000400 	.word	0x48000400
 8002940:	48000800 	.word	0x48000800
 8002944:	48000c00 	.word	0x48000c00
 8002948:	48001000 	.word	0x48001000
 800294c:	48001400 	.word	0x48001400
 8002950:	48001800 	.word	0x48001800
 8002954:	40010400 	.word	0x40010400

08002958 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	460b      	mov	r3, r1
 8002962:	807b      	strh	r3, [r7, #2]
 8002964:	4613      	mov	r3, r2
 8002966:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002968:	787b      	ldrb	r3, [r7, #1]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d003      	beq.n	8002976 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800296e:	887a      	ldrh	r2, [r7, #2]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002974:	e002      	b.n	800297c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002976:	887a      	ldrh	r2, [r7, #2]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800298c:	4b04      	ldr	r3, [pc, #16]	; (80029a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002994:	4618      	mov	r0, r3
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	40007000 	.word	0x40007000

080029a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029b2:	d130      	bne.n	8002a16 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80029b4:	4b23      	ldr	r3, [pc, #140]	; (8002a44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029c0:	d038      	beq.n	8002a34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80029c2:	4b20      	ldr	r3, [pc, #128]	; (8002a44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029ca:	4a1e      	ldr	r2, [pc, #120]	; (8002a44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80029d2:	4b1d      	ldr	r3, [pc, #116]	; (8002a48 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2232      	movs	r2, #50	; 0x32
 80029d8:	fb02 f303 	mul.w	r3, r2, r3
 80029dc:	4a1b      	ldr	r2, [pc, #108]	; (8002a4c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80029de:	fba2 2303 	umull	r2, r3, r2, r3
 80029e2:	0c9b      	lsrs	r3, r3, #18
 80029e4:	3301      	adds	r3, #1
 80029e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029e8:	e002      	b.n	80029f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	3b01      	subs	r3, #1
 80029ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029f0:	4b14      	ldr	r3, [pc, #80]	; (8002a44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029f2:	695b      	ldr	r3, [r3, #20]
 80029f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029fc:	d102      	bne.n	8002a04 <HAL_PWREx_ControlVoltageScaling+0x60>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1f2      	bne.n	80029ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a04:	4b0f      	ldr	r3, [pc, #60]	; (8002a44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a10:	d110      	bne.n	8002a34 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e00f      	b.n	8002a36 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a16:	4b0b      	ldr	r3, [pc, #44]	; (8002a44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a22:	d007      	beq.n	8002a34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a24:	4b07      	ldr	r3, [pc, #28]	; (8002a44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a2c:	4a05      	ldr	r2, [pc, #20]	; (8002a44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a32:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	40007000 	.word	0x40007000
 8002a48:	20000000 	.word	0x20000000
 8002a4c:	431bde83 	.word	0x431bde83

08002a50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b088      	sub	sp, #32
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e3ca      	b.n	80031f8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a62:	4b97      	ldr	r3, [pc, #604]	; (8002cc0 <HAL_RCC_OscConfig+0x270>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 030c 	and.w	r3, r3, #12
 8002a6a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a6c:	4b94      	ldr	r3, [pc, #592]	; (8002cc0 <HAL_RCC_OscConfig+0x270>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	f003 0303 	and.w	r3, r3, #3
 8002a74:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0310 	and.w	r3, r3, #16
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f000 80e4 	beq.w	8002c4c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d007      	beq.n	8002a9a <HAL_RCC_OscConfig+0x4a>
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	2b0c      	cmp	r3, #12
 8002a8e:	f040 808b 	bne.w	8002ba8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	f040 8087 	bne.w	8002ba8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a9a:	4b89      	ldr	r3, [pc, #548]	; (8002cc0 <HAL_RCC_OscConfig+0x270>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d005      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x62>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e3a2      	b.n	80031f8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a1a      	ldr	r2, [r3, #32]
 8002ab6:	4b82      	ldr	r3, [pc, #520]	; (8002cc0 <HAL_RCC_OscConfig+0x270>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0308 	and.w	r3, r3, #8
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d004      	beq.n	8002acc <HAL_RCC_OscConfig+0x7c>
 8002ac2:	4b7f      	ldr	r3, [pc, #508]	; (8002cc0 <HAL_RCC_OscConfig+0x270>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002aca:	e005      	b.n	8002ad8 <HAL_RCC_OscConfig+0x88>
 8002acc:	4b7c      	ldr	r3, [pc, #496]	; (8002cc0 <HAL_RCC_OscConfig+0x270>)
 8002ace:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ad2:	091b      	lsrs	r3, r3, #4
 8002ad4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d223      	bcs.n	8002b24 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f000 fd55 	bl	8003590 <RCC_SetFlashLatencyFromMSIRange>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e383      	b.n	80031f8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002af0:	4b73      	ldr	r3, [pc, #460]	; (8002cc0 <HAL_RCC_OscConfig+0x270>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a72      	ldr	r2, [pc, #456]	; (8002cc0 <HAL_RCC_OscConfig+0x270>)
 8002af6:	f043 0308 	orr.w	r3, r3, #8
 8002afa:	6013      	str	r3, [r2, #0]
 8002afc:	4b70      	ldr	r3, [pc, #448]	; (8002cc0 <HAL_RCC_OscConfig+0x270>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	496d      	ldr	r1, [pc, #436]	; (8002cc0 <HAL_RCC_OscConfig+0x270>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b0e:	4b6c      	ldr	r3, [pc, #432]	; (8002cc0 <HAL_RCC_OscConfig+0x270>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	021b      	lsls	r3, r3, #8
 8002b1c:	4968      	ldr	r1, [pc, #416]	; (8002cc0 <HAL_RCC_OscConfig+0x270>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	604b      	str	r3, [r1, #4]
 8002b22:	e025      	b.n	8002b70 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b24:	4b66      	ldr	r3, [pc, #408]	; (8002cc0 <HAL_RCC_OscConfig+0x270>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a65      	ldr	r2, [pc, #404]	; (8002cc0 <HAL_RCC_OscConfig+0x270>)
 8002b2a:	f043 0308 	orr.w	r3, r3, #8
 8002b2e:	6013      	str	r3, [r2, #0]
 8002b30:	4b63      	ldr	r3, [pc, #396]	; (8002cc0 <HAL_RCC_OscConfig+0x270>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	4960      	ldr	r1, [pc, #384]	; (8002cc0 <HAL_RCC_OscConfig+0x270>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b42:	4b5f      	ldr	r3, [pc, #380]	; (8002cc0 <HAL_RCC_OscConfig+0x270>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	021b      	lsls	r3, r3, #8
 8002b50:	495b      	ldr	r1, [pc, #364]	; (8002cc0 <HAL_RCC_OscConfig+0x270>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d109      	bne.n	8002b70 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f000 fd15 	bl	8003590 <RCC_SetFlashLatencyFromMSIRange>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e343      	b.n	80031f8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b70:	f000 fc4a 	bl	8003408 <HAL_RCC_GetSysClockFreq>
 8002b74:	4602      	mov	r2, r0
 8002b76:	4b52      	ldr	r3, [pc, #328]	; (8002cc0 <HAL_RCC_OscConfig+0x270>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	091b      	lsrs	r3, r3, #4
 8002b7c:	f003 030f 	and.w	r3, r3, #15
 8002b80:	4950      	ldr	r1, [pc, #320]	; (8002cc4 <HAL_RCC_OscConfig+0x274>)
 8002b82:	5ccb      	ldrb	r3, [r1, r3]
 8002b84:	f003 031f 	and.w	r3, r3, #31
 8002b88:	fa22 f303 	lsr.w	r3, r2, r3
 8002b8c:	4a4e      	ldr	r2, [pc, #312]	; (8002cc8 <HAL_RCC_OscConfig+0x278>)
 8002b8e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b90:	4b4e      	ldr	r3, [pc, #312]	; (8002ccc <HAL_RCC_OscConfig+0x27c>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7fd fffd 	bl	8000b94 <HAL_InitTick>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d052      	beq.n	8002c4a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002ba4:	7bfb      	ldrb	r3, [r7, #15]
 8002ba6:	e327      	b.n	80031f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d032      	beq.n	8002c16 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002bb0:	4b43      	ldr	r3, [pc, #268]	; (8002cc0 <HAL_RCC_OscConfig+0x270>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a42      	ldr	r2, [pc, #264]	; (8002cc0 <HAL_RCC_OscConfig+0x270>)
 8002bb6:	f043 0301 	orr.w	r3, r3, #1
 8002bba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bbc:	f7fe f83a 	bl	8000c34 <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bc4:	f7fe f836 	bl	8000c34 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e310      	b.n	80031f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bd6:	4b3a      	ldr	r3, [pc, #232]	; (8002cc0 <HAL_RCC_OscConfig+0x270>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d0f0      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002be2:	4b37      	ldr	r3, [pc, #220]	; (8002cc0 <HAL_RCC_OscConfig+0x270>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a36      	ldr	r2, [pc, #216]	; (8002cc0 <HAL_RCC_OscConfig+0x270>)
 8002be8:	f043 0308 	orr.w	r3, r3, #8
 8002bec:	6013      	str	r3, [r2, #0]
 8002bee:	4b34      	ldr	r3, [pc, #208]	; (8002cc0 <HAL_RCC_OscConfig+0x270>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	4931      	ldr	r1, [pc, #196]	; (8002cc0 <HAL_RCC_OscConfig+0x270>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c00:	4b2f      	ldr	r3, [pc, #188]	; (8002cc0 <HAL_RCC_OscConfig+0x270>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	69db      	ldr	r3, [r3, #28]
 8002c0c:	021b      	lsls	r3, r3, #8
 8002c0e:	492c      	ldr	r1, [pc, #176]	; (8002cc0 <HAL_RCC_OscConfig+0x270>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	604b      	str	r3, [r1, #4]
 8002c14:	e01a      	b.n	8002c4c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c16:	4b2a      	ldr	r3, [pc, #168]	; (8002cc0 <HAL_RCC_OscConfig+0x270>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a29      	ldr	r2, [pc, #164]	; (8002cc0 <HAL_RCC_OscConfig+0x270>)
 8002c1c:	f023 0301 	bic.w	r3, r3, #1
 8002c20:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c22:	f7fe f807 	bl	8000c34 <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c28:	e008      	b.n	8002c3c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c2a:	f7fe f803 	bl	8000c34 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e2dd      	b.n	80031f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c3c:	4b20      	ldr	r3, [pc, #128]	; (8002cc0 <HAL_RCC_OscConfig+0x270>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1f0      	bne.n	8002c2a <HAL_RCC_OscConfig+0x1da>
 8002c48:	e000      	b.n	8002c4c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c4a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0301 	and.w	r3, r3, #1
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d074      	beq.n	8002d42 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	2b08      	cmp	r3, #8
 8002c5c:	d005      	beq.n	8002c6a <HAL_RCC_OscConfig+0x21a>
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	2b0c      	cmp	r3, #12
 8002c62:	d10e      	bne.n	8002c82 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	2b03      	cmp	r3, #3
 8002c68:	d10b      	bne.n	8002c82 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c6a:	4b15      	ldr	r3, [pc, #84]	; (8002cc0 <HAL_RCC_OscConfig+0x270>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d064      	beq.n	8002d40 <HAL_RCC_OscConfig+0x2f0>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d160      	bne.n	8002d40 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e2ba      	b.n	80031f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c8a:	d106      	bne.n	8002c9a <HAL_RCC_OscConfig+0x24a>
 8002c8c:	4b0c      	ldr	r3, [pc, #48]	; (8002cc0 <HAL_RCC_OscConfig+0x270>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a0b      	ldr	r2, [pc, #44]	; (8002cc0 <HAL_RCC_OscConfig+0x270>)
 8002c92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c96:	6013      	str	r3, [r2, #0]
 8002c98:	e026      	b.n	8002ce8 <HAL_RCC_OscConfig+0x298>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ca2:	d115      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x280>
 8002ca4:	4b06      	ldr	r3, [pc, #24]	; (8002cc0 <HAL_RCC_OscConfig+0x270>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a05      	ldr	r2, [pc, #20]	; (8002cc0 <HAL_RCC_OscConfig+0x270>)
 8002caa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cae:	6013      	str	r3, [r2, #0]
 8002cb0:	4b03      	ldr	r3, [pc, #12]	; (8002cc0 <HAL_RCC_OscConfig+0x270>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a02      	ldr	r2, [pc, #8]	; (8002cc0 <HAL_RCC_OscConfig+0x270>)
 8002cb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cba:	6013      	str	r3, [r2, #0]
 8002cbc:	e014      	b.n	8002ce8 <HAL_RCC_OscConfig+0x298>
 8002cbe:	bf00      	nop
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	080049a4 	.word	0x080049a4
 8002cc8:	20000000 	.word	0x20000000
 8002ccc:	20000004 	.word	0x20000004
 8002cd0:	4ba0      	ldr	r3, [pc, #640]	; (8002f54 <HAL_RCC_OscConfig+0x504>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a9f      	ldr	r2, [pc, #636]	; (8002f54 <HAL_RCC_OscConfig+0x504>)
 8002cd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cda:	6013      	str	r3, [r2, #0]
 8002cdc:	4b9d      	ldr	r3, [pc, #628]	; (8002f54 <HAL_RCC_OscConfig+0x504>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a9c      	ldr	r2, [pc, #624]	; (8002f54 <HAL_RCC_OscConfig+0x504>)
 8002ce2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ce6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d013      	beq.n	8002d18 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf0:	f7fd ffa0 	bl	8000c34 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cf8:	f7fd ff9c 	bl	8000c34 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b64      	cmp	r3, #100	; 0x64
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e276      	b.n	80031f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d0a:	4b92      	ldr	r3, [pc, #584]	; (8002f54 <HAL_RCC_OscConfig+0x504>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d0f0      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x2a8>
 8002d16:	e014      	b.n	8002d42 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d18:	f7fd ff8c 	bl	8000c34 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d20:	f7fd ff88 	bl	8000c34 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b64      	cmp	r3, #100	; 0x64
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e262      	b.n	80031f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d32:	4b88      	ldr	r3, [pc, #544]	; (8002f54 <HAL_RCC_OscConfig+0x504>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1f0      	bne.n	8002d20 <HAL_RCC_OscConfig+0x2d0>
 8002d3e:	e000      	b.n	8002d42 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d060      	beq.n	8002e10 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	2b04      	cmp	r3, #4
 8002d52:	d005      	beq.n	8002d60 <HAL_RCC_OscConfig+0x310>
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	2b0c      	cmp	r3, #12
 8002d58:	d119      	bne.n	8002d8e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d116      	bne.n	8002d8e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d60:	4b7c      	ldr	r3, [pc, #496]	; (8002f54 <HAL_RCC_OscConfig+0x504>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d005      	beq.n	8002d78 <HAL_RCC_OscConfig+0x328>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d101      	bne.n	8002d78 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e23f      	b.n	80031f8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d78:	4b76      	ldr	r3, [pc, #472]	; (8002f54 <HAL_RCC_OscConfig+0x504>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	061b      	lsls	r3, r3, #24
 8002d86:	4973      	ldr	r1, [pc, #460]	; (8002f54 <HAL_RCC_OscConfig+0x504>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d8c:	e040      	b.n	8002e10 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d023      	beq.n	8002dde <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d96:	4b6f      	ldr	r3, [pc, #444]	; (8002f54 <HAL_RCC_OscConfig+0x504>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a6e      	ldr	r2, [pc, #440]	; (8002f54 <HAL_RCC_OscConfig+0x504>)
 8002d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002da0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da2:	f7fd ff47 	bl	8000c34 <HAL_GetTick>
 8002da6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002da8:	e008      	b.n	8002dbc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002daa:	f7fd ff43 	bl	8000c34 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d901      	bls.n	8002dbc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e21d      	b.n	80031f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dbc:	4b65      	ldr	r3, [pc, #404]	; (8002f54 <HAL_RCC_OscConfig+0x504>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d0f0      	beq.n	8002daa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc8:	4b62      	ldr	r3, [pc, #392]	; (8002f54 <HAL_RCC_OscConfig+0x504>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	061b      	lsls	r3, r3, #24
 8002dd6:	495f      	ldr	r1, [pc, #380]	; (8002f54 <HAL_RCC_OscConfig+0x504>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	604b      	str	r3, [r1, #4]
 8002ddc:	e018      	b.n	8002e10 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dde:	4b5d      	ldr	r3, [pc, #372]	; (8002f54 <HAL_RCC_OscConfig+0x504>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a5c      	ldr	r2, [pc, #368]	; (8002f54 <HAL_RCC_OscConfig+0x504>)
 8002de4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002de8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dea:	f7fd ff23 	bl	8000c34 <HAL_GetTick>
 8002dee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002df0:	e008      	b.n	8002e04 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002df2:	f7fd ff1f 	bl	8000c34 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e1f9      	b.n	80031f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e04:	4b53      	ldr	r3, [pc, #332]	; (8002f54 <HAL_RCC_OscConfig+0x504>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1f0      	bne.n	8002df2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0308 	and.w	r3, r3, #8
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d03c      	beq.n	8002e96 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	695b      	ldr	r3, [r3, #20]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d01c      	beq.n	8002e5e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e24:	4b4b      	ldr	r3, [pc, #300]	; (8002f54 <HAL_RCC_OscConfig+0x504>)
 8002e26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e2a:	4a4a      	ldr	r2, [pc, #296]	; (8002f54 <HAL_RCC_OscConfig+0x504>)
 8002e2c:	f043 0301 	orr.w	r3, r3, #1
 8002e30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e34:	f7fd fefe 	bl	8000c34 <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e3c:	f7fd fefa 	bl	8000c34 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e1d4      	b.n	80031f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e4e:	4b41      	ldr	r3, [pc, #260]	; (8002f54 <HAL_RCC_OscConfig+0x504>)
 8002e50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d0ef      	beq.n	8002e3c <HAL_RCC_OscConfig+0x3ec>
 8002e5c:	e01b      	b.n	8002e96 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e5e:	4b3d      	ldr	r3, [pc, #244]	; (8002f54 <HAL_RCC_OscConfig+0x504>)
 8002e60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e64:	4a3b      	ldr	r2, [pc, #236]	; (8002f54 <HAL_RCC_OscConfig+0x504>)
 8002e66:	f023 0301 	bic.w	r3, r3, #1
 8002e6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e6e:	f7fd fee1 	bl	8000c34 <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e74:	e008      	b.n	8002e88 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e76:	f7fd fedd 	bl	8000c34 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e1b7      	b.n	80031f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e88:	4b32      	ldr	r3, [pc, #200]	; (8002f54 <HAL_RCC_OscConfig+0x504>)
 8002e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1ef      	bne.n	8002e76 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0304 	and.w	r3, r3, #4
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f000 80a6 	beq.w	8002ff0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ea8:	4b2a      	ldr	r3, [pc, #168]	; (8002f54 <HAL_RCC_OscConfig+0x504>)
 8002eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d10d      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eb4:	4b27      	ldr	r3, [pc, #156]	; (8002f54 <HAL_RCC_OscConfig+0x504>)
 8002eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb8:	4a26      	ldr	r2, [pc, #152]	; (8002f54 <HAL_RCC_OscConfig+0x504>)
 8002eba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ebe:	6593      	str	r3, [r2, #88]	; 0x58
 8002ec0:	4b24      	ldr	r3, [pc, #144]	; (8002f54 <HAL_RCC_OscConfig+0x504>)
 8002ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec8:	60bb      	str	r3, [r7, #8]
 8002eca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ed0:	4b21      	ldr	r3, [pc, #132]	; (8002f58 <HAL_RCC_OscConfig+0x508>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d118      	bne.n	8002f0e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002edc:	4b1e      	ldr	r3, [pc, #120]	; (8002f58 <HAL_RCC_OscConfig+0x508>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a1d      	ldr	r2, [pc, #116]	; (8002f58 <HAL_RCC_OscConfig+0x508>)
 8002ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ee6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ee8:	f7fd fea4 	bl	8000c34 <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ef0:	f7fd fea0 	bl	8000c34 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e17a      	b.n	80031f8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f02:	4b15      	ldr	r3, [pc, #84]	; (8002f58 <HAL_RCC_OscConfig+0x508>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d0f0      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d108      	bne.n	8002f28 <HAL_RCC_OscConfig+0x4d8>
 8002f16:	4b0f      	ldr	r3, [pc, #60]	; (8002f54 <HAL_RCC_OscConfig+0x504>)
 8002f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f1c:	4a0d      	ldr	r2, [pc, #52]	; (8002f54 <HAL_RCC_OscConfig+0x504>)
 8002f1e:	f043 0301 	orr.w	r3, r3, #1
 8002f22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f26:	e029      	b.n	8002f7c <HAL_RCC_OscConfig+0x52c>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	2b05      	cmp	r3, #5
 8002f2e:	d115      	bne.n	8002f5c <HAL_RCC_OscConfig+0x50c>
 8002f30:	4b08      	ldr	r3, [pc, #32]	; (8002f54 <HAL_RCC_OscConfig+0x504>)
 8002f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f36:	4a07      	ldr	r2, [pc, #28]	; (8002f54 <HAL_RCC_OscConfig+0x504>)
 8002f38:	f043 0304 	orr.w	r3, r3, #4
 8002f3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f40:	4b04      	ldr	r3, [pc, #16]	; (8002f54 <HAL_RCC_OscConfig+0x504>)
 8002f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f46:	4a03      	ldr	r2, [pc, #12]	; (8002f54 <HAL_RCC_OscConfig+0x504>)
 8002f48:	f043 0301 	orr.w	r3, r3, #1
 8002f4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f50:	e014      	b.n	8002f7c <HAL_RCC_OscConfig+0x52c>
 8002f52:	bf00      	nop
 8002f54:	40021000 	.word	0x40021000
 8002f58:	40007000 	.word	0x40007000
 8002f5c:	4b9c      	ldr	r3, [pc, #624]	; (80031d0 <HAL_RCC_OscConfig+0x780>)
 8002f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f62:	4a9b      	ldr	r2, [pc, #620]	; (80031d0 <HAL_RCC_OscConfig+0x780>)
 8002f64:	f023 0301 	bic.w	r3, r3, #1
 8002f68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f6c:	4b98      	ldr	r3, [pc, #608]	; (80031d0 <HAL_RCC_OscConfig+0x780>)
 8002f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f72:	4a97      	ldr	r2, [pc, #604]	; (80031d0 <HAL_RCC_OscConfig+0x780>)
 8002f74:	f023 0304 	bic.w	r3, r3, #4
 8002f78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d016      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f84:	f7fd fe56 	bl	8000c34 <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f8a:	e00a      	b.n	8002fa2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f8c:	f7fd fe52 	bl	8000c34 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e12a      	b.n	80031f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fa2:	4b8b      	ldr	r3, [pc, #556]	; (80031d0 <HAL_RCC_OscConfig+0x780>)
 8002fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d0ed      	beq.n	8002f8c <HAL_RCC_OscConfig+0x53c>
 8002fb0:	e015      	b.n	8002fde <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb2:	f7fd fe3f 	bl	8000c34 <HAL_GetTick>
 8002fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fb8:	e00a      	b.n	8002fd0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fba:	f7fd fe3b 	bl	8000c34 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e113      	b.n	80031f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fd0:	4b7f      	ldr	r3, [pc, #508]	; (80031d0 <HAL_RCC_OscConfig+0x780>)
 8002fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1ed      	bne.n	8002fba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fde:	7ffb      	ldrb	r3, [r7, #31]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d105      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fe4:	4b7a      	ldr	r3, [pc, #488]	; (80031d0 <HAL_RCC_OscConfig+0x780>)
 8002fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe8:	4a79      	ldr	r2, [pc, #484]	; (80031d0 <HAL_RCC_OscConfig+0x780>)
 8002fea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fee:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 80fe 	beq.w	80031f6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	f040 80d0 	bne.w	80031a4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003004:	4b72      	ldr	r3, [pc, #456]	; (80031d0 <HAL_RCC_OscConfig+0x780>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	f003 0203 	and.w	r2, r3, #3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003014:	429a      	cmp	r2, r3
 8003016:	d130      	bne.n	800307a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003022:	3b01      	subs	r3, #1
 8003024:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003026:	429a      	cmp	r2, r3
 8003028:	d127      	bne.n	800307a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003034:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003036:	429a      	cmp	r2, r3
 8003038:	d11f      	bne.n	800307a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003044:	2a07      	cmp	r2, #7
 8003046:	bf14      	ite	ne
 8003048:	2201      	movne	r2, #1
 800304a:	2200      	moveq	r2, #0
 800304c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800304e:	4293      	cmp	r3, r2
 8003050:	d113      	bne.n	800307a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800305c:	085b      	lsrs	r3, r3, #1
 800305e:	3b01      	subs	r3, #1
 8003060:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003062:	429a      	cmp	r2, r3
 8003064:	d109      	bne.n	800307a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003070:	085b      	lsrs	r3, r3, #1
 8003072:	3b01      	subs	r3, #1
 8003074:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003076:	429a      	cmp	r2, r3
 8003078:	d06e      	beq.n	8003158 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	2b0c      	cmp	r3, #12
 800307e:	d069      	beq.n	8003154 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003080:	4b53      	ldr	r3, [pc, #332]	; (80031d0 <HAL_RCC_OscConfig+0x780>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d105      	bne.n	8003098 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800308c:	4b50      	ldr	r3, [pc, #320]	; (80031d0 <HAL_RCC_OscConfig+0x780>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e0ad      	b.n	80031f8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800309c:	4b4c      	ldr	r3, [pc, #304]	; (80031d0 <HAL_RCC_OscConfig+0x780>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a4b      	ldr	r2, [pc, #300]	; (80031d0 <HAL_RCC_OscConfig+0x780>)
 80030a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030a6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030a8:	f7fd fdc4 	bl	8000c34 <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b0:	f7fd fdc0 	bl	8000c34 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e09a      	b.n	80031f8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030c2:	4b43      	ldr	r3, [pc, #268]	; (80031d0 <HAL_RCC_OscConfig+0x780>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1f0      	bne.n	80030b0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030ce:	4b40      	ldr	r3, [pc, #256]	; (80031d0 <HAL_RCC_OscConfig+0x780>)
 80030d0:	68da      	ldr	r2, [r3, #12]
 80030d2:	4b40      	ldr	r3, [pc, #256]	; (80031d4 <HAL_RCC_OscConfig+0x784>)
 80030d4:	4013      	ands	r3, r2
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80030de:	3a01      	subs	r2, #1
 80030e0:	0112      	lsls	r2, r2, #4
 80030e2:	4311      	orrs	r1, r2
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030e8:	0212      	lsls	r2, r2, #8
 80030ea:	4311      	orrs	r1, r2
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80030f0:	0852      	lsrs	r2, r2, #1
 80030f2:	3a01      	subs	r2, #1
 80030f4:	0552      	lsls	r2, r2, #21
 80030f6:	4311      	orrs	r1, r2
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80030fc:	0852      	lsrs	r2, r2, #1
 80030fe:	3a01      	subs	r2, #1
 8003100:	0652      	lsls	r2, r2, #25
 8003102:	4311      	orrs	r1, r2
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003108:	0912      	lsrs	r2, r2, #4
 800310a:	0452      	lsls	r2, r2, #17
 800310c:	430a      	orrs	r2, r1
 800310e:	4930      	ldr	r1, [pc, #192]	; (80031d0 <HAL_RCC_OscConfig+0x780>)
 8003110:	4313      	orrs	r3, r2
 8003112:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003114:	4b2e      	ldr	r3, [pc, #184]	; (80031d0 <HAL_RCC_OscConfig+0x780>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a2d      	ldr	r2, [pc, #180]	; (80031d0 <HAL_RCC_OscConfig+0x780>)
 800311a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800311e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003120:	4b2b      	ldr	r3, [pc, #172]	; (80031d0 <HAL_RCC_OscConfig+0x780>)
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	4a2a      	ldr	r2, [pc, #168]	; (80031d0 <HAL_RCC_OscConfig+0x780>)
 8003126:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800312a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800312c:	f7fd fd82 	bl	8000c34 <HAL_GetTick>
 8003130:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003132:	e008      	b.n	8003146 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003134:	f7fd fd7e 	bl	8000c34 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e058      	b.n	80031f8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003146:	4b22      	ldr	r3, [pc, #136]	; (80031d0 <HAL_RCC_OscConfig+0x780>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d0f0      	beq.n	8003134 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003152:	e050      	b.n	80031f6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e04f      	b.n	80031f8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003158:	4b1d      	ldr	r3, [pc, #116]	; (80031d0 <HAL_RCC_OscConfig+0x780>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d148      	bne.n	80031f6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003164:	4b1a      	ldr	r3, [pc, #104]	; (80031d0 <HAL_RCC_OscConfig+0x780>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a19      	ldr	r2, [pc, #100]	; (80031d0 <HAL_RCC_OscConfig+0x780>)
 800316a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800316e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003170:	4b17      	ldr	r3, [pc, #92]	; (80031d0 <HAL_RCC_OscConfig+0x780>)
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	4a16      	ldr	r2, [pc, #88]	; (80031d0 <HAL_RCC_OscConfig+0x780>)
 8003176:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800317a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800317c:	f7fd fd5a 	bl	8000c34 <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003182:	e008      	b.n	8003196 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003184:	f7fd fd56 	bl	8000c34 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b02      	cmp	r3, #2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e030      	b.n	80031f8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003196:	4b0e      	ldr	r3, [pc, #56]	; (80031d0 <HAL_RCC_OscConfig+0x780>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d0f0      	beq.n	8003184 <HAL_RCC_OscConfig+0x734>
 80031a2:	e028      	b.n	80031f6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	2b0c      	cmp	r3, #12
 80031a8:	d023      	beq.n	80031f2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031aa:	4b09      	ldr	r3, [pc, #36]	; (80031d0 <HAL_RCC_OscConfig+0x780>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a08      	ldr	r2, [pc, #32]	; (80031d0 <HAL_RCC_OscConfig+0x780>)
 80031b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b6:	f7fd fd3d 	bl	8000c34 <HAL_GetTick>
 80031ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031bc:	e00c      	b.n	80031d8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031be:	f7fd fd39 	bl	8000c34 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d905      	bls.n	80031d8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e013      	b.n	80031f8 <HAL_RCC_OscConfig+0x7a8>
 80031d0:	40021000 	.word	0x40021000
 80031d4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031d8:	4b09      	ldr	r3, [pc, #36]	; (8003200 <HAL_RCC_OscConfig+0x7b0>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1ec      	bne.n	80031be <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80031e4:	4b06      	ldr	r3, [pc, #24]	; (8003200 <HAL_RCC_OscConfig+0x7b0>)
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	4905      	ldr	r1, [pc, #20]	; (8003200 <HAL_RCC_OscConfig+0x7b0>)
 80031ea:	4b06      	ldr	r3, [pc, #24]	; (8003204 <HAL_RCC_OscConfig+0x7b4>)
 80031ec:	4013      	ands	r3, r2
 80031ee:	60cb      	str	r3, [r1, #12]
 80031f0:	e001      	b.n	80031f6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e000      	b.n	80031f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3720      	adds	r7, #32
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	40021000 	.word	0x40021000
 8003204:	feeefffc 	.word	0xfeeefffc

08003208 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d101      	bne.n	800321c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e0e7      	b.n	80033ec <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800321c:	4b75      	ldr	r3, [pc, #468]	; (80033f4 <HAL_RCC_ClockConfig+0x1ec>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0307 	and.w	r3, r3, #7
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	429a      	cmp	r2, r3
 8003228:	d910      	bls.n	800324c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800322a:	4b72      	ldr	r3, [pc, #456]	; (80033f4 <HAL_RCC_ClockConfig+0x1ec>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f023 0207 	bic.w	r2, r3, #7
 8003232:	4970      	ldr	r1, [pc, #448]	; (80033f4 <HAL_RCC_ClockConfig+0x1ec>)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	4313      	orrs	r3, r2
 8003238:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800323a:	4b6e      	ldr	r3, [pc, #440]	; (80033f4 <HAL_RCC_ClockConfig+0x1ec>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	429a      	cmp	r2, r3
 8003246:	d001      	beq.n	800324c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e0cf      	b.n	80033ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d010      	beq.n	800327a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	4b66      	ldr	r3, [pc, #408]	; (80033f8 <HAL_RCC_ClockConfig+0x1f0>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003264:	429a      	cmp	r2, r3
 8003266:	d908      	bls.n	800327a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003268:	4b63      	ldr	r3, [pc, #396]	; (80033f8 <HAL_RCC_ClockConfig+0x1f0>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	4960      	ldr	r1, [pc, #384]	; (80033f8 <HAL_RCC_ClockConfig+0x1f0>)
 8003276:	4313      	orrs	r3, r2
 8003278:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b00      	cmp	r3, #0
 8003284:	d04c      	beq.n	8003320 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	2b03      	cmp	r3, #3
 800328c:	d107      	bne.n	800329e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800328e:	4b5a      	ldr	r3, [pc, #360]	; (80033f8 <HAL_RCC_ClockConfig+0x1f0>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d121      	bne.n	80032de <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e0a6      	b.n	80033ec <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d107      	bne.n	80032b6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032a6:	4b54      	ldr	r3, [pc, #336]	; (80033f8 <HAL_RCC_ClockConfig+0x1f0>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d115      	bne.n	80032de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e09a      	b.n	80033ec <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d107      	bne.n	80032ce <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032be:	4b4e      	ldr	r3, [pc, #312]	; (80033f8 <HAL_RCC_ClockConfig+0x1f0>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d109      	bne.n	80032de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e08e      	b.n	80033ec <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032ce:	4b4a      	ldr	r3, [pc, #296]	; (80033f8 <HAL_RCC_ClockConfig+0x1f0>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e086      	b.n	80033ec <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032de:	4b46      	ldr	r3, [pc, #280]	; (80033f8 <HAL_RCC_ClockConfig+0x1f0>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f023 0203 	bic.w	r2, r3, #3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	4943      	ldr	r1, [pc, #268]	; (80033f8 <HAL_RCC_ClockConfig+0x1f0>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032f0:	f7fd fca0 	bl	8000c34 <HAL_GetTick>
 80032f4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032f6:	e00a      	b.n	800330e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032f8:	f7fd fc9c 	bl	8000c34 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	f241 3288 	movw	r2, #5000	; 0x1388
 8003306:	4293      	cmp	r3, r2
 8003308:	d901      	bls.n	800330e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e06e      	b.n	80033ec <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800330e:	4b3a      	ldr	r3, [pc, #232]	; (80033f8 <HAL_RCC_ClockConfig+0x1f0>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f003 020c 	and.w	r2, r3, #12
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	429a      	cmp	r2, r3
 800331e:	d1eb      	bne.n	80032f8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d010      	beq.n	800334e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	4b31      	ldr	r3, [pc, #196]	; (80033f8 <HAL_RCC_ClockConfig+0x1f0>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003338:	429a      	cmp	r2, r3
 800333a:	d208      	bcs.n	800334e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800333c:	4b2e      	ldr	r3, [pc, #184]	; (80033f8 <HAL_RCC_ClockConfig+0x1f0>)
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	492b      	ldr	r1, [pc, #172]	; (80033f8 <HAL_RCC_ClockConfig+0x1f0>)
 800334a:	4313      	orrs	r3, r2
 800334c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800334e:	4b29      	ldr	r3, [pc, #164]	; (80033f4 <HAL_RCC_ClockConfig+0x1ec>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0307 	and.w	r3, r3, #7
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	429a      	cmp	r2, r3
 800335a:	d210      	bcs.n	800337e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800335c:	4b25      	ldr	r3, [pc, #148]	; (80033f4 <HAL_RCC_ClockConfig+0x1ec>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f023 0207 	bic.w	r2, r3, #7
 8003364:	4923      	ldr	r1, [pc, #140]	; (80033f4 <HAL_RCC_ClockConfig+0x1ec>)
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	4313      	orrs	r3, r2
 800336a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800336c:	4b21      	ldr	r3, [pc, #132]	; (80033f4 <HAL_RCC_ClockConfig+0x1ec>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0307 	and.w	r3, r3, #7
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	429a      	cmp	r2, r3
 8003378:	d001      	beq.n	800337e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e036      	b.n	80033ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0304 	and.w	r3, r3, #4
 8003386:	2b00      	cmp	r3, #0
 8003388:	d008      	beq.n	800339c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800338a:	4b1b      	ldr	r3, [pc, #108]	; (80033f8 <HAL_RCC_ClockConfig+0x1f0>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	4918      	ldr	r1, [pc, #96]	; (80033f8 <HAL_RCC_ClockConfig+0x1f0>)
 8003398:	4313      	orrs	r3, r2
 800339a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0308 	and.w	r3, r3, #8
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d009      	beq.n	80033bc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033a8:	4b13      	ldr	r3, [pc, #76]	; (80033f8 <HAL_RCC_ClockConfig+0x1f0>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	4910      	ldr	r1, [pc, #64]	; (80033f8 <HAL_RCC_ClockConfig+0x1f0>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033bc:	f000 f824 	bl	8003408 <HAL_RCC_GetSysClockFreq>
 80033c0:	4602      	mov	r2, r0
 80033c2:	4b0d      	ldr	r3, [pc, #52]	; (80033f8 <HAL_RCC_ClockConfig+0x1f0>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	091b      	lsrs	r3, r3, #4
 80033c8:	f003 030f 	and.w	r3, r3, #15
 80033cc:	490b      	ldr	r1, [pc, #44]	; (80033fc <HAL_RCC_ClockConfig+0x1f4>)
 80033ce:	5ccb      	ldrb	r3, [r1, r3]
 80033d0:	f003 031f 	and.w	r3, r3, #31
 80033d4:	fa22 f303 	lsr.w	r3, r2, r3
 80033d8:	4a09      	ldr	r2, [pc, #36]	; (8003400 <HAL_RCC_ClockConfig+0x1f8>)
 80033da:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80033dc:	4b09      	ldr	r3, [pc, #36]	; (8003404 <HAL_RCC_ClockConfig+0x1fc>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7fd fbd7 	bl	8000b94 <HAL_InitTick>
 80033e6:	4603      	mov	r3, r0
 80033e8:	72fb      	strb	r3, [r7, #11]

  return status;
 80033ea:	7afb      	ldrb	r3, [r7, #11]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3710      	adds	r7, #16
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40022000 	.word	0x40022000
 80033f8:	40021000 	.word	0x40021000
 80033fc:	080049a4 	.word	0x080049a4
 8003400:	20000000 	.word	0x20000000
 8003404:	20000004 	.word	0x20000004

08003408 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003408:	b480      	push	{r7}
 800340a:	b089      	sub	sp, #36	; 0x24
 800340c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800340e:	2300      	movs	r3, #0
 8003410:	61fb      	str	r3, [r7, #28]
 8003412:	2300      	movs	r3, #0
 8003414:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003416:	4b3e      	ldr	r3, [pc, #248]	; (8003510 <HAL_RCC_GetSysClockFreq+0x108>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f003 030c 	and.w	r3, r3, #12
 800341e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003420:	4b3b      	ldr	r3, [pc, #236]	; (8003510 <HAL_RCC_GetSysClockFreq+0x108>)
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	f003 0303 	and.w	r3, r3, #3
 8003428:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d005      	beq.n	800343c <HAL_RCC_GetSysClockFreq+0x34>
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	2b0c      	cmp	r3, #12
 8003434:	d121      	bne.n	800347a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d11e      	bne.n	800347a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800343c:	4b34      	ldr	r3, [pc, #208]	; (8003510 <HAL_RCC_GetSysClockFreq+0x108>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0308 	and.w	r3, r3, #8
 8003444:	2b00      	cmp	r3, #0
 8003446:	d107      	bne.n	8003458 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003448:	4b31      	ldr	r3, [pc, #196]	; (8003510 <HAL_RCC_GetSysClockFreq+0x108>)
 800344a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800344e:	0a1b      	lsrs	r3, r3, #8
 8003450:	f003 030f 	and.w	r3, r3, #15
 8003454:	61fb      	str	r3, [r7, #28]
 8003456:	e005      	b.n	8003464 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003458:	4b2d      	ldr	r3, [pc, #180]	; (8003510 <HAL_RCC_GetSysClockFreq+0x108>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	091b      	lsrs	r3, r3, #4
 800345e:	f003 030f 	and.w	r3, r3, #15
 8003462:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003464:	4a2b      	ldr	r2, [pc, #172]	; (8003514 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800346c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10d      	bne.n	8003490 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003478:	e00a      	b.n	8003490 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	2b04      	cmp	r3, #4
 800347e:	d102      	bne.n	8003486 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003480:	4b25      	ldr	r3, [pc, #148]	; (8003518 <HAL_RCC_GetSysClockFreq+0x110>)
 8003482:	61bb      	str	r3, [r7, #24]
 8003484:	e004      	b.n	8003490 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	2b08      	cmp	r3, #8
 800348a:	d101      	bne.n	8003490 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800348c:	4b23      	ldr	r3, [pc, #140]	; (800351c <HAL_RCC_GetSysClockFreq+0x114>)
 800348e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	2b0c      	cmp	r3, #12
 8003494:	d134      	bne.n	8003500 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003496:	4b1e      	ldr	r3, [pc, #120]	; (8003510 <HAL_RCC_GetSysClockFreq+0x108>)
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	f003 0303 	and.w	r3, r3, #3
 800349e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d003      	beq.n	80034ae <HAL_RCC_GetSysClockFreq+0xa6>
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	2b03      	cmp	r3, #3
 80034aa:	d003      	beq.n	80034b4 <HAL_RCC_GetSysClockFreq+0xac>
 80034ac:	e005      	b.n	80034ba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80034ae:	4b1a      	ldr	r3, [pc, #104]	; (8003518 <HAL_RCC_GetSysClockFreq+0x110>)
 80034b0:	617b      	str	r3, [r7, #20]
      break;
 80034b2:	e005      	b.n	80034c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80034b4:	4b19      	ldr	r3, [pc, #100]	; (800351c <HAL_RCC_GetSysClockFreq+0x114>)
 80034b6:	617b      	str	r3, [r7, #20]
      break;
 80034b8:	e002      	b.n	80034c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	617b      	str	r3, [r7, #20]
      break;
 80034be:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034c0:	4b13      	ldr	r3, [pc, #76]	; (8003510 <HAL_RCC_GetSysClockFreq+0x108>)
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	091b      	lsrs	r3, r3, #4
 80034c6:	f003 0307 	and.w	r3, r3, #7
 80034ca:	3301      	adds	r3, #1
 80034cc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80034ce:	4b10      	ldr	r3, [pc, #64]	; (8003510 <HAL_RCC_GetSysClockFreq+0x108>)
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	0a1b      	lsrs	r3, r3, #8
 80034d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034d8:	697a      	ldr	r2, [r7, #20]
 80034da:	fb03 f202 	mul.w	r2, r3, r2
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034e6:	4b0a      	ldr	r3, [pc, #40]	; (8003510 <HAL_RCC_GetSysClockFreq+0x108>)
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	0e5b      	lsrs	r3, r3, #25
 80034ec:	f003 0303 	and.w	r3, r3, #3
 80034f0:	3301      	adds	r3, #1
 80034f2:	005b      	lsls	r3, r3, #1
 80034f4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80034fe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003500:	69bb      	ldr	r3, [r7, #24]
}
 8003502:	4618      	mov	r0, r3
 8003504:	3724      	adds	r7, #36	; 0x24
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	40021000 	.word	0x40021000
 8003514:	080049bc 	.word	0x080049bc
 8003518:	00f42400 	.word	0x00f42400
 800351c:	007a1200 	.word	0x007a1200

08003520 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003524:	4b03      	ldr	r3, [pc, #12]	; (8003534 <HAL_RCC_GetHCLKFreq+0x14>)
 8003526:	681b      	ldr	r3, [r3, #0]
}
 8003528:	4618      	mov	r0, r3
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	20000000 	.word	0x20000000

08003538 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800353c:	f7ff fff0 	bl	8003520 <HAL_RCC_GetHCLKFreq>
 8003540:	4602      	mov	r2, r0
 8003542:	4b06      	ldr	r3, [pc, #24]	; (800355c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	0a1b      	lsrs	r3, r3, #8
 8003548:	f003 0307 	and.w	r3, r3, #7
 800354c:	4904      	ldr	r1, [pc, #16]	; (8003560 <HAL_RCC_GetPCLK1Freq+0x28>)
 800354e:	5ccb      	ldrb	r3, [r1, r3]
 8003550:	f003 031f 	and.w	r3, r3, #31
 8003554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003558:	4618      	mov	r0, r3
 800355a:	bd80      	pop	{r7, pc}
 800355c:	40021000 	.word	0x40021000
 8003560:	080049b4 	.word	0x080049b4

08003564 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003568:	f7ff ffda 	bl	8003520 <HAL_RCC_GetHCLKFreq>
 800356c:	4602      	mov	r2, r0
 800356e:	4b06      	ldr	r3, [pc, #24]	; (8003588 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	0adb      	lsrs	r3, r3, #11
 8003574:	f003 0307 	and.w	r3, r3, #7
 8003578:	4904      	ldr	r1, [pc, #16]	; (800358c <HAL_RCC_GetPCLK2Freq+0x28>)
 800357a:	5ccb      	ldrb	r3, [r1, r3]
 800357c:	f003 031f 	and.w	r3, r3, #31
 8003580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003584:	4618      	mov	r0, r3
 8003586:	bd80      	pop	{r7, pc}
 8003588:	40021000 	.word	0x40021000
 800358c:	080049b4 	.word	0x080049b4

08003590 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003598:	2300      	movs	r3, #0
 800359a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800359c:	4b2a      	ldr	r3, [pc, #168]	; (8003648 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800359e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d003      	beq.n	80035b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80035a8:	f7ff f9ee 	bl	8002988 <HAL_PWREx_GetVoltageRange>
 80035ac:	6178      	str	r0, [r7, #20]
 80035ae:	e014      	b.n	80035da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80035b0:	4b25      	ldr	r3, [pc, #148]	; (8003648 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b4:	4a24      	ldr	r2, [pc, #144]	; (8003648 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ba:	6593      	str	r3, [r2, #88]	; 0x58
 80035bc:	4b22      	ldr	r3, [pc, #136]	; (8003648 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c4:	60fb      	str	r3, [r7, #12]
 80035c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80035c8:	f7ff f9de 	bl	8002988 <HAL_PWREx_GetVoltageRange>
 80035cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80035ce:	4b1e      	ldr	r3, [pc, #120]	; (8003648 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d2:	4a1d      	ldr	r2, [pc, #116]	; (8003648 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035d8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035e0:	d10b      	bne.n	80035fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2b80      	cmp	r3, #128	; 0x80
 80035e6:	d919      	bls.n	800361c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2ba0      	cmp	r3, #160	; 0xa0
 80035ec:	d902      	bls.n	80035f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035ee:	2302      	movs	r3, #2
 80035f0:	613b      	str	r3, [r7, #16]
 80035f2:	e013      	b.n	800361c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035f4:	2301      	movs	r3, #1
 80035f6:	613b      	str	r3, [r7, #16]
 80035f8:	e010      	b.n	800361c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2b80      	cmp	r3, #128	; 0x80
 80035fe:	d902      	bls.n	8003606 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003600:	2303      	movs	r3, #3
 8003602:	613b      	str	r3, [r7, #16]
 8003604:	e00a      	b.n	800361c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2b80      	cmp	r3, #128	; 0x80
 800360a:	d102      	bne.n	8003612 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800360c:	2302      	movs	r3, #2
 800360e:	613b      	str	r3, [r7, #16]
 8003610:	e004      	b.n	800361c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2b70      	cmp	r3, #112	; 0x70
 8003616:	d101      	bne.n	800361c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003618:	2301      	movs	r3, #1
 800361a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800361c:	4b0b      	ldr	r3, [pc, #44]	; (800364c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f023 0207 	bic.w	r2, r3, #7
 8003624:	4909      	ldr	r1, [pc, #36]	; (800364c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	4313      	orrs	r3, r2
 800362a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800362c:	4b07      	ldr	r3, [pc, #28]	; (800364c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0307 	and.w	r3, r3, #7
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	429a      	cmp	r2, r3
 8003638:	d001      	beq.n	800363e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e000      	b.n	8003640 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3718      	adds	r7, #24
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	40021000 	.word	0x40021000
 800364c:	40022000 	.word	0x40022000

08003650 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003658:	2300      	movs	r3, #0
 800365a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800365c:	2300      	movs	r3, #0
 800365e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003668:	2b00      	cmp	r3, #0
 800366a:	d041      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003670:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003674:	d02a      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003676:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800367a:	d824      	bhi.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800367c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003680:	d008      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003682:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003686:	d81e      	bhi.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00a      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800368c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003690:	d010      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003692:	e018      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003694:	4b86      	ldr	r3, [pc, #536]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	4a85      	ldr	r2, [pc, #532]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800369a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800369e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036a0:	e015      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	3304      	adds	r3, #4
 80036a6:	2100      	movs	r1, #0
 80036a8:	4618      	mov	r0, r3
 80036aa:	f000 fabb 	bl	8003c24 <RCCEx_PLLSAI1_Config>
 80036ae:	4603      	mov	r3, r0
 80036b0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036b2:	e00c      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	3320      	adds	r3, #32
 80036b8:	2100      	movs	r1, #0
 80036ba:	4618      	mov	r0, r3
 80036bc:	f000 fba6 	bl	8003e0c <RCCEx_PLLSAI2_Config>
 80036c0:	4603      	mov	r3, r0
 80036c2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036c4:	e003      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	74fb      	strb	r3, [r7, #19]
      break;
 80036ca:	e000      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80036cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036ce:	7cfb      	ldrb	r3, [r7, #19]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d10b      	bne.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036d4:	4b76      	ldr	r3, [pc, #472]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036e2:	4973      	ldr	r1, [pc, #460]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80036ea:	e001      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ec:	7cfb      	ldrb	r3, [r7, #19]
 80036ee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d041      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003700:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003704:	d02a      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003706:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800370a:	d824      	bhi.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800370c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003710:	d008      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003712:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003716:	d81e      	bhi.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00a      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800371c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003720:	d010      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003722:	e018      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003724:	4b62      	ldr	r3, [pc, #392]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	4a61      	ldr	r2, [pc, #388]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800372a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800372e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003730:	e015      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	3304      	adds	r3, #4
 8003736:	2100      	movs	r1, #0
 8003738:	4618      	mov	r0, r3
 800373a:	f000 fa73 	bl	8003c24 <RCCEx_PLLSAI1_Config>
 800373e:	4603      	mov	r3, r0
 8003740:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003742:	e00c      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	3320      	adds	r3, #32
 8003748:	2100      	movs	r1, #0
 800374a:	4618      	mov	r0, r3
 800374c:	f000 fb5e 	bl	8003e0c <RCCEx_PLLSAI2_Config>
 8003750:	4603      	mov	r3, r0
 8003752:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003754:	e003      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	74fb      	strb	r3, [r7, #19]
      break;
 800375a:	e000      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800375c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800375e:	7cfb      	ldrb	r3, [r7, #19]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d10b      	bne.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003764:	4b52      	ldr	r3, [pc, #328]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800376a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003772:	494f      	ldr	r1, [pc, #316]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003774:	4313      	orrs	r3, r2
 8003776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800377a:	e001      	b.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800377c:	7cfb      	ldrb	r3, [r7, #19]
 800377e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003788:	2b00      	cmp	r3, #0
 800378a:	f000 80a0 	beq.w	80038ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800378e:	2300      	movs	r3, #0
 8003790:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003792:	4b47      	ldr	r3, [pc, #284]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800379e:	2301      	movs	r3, #1
 80037a0:	e000      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80037a2:	2300      	movs	r3, #0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00d      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037a8:	4b41      	ldr	r3, [pc, #260]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ac:	4a40      	ldr	r2, [pc, #256]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037b2:	6593      	str	r3, [r2, #88]	; 0x58
 80037b4:	4b3e      	ldr	r3, [pc, #248]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037bc:	60bb      	str	r3, [r7, #8]
 80037be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037c0:	2301      	movs	r3, #1
 80037c2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037c4:	4b3b      	ldr	r3, [pc, #236]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a3a      	ldr	r2, [pc, #232]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80037ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037d0:	f7fd fa30 	bl	8000c34 <HAL_GetTick>
 80037d4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80037d6:	e009      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037d8:	f7fd fa2c 	bl	8000c34 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d902      	bls.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	74fb      	strb	r3, [r7, #19]
        break;
 80037ea:	e005      	b.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80037ec:	4b31      	ldr	r3, [pc, #196]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d0ef      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80037f8:	7cfb      	ldrb	r3, [r7, #19]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d15c      	bne.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80037fe:	4b2c      	ldr	r3, [pc, #176]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003804:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003808:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d01f      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	429a      	cmp	r2, r3
 800381a:	d019      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800381c:	4b24      	ldr	r3, [pc, #144]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800381e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003822:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003826:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003828:	4b21      	ldr	r3, [pc, #132]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800382a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382e:	4a20      	ldr	r2, [pc, #128]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003834:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003838:	4b1d      	ldr	r3, [pc, #116]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800383a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800383e:	4a1c      	ldr	r2, [pc, #112]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003840:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003844:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003848:	4a19      	ldr	r2, [pc, #100]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b00      	cmp	r3, #0
 8003858:	d016      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385a:	f7fd f9eb 	bl	8000c34 <HAL_GetTick>
 800385e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003860:	e00b      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003862:	f7fd f9e7 	bl	8000c34 <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003870:	4293      	cmp	r3, r2
 8003872:	d902      	bls.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	74fb      	strb	r3, [r7, #19]
            break;
 8003878:	e006      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800387a:	4b0d      	ldr	r3, [pc, #52]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800387c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d0ec      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003888:	7cfb      	ldrb	r3, [r7, #19]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10c      	bne.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800388e:	4b08      	ldr	r3, [pc, #32]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003894:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800389e:	4904      	ldr	r1, [pc, #16]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80038a6:	e009      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80038a8:	7cfb      	ldrb	r3, [r7, #19]
 80038aa:	74bb      	strb	r3, [r7, #18]
 80038ac:	e006      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80038ae:	bf00      	nop
 80038b0:	40021000 	.word	0x40021000
 80038b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038b8:	7cfb      	ldrb	r3, [r7, #19]
 80038ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038bc:	7c7b      	ldrb	r3, [r7, #17]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d105      	bne.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038c2:	4b9e      	ldr	r3, [pc, #632]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c6:	4a9d      	ldr	r2, [pc, #628]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00a      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038da:	4b98      	ldr	r3, [pc, #608]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e0:	f023 0203 	bic.w	r2, r3, #3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e8:	4994      	ldr	r1, [pc, #592]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00a      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038fc:	4b8f      	ldr	r3, [pc, #572]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003902:	f023 020c 	bic.w	r2, r3, #12
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390a:	498c      	ldr	r1, [pc, #560]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800390c:	4313      	orrs	r3, r2
 800390e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0304 	and.w	r3, r3, #4
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00a      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800391e:	4b87      	ldr	r3, [pc, #540]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003924:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392c:	4983      	ldr	r1, [pc, #524]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800392e:	4313      	orrs	r3, r2
 8003930:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0308 	and.w	r3, r3, #8
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00a      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003940:	4b7e      	ldr	r3, [pc, #504]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003946:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394e:	497b      	ldr	r1, [pc, #492]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003950:	4313      	orrs	r3, r2
 8003952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0310 	and.w	r3, r3, #16
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00a      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003962:	4b76      	ldr	r3, [pc, #472]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003968:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003970:	4972      	ldr	r1, [pc, #456]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003972:	4313      	orrs	r3, r2
 8003974:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0320 	and.w	r3, r3, #32
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00a      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003984:	4b6d      	ldr	r3, [pc, #436]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800398a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003992:	496a      	ldr	r1, [pc, #424]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003994:	4313      	orrs	r3, r2
 8003996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00a      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039a6:	4b65      	ldr	r3, [pc, #404]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b4:	4961      	ldr	r1, [pc, #388]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00a      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80039c8:	4b5c      	ldr	r3, [pc, #368]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039d6:	4959      	ldr	r1, [pc, #356]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00a      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039ea:	4b54      	ldr	r3, [pc, #336]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039f8:	4950      	ldr	r1, [pc, #320]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d00a      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a0c:	4b4b      	ldr	r3, [pc, #300]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a12:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a1a:	4948      	ldr	r1, [pc, #288]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00a      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a2e:	4b43      	ldr	r3, [pc, #268]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a3c:	493f      	ldr	r1, [pc, #252]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d028      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a50:	4b3a      	ldr	r3, [pc, #232]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a56:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a5e:	4937      	ldr	r1, [pc, #220]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a6e:	d106      	bne.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a70:	4b32      	ldr	r3, [pc, #200]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	4a31      	ldr	r2, [pc, #196]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a7a:	60d3      	str	r3, [r2, #12]
 8003a7c:	e011      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a86:	d10c      	bne.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	3304      	adds	r3, #4
 8003a8c:	2101      	movs	r1, #1
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f000 f8c8 	bl	8003c24 <RCCEx_PLLSAI1_Config>
 8003a94:	4603      	mov	r3, r0
 8003a96:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003a98:	7cfb      	ldrb	r3, [r7, #19]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003a9e:	7cfb      	ldrb	r3, [r7, #19]
 8003aa0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d028      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003aae:	4b23      	ldr	r3, [pc, #140]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003abc:	491f      	ldr	r1, [pc, #124]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003acc:	d106      	bne.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ace:	4b1b      	ldr	r3, [pc, #108]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	4a1a      	ldr	r2, [pc, #104]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ad4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ad8:	60d3      	str	r3, [r2, #12]
 8003ada:	e011      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ae4:	d10c      	bne.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	3304      	adds	r3, #4
 8003aea:	2101      	movs	r1, #1
 8003aec:	4618      	mov	r0, r3
 8003aee:	f000 f899 	bl	8003c24 <RCCEx_PLLSAI1_Config>
 8003af2:	4603      	mov	r3, r0
 8003af4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003af6:	7cfb      	ldrb	r3, [r7, #19]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d001      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003afc:	7cfb      	ldrb	r3, [r7, #19]
 8003afe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d02b      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b0c:	4b0b      	ldr	r3, [pc, #44]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b1a:	4908      	ldr	r1, [pc, #32]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b2a:	d109      	bne.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b2c:	4b03      	ldr	r3, [pc, #12]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	4a02      	ldr	r2, [pc, #8]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b36:	60d3      	str	r3, [r2, #12]
 8003b38:	e014      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003b3a:	bf00      	nop
 8003b3c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b48:	d10c      	bne.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	3304      	adds	r3, #4
 8003b4e:	2101      	movs	r1, #1
 8003b50:	4618      	mov	r0, r3
 8003b52:	f000 f867 	bl	8003c24 <RCCEx_PLLSAI1_Config>
 8003b56:	4603      	mov	r3, r0
 8003b58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b5a:	7cfb      	ldrb	r3, [r7, #19]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d001      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003b60:	7cfb      	ldrb	r3, [r7, #19]
 8003b62:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d02f      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b70:	4b2b      	ldr	r3, [pc, #172]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b76:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b7e:	4928      	ldr	r1, [pc, #160]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b8e:	d10d      	bne.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	3304      	adds	r3, #4
 8003b94:	2102      	movs	r1, #2
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 f844 	bl	8003c24 <RCCEx_PLLSAI1_Config>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ba0:	7cfb      	ldrb	r3, [r7, #19]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d014      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003ba6:	7cfb      	ldrb	r3, [r7, #19]
 8003ba8:	74bb      	strb	r3, [r7, #18]
 8003baa:	e011      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bb4:	d10c      	bne.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	3320      	adds	r3, #32
 8003bba:	2102      	movs	r1, #2
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f000 f925 	bl	8003e0c <RCCEx_PLLSAI2_Config>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bc6:	7cfb      	ldrb	r3, [r7, #19]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003bcc:	7cfb      	ldrb	r3, [r7, #19]
 8003bce:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00a      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003bdc:	4b10      	ldr	r3, [pc, #64]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bea:	490d      	ldr	r1, [pc, #52]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00b      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003bfe:	4b08      	ldr	r3, [pc, #32]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c04:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c0e:	4904      	ldr	r1, [pc, #16]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003c16:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3718      	adds	r7, #24
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	40021000 	.word	0x40021000

08003c24 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c32:	4b75      	ldr	r3, [pc, #468]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	f003 0303 	and.w	r3, r3, #3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d018      	beq.n	8003c70 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003c3e:	4b72      	ldr	r3, [pc, #456]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	f003 0203 	and.w	r2, r3, #3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d10d      	bne.n	8003c6a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
       ||
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d009      	beq.n	8003c6a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003c56:	4b6c      	ldr	r3, [pc, #432]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	091b      	lsrs	r3, r3, #4
 8003c5c:	f003 0307 	and.w	r3, r3, #7
 8003c60:	1c5a      	adds	r2, r3, #1
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
       ||
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d047      	beq.n	8003cfa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	73fb      	strb	r3, [r7, #15]
 8003c6e:	e044      	b.n	8003cfa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2b03      	cmp	r3, #3
 8003c76:	d018      	beq.n	8003caa <RCCEx_PLLSAI1_Config+0x86>
 8003c78:	2b03      	cmp	r3, #3
 8003c7a:	d825      	bhi.n	8003cc8 <RCCEx_PLLSAI1_Config+0xa4>
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d002      	beq.n	8003c86 <RCCEx_PLLSAI1_Config+0x62>
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d009      	beq.n	8003c98 <RCCEx_PLLSAI1_Config+0x74>
 8003c84:	e020      	b.n	8003cc8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c86:	4b60      	ldr	r3, [pc, #384]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d11d      	bne.n	8003cce <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c96:	e01a      	b.n	8003cce <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c98:	4b5b      	ldr	r3, [pc, #364]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d116      	bne.n	8003cd2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ca8:	e013      	b.n	8003cd2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003caa:	4b57      	ldr	r3, [pc, #348]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10f      	bne.n	8003cd6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003cb6:	4b54      	ldr	r3, [pc, #336]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d109      	bne.n	8003cd6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003cc6:	e006      	b.n	8003cd6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	73fb      	strb	r3, [r7, #15]
      break;
 8003ccc:	e004      	b.n	8003cd8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003cce:	bf00      	nop
 8003cd0:	e002      	b.n	8003cd8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003cd2:	bf00      	nop
 8003cd4:	e000      	b.n	8003cd8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003cd6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003cd8:	7bfb      	ldrb	r3, [r7, #15]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10d      	bne.n	8003cfa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003cde:	4b4a      	ldr	r3, [pc, #296]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6819      	ldr	r1, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	011b      	lsls	r3, r3, #4
 8003cf2:	430b      	orrs	r3, r1
 8003cf4:	4944      	ldr	r1, [pc, #272]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003cfa:	7bfb      	ldrb	r3, [r7, #15]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d17d      	bne.n	8003dfc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003d00:	4b41      	ldr	r3, [pc, #260]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a40      	ldr	r2, [pc, #256]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d06:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d0c:	f7fc ff92 	bl	8000c34 <HAL_GetTick>
 8003d10:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d12:	e009      	b.n	8003d28 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d14:	f7fc ff8e 	bl	8000c34 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d902      	bls.n	8003d28 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	73fb      	strb	r3, [r7, #15]
        break;
 8003d26:	e005      	b.n	8003d34 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d28:	4b37      	ldr	r3, [pc, #220]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d1ef      	bne.n	8003d14 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d34:	7bfb      	ldrb	r3, [r7, #15]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d160      	bne.n	8003dfc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d111      	bne.n	8003d64 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d40:	4b31      	ldr	r3, [pc, #196]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003d48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	6892      	ldr	r2, [r2, #8]
 8003d50:	0211      	lsls	r1, r2, #8
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	68d2      	ldr	r2, [r2, #12]
 8003d56:	0912      	lsrs	r2, r2, #4
 8003d58:	0452      	lsls	r2, r2, #17
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	492a      	ldr	r1, [pc, #168]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	610b      	str	r3, [r1, #16]
 8003d62:	e027      	b.n	8003db4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d112      	bne.n	8003d90 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d6a:	4b27      	ldr	r3, [pc, #156]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003d72:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	6892      	ldr	r2, [r2, #8]
 8003d7a:	0211      	lsls	r1, r2, #8
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	6912      	ldr	r2, [r2, #16]
 8003d80:	0852      	lsrs	r2, r2, #1
 8003d82:	3a01      	subs	r2, #1
 8003d84:	0552      	lsls	r2, r2, #21
 8003d86:	430a      	orrs	r2, r1
 8003d88:	491f      	ldr	r1, [pc, #124]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	610b      	str	r3, [r1, #16]
 8003d8e:	e011      	b.n	8003db4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d90:	4b1d      	ldr	r3, [pc, #116]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d98:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	6892      	ldr	r2, [r2, #8]
 8003da0:	0211      	lsls	r1, r2, #8
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	6952      	ldr	r2, [r2, #20]
 8003da6:	0852      	lsrs	r2, r2, #1
 8003da8:	3a01      	subs	r2, #1
 8003daa:	0652      	lsls	r2, r2, #25
 8003dac:	430a      	orrs	r2, r1
 8003dae:	4916      	ldr	r1, [pc, #88]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003db4:	4b14      	ldr	r3, [pc, #80]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a13      	ldr	r2, [pc, #76]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003dbe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc0:	f7fc ff38 	bl	8000c34 <HAL_GetTick>
 8003dc4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003dc6:	e009      	b.n	8003ddc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003dc8:	f7fc ff34 	bl	8000c34 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d902      	bls.n	8003ddc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	73fb      	strb	r3, [r7, #15]
          break;
 8003dda:	e005      	b.n	8003de8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ddc:	4b0a      	ldr	r3, [pc, #40]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d0ef      	beq.n	8003dc8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003de8:	7bfb      	ldrb	r3, [r7, #15]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d106      	bne.n	8003dfc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003dee:	4b06      	ldr	r3, [pc, #24]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003df0:	691a      	ldr	r2, [r3, #16]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	4904      	ldr	r1, [pc, #16]	; (8003e08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	40021000 	.word	0x40021000

08003e0c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e16:	2300      	movs	r3, #0
 8003e18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e1a:	4b6a      	ldr	r3, [pc, #424]	; (8003fc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	f003 0303 	and.w	r3, r3, #3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d018      	beq.n	8003e58 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003e26:	4b67      	ldr	r3, [pc, #412]	; (8003fc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	f003 0203 	and.w	r2, r3, #3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d10d      	bne.n	8003e52 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
       ||
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d009      	beq.n	8003e52 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003e3e:	4b61      	ldr	r3, [pc, #388]	; (8003fc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	091b      	lsrs	r3, r3, #4
 8003e44:	f003 0307 	and.w	r3, r3, #7
 8003e48:	1c5a      	adds	r2, r3, #1
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
       ||
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d047      	beq.n	8003ee2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	73fb      	strb	r3, [r7, #15]
 8003e56:	e044      	b.n	8003ee2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2b03      	cmp	r3, #3
 8003e5e:	d018      	beq.n	8003e92 <RCCEx_PLLSAI2_Config+0x86>
 8003e60:	2b03      	cmp	r3, #3
 8003e62:	d825      	bhi.n	8003eb0 <RCCEx_PLLSAI2_Config+0xa4>
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d002      	beq.n	8003e6e <RCCEx_PLLSAI2_Config+0x62>
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d009      	beq.n	8003e80 <RCCEx_PLLSAI2_Config+0x74>
 8003e6c:	e020      	b.n	8003eb0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e6e:	4b55      	ldr	r3, [pc, #340]	; (8003fc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d11d      	bne.n	8003eb6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e7e:	e01a      	b.n	8003eb6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e80:	4b50      	ldr	r3, [pc, #320]	; (8003fc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d116      	bne.n	8003eba <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e90:	e013      	b.n	8003eba <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e92:	4b4c      	ldr	r3, [pc, #304]	; (8003fc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10f      	bne.n	8003ebe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e9e:	4b49      	ldr	r3, [pc, #292]	; (8003fc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d109      	bne.n	8003ebe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003eae:	e006      	b.n	8003ebe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	73fb      	strb	r3, [r7, #15]
      break;
 8003eb4:	e004      	b.n	8003ec0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003eb6:	bf00      	nop
 8003eb8:	e002      	b.n	8003ec0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003eba:	bf00      	nop
 8003ebc:	e000      	b.n	8003ec0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ebe:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ec0:	7bfb      	ldrb	r3, [r7, #15]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10d      	bne.n	8003ee2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ec6:	4b3f      	ldr	r3, [pc, #252]	; (8003fc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6819      	ldr	r1, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	011b      	lsls	r3, r3, #4
 8003eda:	430b      	orrs	r3, r1
 8003edc:	4939      	ldr	r1, [pc, #228]	; (8003fc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ee2:	7bfb      	ldrb	r3, [r7, #15]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d167      	bne.n	8003fb8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003ee8:	4b36      	ldr	r3, [pc, #216]	; (8003fc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a35      	ldr	r2, [pc, #212]	; (8003fc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ef2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ef4:	f7fc fe9e 	bl	8000c34 <HAL_GetTick>
 8003ef8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003efa:	e009      	b.n	8003f10 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003efc:	f7fc fe9a 	bl	8000c34 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d902      	bls.n	8003f10 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	73fb      	strb	r3, [r7, #15]
        break;
 8003f0e:	e005      	b.n	8003f1c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f10:	4b2c      	ldr	r3, [pc, #176]	; (8003fc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1ef      	bne.n	8003efc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f1c:	7bfb      	ldrb	r3, [r7, #15]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d14a      	bne.n	8003fb8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d111      	bne.n	8003f4c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f28:	4b26      	ldr	r3, [pc, #152]	; (8003fc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f2a:	695b      	ldr	r3, [r3, #20]
 8003f2c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003f30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	6892      	ldr	r2, [r2, #8]
 8003f38:	0211      	lsls	r1, r2, #8
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	68d2      	ldr	r2, [r2, #12]
 8003f3e:	0912      	lsrs	r2, r2, #4
 8003f40:	0452      	lsls	r2, r2, #17
 8003f42:	430a      	orrs	r2, r1
 8003f44:	491f      	ldr	r1, [pc, #124]	; (8003fc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	614b      	str	r3, [r1, #20]
 8003f4a:	e011      	b.n	8003f70 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f4c:	4b1d      	ldr	r3, [pc, #116]	; (8003fc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f4e:	695b      	ldr	r3, [r3, #20]
 8003f50:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003f54:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	6892      	ldr	r2, [r2, #8]
 8003f5c:	0211      	lsls	r1, r2, #8
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	6912      	ldr	r2, [r2, #16]
 8003f62:	0852      	lsrs	r2, r2, #1
 8003f64:	3a01      	subs	r2, #1
 8003f66:	0652      	lsls	r2, r2, #25
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	4916      	ldr	r1, [pc, #88]	; (8003fc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003f70:	4b14      	ldr	r3, [pc, #80]	; (8003fc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a13      	ldr	r2, [pc, #76]	; (8003fc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f7a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f7c:	f7fc fe5a 	bl	8000c34 <HAL_GetTick>
 8003f80:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f82:	e009      	b.n	8003f98 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f84:	f7fc fe56 	bl	8000c34 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d902      	bls.n	8003f98 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	73fb      	strb	r3, [r7, #15]
          break;
 8003f96:	e005      	b.n	8003fa4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f98:	4b0a      	ldr	r3, [pc, #40]	; (8003fc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d0ef      	beq.n	8003f84 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003fa4:	7bfb      	ldrb	r3, [r7, #15]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d106      	bne.n	8003fb8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003faa:	4b06      	ldr	r3, [pc, #24]	; (8003fc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fac:	695a      	ldr	r2, [r3, #20]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	4904      	ldr	r1, [pc, #16]	; (8003fc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	40021000 	.word	0x40021000

08003fc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e040      	b.n	800405c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d106      	bne.n	8003ff0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f7fc fce6 	bl	80009bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2224      	movs	r2, #36	; 0x24
 8003ff4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 0201 	bic.w	r2, r2, #1
 8004004:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 f82c 	bl	8004064 <UART_SetConfig>
 800400c:	4603      	mov	r3, r0
 800400e:	2b01      	cmp	r3, #1
 8004010:	d101      	bne.n	8004016 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e022      	b.n	800405c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401a:	2b00      	cmp	r3, #0
 800401c:	d002      	beq.n	8004024 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 fad8 	bl	80045d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	685a      	ldr	r2, [r3, #4]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004032:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	689a      	ldr	r2, [r3, #8]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004042:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f042 0201 	orr.w	r2, r2, #1
 8004052:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 fb5f 	bl	8004718 <UART_CheckIdleState>
 800405a:	4603      	mov	r3, r0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3708      	adds	r7, #8
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004064:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004068:	b08a      	sub	sp, #40	; 0x28
 800406a:	af00      	add	r7, sp, #0
 800406c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800406e:	2300      	movs	r3, #0
 8004070:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	689a      	ldr	r2, [r3, #8]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	431a      	orrs	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	431a      	orrs	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	4313      	orrs	r3, r2
 800408a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	4ba4      	ldr	r3, [pc, #656]	; (8004324 <UART_SetConfig+0x2c0>)
 8004094:	4013      	ands	r3, r2
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	6812      	ldr	r2, [r2, #0]
 800409a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800409c:	430b      	orrs	r3, r1
 800409e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	68da      	ldr	r2, [r3, #12]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	430a      	orrs	r2, r1
 80040b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a99      	ldr	r2, [pc, #612]	; (8004328 <UART_SetConfig+0x2c4>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d004      	beq.n	80040d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040cc:	4313      	orrs	r3, r2
 80040ce:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040e0:	430a      	orrs	r2, r1
 80040e2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a90      	ldr	r2, [pc, #576]	; (800432c <UART_SetConfig+0x2c8>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d126      	bne.n	800413c <UART_SetConfig+0xd8>
 80040ee:	4b90      	ldr	r3, [pc, #576]	; (8004330 <UART_SetConfig+0x2cc>)
 80040f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f4:	f003 0303 	and.w	r3, r3, #3
 80040f8:	2b03      	cmp	r3, #3
 80040fa:	d81b      	bhi.n	8004134 <UART_SetConfig+0xd0>
 80040fc:	a201      	add	r2, pc, #4	; (adr r2, 8004104 <UART_SetConfig+0xa0>)
 80040fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004102:	bf00      	nop
 8004104:	08004115 	.word	0x08004115
 8004108:	08004125 	.word	0x08004125
 800410c:	0800411d 	.word	0x0800411d
 8004110:	0800412d 	.word	0x0800412d
 8004114:	2301      	movs	r3, #1
 8004116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800411a:	e116      	b.n	800434a <UART_SetConfig+0x2e6>
 800411c:	2302      	movs	r3, #2
 800411e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004122:	e112      	b.n	800434a <UART_SetConfig+0x2e6>
 8004124:	2304      	movs	r3, #4
 8004126:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800412a:	e10e      	b.n	800434a <UART_SetConfig+0x2e6>
 800412c:	2308      	movs	r3, #8
 800412e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004132:	e10a      	b.n	800434a <UART_SetConfig+0x2e6>
 8004134:	2310      	movs	r3, #16
 8004136:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800413a:	e106      	b.n	800434a <UART_SetConfig+0x2e6>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a7c      	ldr	r2, [pc, #496]	; (8004334 <UART_SetConfig+0x2d0>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d138      	bne.n	80041b8 <UART_SetConfig+0x154>
 8004146:	4b7a      	ldr	r3, [pc, #488]	; (8004330 <UART_SetConfig+0x2cc>)
 8004148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800414c:	f003 030c 	and.w	r3, r3, #12
 8004150:	2b0c      	cmp	r3, #12
 8004152:	d82d      	bhi.n	80041b0 <UART_SetConfig+0x14c>
 8004154:	a201      	add	r2, pc, #4	; (adr r2, 800415c <UART_SetConfig+0xf8>)
 8004156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800415a:	bf00      	nop
 800415c:	08004191 	.word	0x08004191
 8004160:	080041b1 	.word	0x080041b1
 8004164:	080041b1 	.word	0x080041b1
 8004168:	080041b1 	.word	0x080041b1
 800416c:	080041a1 	.word	0x080041a1
 8004170:	080041b1 	.word	0x080041b1
 8004174:	080041b1 	.word	0x080041b1
 8004178:	080041b1 	.word	0x080041b1
 800417c:	08004199 	.word	0x08004199
 8004180:	080041b1 	.word	0x080041b1
 8004184:	080041b1 	.word	0x080041b1
 8004188:	080041b1 	.word	0x080041b1
 800418c:	080041a9 	.word	0x080041a9
 8004190:	2300      	movs	r3, #0
 8004192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004196:	e0d8      	b.n	800434a <UART_SetConfig+0x2e6>
 8004198:	2302      	movs	r3, #2
 800419a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800419e:	e0d4      	b.n	800434a <UART_SetConfig+0x2e6>
 80041a0:	2304      	movs	r3, #4
 80041a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041a6:	e0d0      	b.n	800434a <UART_SetConfig+0x2e6>
 80041a8:	2308      	movs	r3, #8
 80041aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041ae:	e0cc      	b.n	800434a <UART_SetConfig+0x2e6>
 80041b0:	2310      	movs	r3, #16
 80041b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041b6:	e0c8      	b.n	800434a <UART_SetConfig+0x2e6>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a5e      	ldr	r2, [pc, #376]	; (8004338 <UART_SetConfig+0x2d4>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d125      	bne.n	800420e <UART_SetConfig+0x1aa>
 80041c2:	4b5b      	ldr	r3, [pc, #364]	; (8004330 <UART_SetConfig+0x2cc>)
 80041c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80041cc:	2b30      	cmp	r3, #48	; 0x30
 80041ce:	d016      	beq.n	80041fe <UART_SetConfig+0x19a>
 80041d0:	2b30      	cmp	r3, #48	; 0x30
 80041d2:	d818      	bhi.n	8004206 <UART_SetConfig+0x1a2>
 80041d4:	2b20      	cmp	r3, #32
 80041d6:	d00a      	beq.n	80041ee <UART_SetConfig+0x18a>
 80041d8:	2b20      	cmp	r3, #32
 80041da:	d814      	bhi.n	8004206 <UART_SetConfig+0x1a2>
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d002      	beq.n	80041e6 <UART_SetConfig+0x182>
 80041e0:	2b10      	cmp	r3, #16
 80041e2:	d008      	beq.n	80041f6 <UART_SetConfig+0x192>
 80041e4:	e00f      	b.n	8004206 <UART_SetConfig+0x1a2>
 80041e6:	2300      	movs	r3, #0
 80041e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041ec:	e0ad      	b.n	800434a <UART_SetConfig+0x2e6>
 80041ee:	2302      	movs	r3, #2
 80041f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041f4:	e0a9      	b.n	800434a <UART_SetConfig+0x2e6>
 80041f6:	2304      	movs	r3, #4
 80041f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041fc:	e0a5      	b.n	800434a <UART_SetConfig+0x2e6>
 80041fe:	2308      	movs	r3, #8
 8004200:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004204:	e0a1      	b.n	800434a <UART_SetConfig+0x2e6>
 8004206:	2310      	movs	r3, #16
 8004208:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800420c:	e09d      	b.n	800434a <UART_SetConfig+0x2e6>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a4a      	ldr	r2, [pc, #296]	; (800433c <UART_SetConfig+0x2d8>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d125      	bne.n	8004264 <UART_SetConfig+0x200>
 8004218:	4b45      	ldr	r3, [pc, #276]	; (8004330 <UART_SetConfig+0x2cc>)
 800421a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800421e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004222:	2bc0      	cmp	r3, #192	; 0xc0
 8004224:	d016      	beq.n	8004254 <UART_SetConfig+0x1f0>
 8004226:	2bc0      	cmp	r3, #192	; 0xc0
 8004228:	d818      	bhi.n	800425c <UART_SetConfig+0x1f8>
 800422a:	2b80      	cmp	r3, #128	; 0x80
 800422c:	d00a      	beq.n	8004244 <UART_SetConfig+0x1e0>
 800422e:	2b80      	cmp	r3, #128	; 0x80
 8004230:	d814      	bhi.n	800425c <UART_SetConfig+0x1f8>
 8004232:	2b00      	cmp	r3, #0
 8004234:	d002      	beq.n	800423c <UART_SetConfig+0x1d8>
 8004236:	2b40      	cmp	r3, #64	; 0x40
 8004238:	d008      	beq.n	800424c <UART_SetConfig+0x1e8>
 800423a:	e00f      	b.n	800425c <UART_SetConfig+0x1f8>
 800423c:	2300      	movs	r3, #0
 800423e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004242:	e082      	b.n	800434a <UART_SetConfig+0x2e6>
 8004244:	2302      	movs	r3, #2
 8004246:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800424a:	e07e      	b.n	800434a <UART_SetConfig+0x2e6>
 800424c:	2304      	movs	r3, #4
 800424e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004252:	e07a      	b.n	800434a <UART_SetConfig+0x2e6>
 8004254:	2308      	movs	r3, #8
 8004256:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800425a:	e076      	b.n	800434a <UART_SetConfig+0x2e6>
 800425c:	2310      	movs	r3, #16
 800425e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004262:	e072      	b.n	800434a <UART_SetConfig+0x2e6>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a35      	ldr	r2, [pc, #212]	; (8004340 <UART_SetConfig+0x2dc>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d12a      	bne.n	80042c4 <UART_SetConfig+0x260>
 800426e:	4b30      	ldr	r3, [pc, #192]	; (8004330 <UART_SetConfig+0x2cc>)
 8004270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004274:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004278:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800427c:	d01a      	beq.n	80042b4 <UART_SetConfig+0x250>
 800427e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004282:	d81b      	bhi.n	80042bc <UART_SetConfig+0x258>
 8004284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004288:	d00c      	beq.n	80042a4 <UART_SetConfig+0x240>
 800428a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800428e:	d815      	bhi.n	80042bc <UART_SetConfig+0x258>
 8004290:	2b00      	cmp	r3, #0
 8004292:	d003      	beq.n	800429c <UART_SetConfig+0x238>
 8004294:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004298:	d008      	beq.n	80042ac <UART_SetConfig+0x248>
 800429a:	e00f      	b.n	80042bc <UART_SetConfig+0x258>
 800429c:	2300      	movs	r3, #0
 800429e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042a2:	e052      	b.n	800434a <UART_SetConfig+0x2e6>
 80042a4:	2302      	movs	r3, #2
 80042a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042aa:	e04e      	b.n	800434a <UART_SetConfig+0x2e6>
 80042ac:	2304      	movs	r3, #4
 80042ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042b2:	e04a      	b.n	800434a <UART_SetConfig+0x2e6>
 80042b4:	2308      	movs	r3, #8
 80042b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ba:	e046      	b.n	800434a <UART_SetConfig+0x2e6>
 80042bc:	2310      	movs	r3, #16
 80042be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042c2:	e042      	b.n	800434a <UART_SetConfig+0x2e6>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a17      	ldr	r2, [pc, #92]	; (8004328 <UART_SetConfig+0x2c4>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d13a      	bne.n	8004344 <UART_SetConfig+0x2e0>
 80042ce:	4b18      	ldr	r3, [pc, #96]	; (8004330 <UART_SetConfig+0x2cc>)
 80042d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80042d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042dc:	d01a      	beq.n	8004314 <UART_SetConfig+0x2b0>
 80042de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042e2:	d81b      	bhi.n	800431c <UART_SetConfig+0x2b8>
 80042e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042e8:	d00c      	beq.n	8004304 <UART_SetConfig+0x2a0>
 80042ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042ee:	d815      	bhi.n	800431c <UART_SetConfig+0x2b8>
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d003      	beq.n	80042fc <UART_SetConfig+0x298>
 80042f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042f8:	d008      	beq.n	800430c <UART_SetConfig+0x2a8>
 80042fa:	e00f      	b.n	800431c <UART_SetConfig+0x2b8>
 80042fc:	2300      	movs	r3, #0
 80042fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004302:	e022      	b.n	800434a <UART_SetConfig+0x2e6>
 8004304:	2302      	movs	r3, #2
 8004306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800430a:	e01e      	b.n	800434a <UART_SetConfig+0x2e6>
 800430c:	2304      	movs	r3, #4
 800430e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004312:	e01a      	b.n	800434a <UART_SetConfig+0x2e6>
 8004314:	2308      	movs	r3, #8
 8004316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800431a:	e016      	b.n	800434a <UART_SetConfig+0x2e6>
 800431c:	2310      	movs	r3, #16
 800431e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004322:	e012      	b.n	800434a <UART_SetConfig+0x2e6>
 8004324:	efff69f3 	.word	0xefff69f3
 8004328:	40008000 	.word	0x40008000
 800432c:	40013800 	.word	0x40013800
 8004330:	40021000 	.word	0x40021000
 8004334:	40004400 	.word	0x40004400
 8004338:	40004800 	.word	0x40004800
 800433c:	40004c00 	.word	0x40004c00
 8004340:	40005000 	.word	0x40005000
 8004344:	2310      	movs	r3, #16
 8004346:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a9f      	ldr	r2, [pc, #636]	; (80045cc <UART_SetConfig+0x568>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d17a      	bne.n	800444a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004354:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004358:	2b08      	cmp	r3, #8
 800435a:	d824      	bhi.n	80043a6 <UART_SetConfig+0x342>
 800435c:	a201      	add	r2, pc, #4	; (adr r2, 8004364 <UART_SetConfig+0x300>)
 800435e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004362:	bf00      	nop
 8004364:	08004389 	.word	0x08004389
 8004368:	080043a7 	.word	0x080043a7
 800436c:	08004391 	.word	0x08004391
 8004370:	080043a7 	.word	0x080043a7
 8004374:	08004397 	.word	0x08004397
 8004378:	080043a7 	.word	0x080043a7
 800437c:	080043a7 	.word	0x080043a7
 8004380:	080043a7 	.word	0x080043a7
 8004384:	0800439f 	.word	0x0800439f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004388:	f7ff f8d6 	bl	8003538 <HAL_RCC_GetPCLK1Freq>
 800438c:	61f8      	str	r0, [r7, #28]
        break;
 800438e:	e010      	b.n	80043b2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004390:	4b8f      	ldr	r3, [pc, #572]	; (80045d0 <UART_SetConfig+0x56c>)
 8004392:	61fb      	str	r3, [r7, #28]
        break;
 8004394:	e00d      	b.n	80043b2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004396:	f7ff f837 	bl	8003408 <HAL_RCC_GetSysClockFreq>
 800439a:	61f8      	str	r0, [r7, #28]
        break;
 800439c:	e009      	b.n	80043b2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800439e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043a2:	61fb      	str	r3, [r7, #28]
        break;
 80043a4:	e005      	b.n	80043b2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80043a6:	2300      	movs	r3, #0
 80043a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80043b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f000 80fb 	beq.w	80045b0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	685a      	ldr	r2, [r3, #4]
 80043be:	4613      	mov	r3, r2
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	4413      	add	r3, r2
 80043c4:	69fa      	ldr	r2, [r7, #28]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d305      	bcc.n	80043d6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043d0:	69fa      	ldr	r2, [r7, #28]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d903      	bls.n	80043de <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80043dc:	e0e8      	b.n	80045b0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	2200      	movs	r2, #0
 80043e2:	461c      	mov	r4, r3
 80043e4:	4615      	mov	r5, r2
 80043e6:	f04f 0200 	mov.w	r2, #0
 80043ea:	f04f 0300 	mov.w	r3, #0
 80043ee:	022b      	lsls	r3, r5, #8
 80043f0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80043f4:	0222      	lsls	r2, r4, #8
 80043f6:	68f9      	ldr	r1, [r7, #12]
 80043f8:	6849      	ldr	r1, [r1, #4]
 80043fa:	0849      	lsrs	r1, r1, #1
 80043fc:	2000      	movs	r0, #0
 80043fe:	4688      	mov	r8, r1
 8004400:	4681      	mov	r9, r0
 8004402:	eb12 0a08 	adds.w	sl, r2, r8
 8004406:	eb43 0b09 	adc.w	fp, r3, r9
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	603b      	str	r3, [r7, #0]
 8004412:	607a      	str	r2, [r7, #4]
 8004414:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004418:	4650      	mov	r0, sl
 800441a:	4659      	mov	r1, fp
 800441c:	f7fb fed4 	bl	80001c8 <__aeabi_uldivmod>
 8004420:	4602      	mov	r2, r0
 8004422:	460b      	mov	r3, r1
 8004424:	4613      	mov	r3, r2
 8004426:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800442e:	d308      	bcc.n	8004442 <UART_SetConfig+0x3de>
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004436:	d204      	bcs.n	8004442 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	69ba      	ldr	r2, [r7, #24]
 800443e:	60da      	str	r2, [r3, #12]
 8004440:	e0b6      	b.n	80045b0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004448:	e0b2      	b.n	80045b0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	69db      	ldr	r3, [r3, #28]
 800444e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004452:	d15e      	bne.n	8004512 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004454:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004458:	2b08      	cmp	r3, #8
 800445a:	d828      	bhi.n	80044ae <UART_SetConfig+0x44a>
 800445c:	a201      	add	r2, pc, #4	; (adr r2, 8004464 <UART_SetConfig+0x400>)
 800445e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004462:	bf00      	nop
 8004464:	08004489 	.word	0x08004489
 8004468:	08004491 	.word	0x08004491
 800446c:	08004499 	.word	0x08004499
 8004470:	080044af 	.word	0x080044af
 8004474:	0800449f 	.word	0x0800449f
 8004478:	080044af 	.word	0x080044af
 800447c:	080044af 	.word	0x080044af
 8004480:	080044af 	.word	0x080044af
 8004484:	080044a7 	.word	0x080044a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004488:	f7ff f856 	bl	8003538 <HAL_RCC_GetPCLK1Freq>
 800448c:	61f8      	str	r0, [r7, #28]
        break;
 800448e:	e014      	b.n	80044ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004490:	f7ff f868 	bl	8003564 <HAL_RCC_GetPCLK2Freq>
 8004494:	61f8      	str	r0, [r7, #28]
        break;
 8004496:	e010      	b.n	80044ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004498:	4b4d      	ldr	r3, [pc, #308]	; (80045d0 <UART_SetConfig+0x56c>)
 800449a:	61fb      	str	r3, [r7, #28]
        break;
 800449c:	e00d      	b.n	80044ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800449e:	f7fe ffb3 	bl	8003408 <HAL_RCC_GetSysClockFreq>
 80044a2:	61f8      	str	r0, [r7, #28]
        break;
 80044a4:	e009      	b.n	80044ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044aa:	61fb      	str	r3, [r7, #28]
        break;
 80044ac:	e005      	b.n	80044ba <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80044ae:	2300      	movs	r3, #0
 80044b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80044b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d077      	beq.n	80045b0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	005a      	lsls	r2, r3, #1
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	085b      	lsrs	r3, r3, #1
 80044ca:	441a      	add	r2, r3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	2b0f      	cmp	r3, #15
 80044da:	d916      	bls.n	800450a <UART_SetConfig+0x4a6>
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044e2:	d212      	bcs.n	800450a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	f023 030f 	bic.w	r3, r3, #15
 80044ec:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	085b      	lsrs	r3, r3, #1
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	f003 0307 	and.w	r3, r3, #7
 80044f8:	b29a      	uxth	r2, r3
 80044fa:	8afb      	ldrh	r3, [r7, #22]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	8afa      	ldrh	r2, [r7, #22]
 8004506:	60da      	str	r2, [r3, #12]
 8004508:	e052      	b.n	80045b0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004510:	e04e      	b.n	80045b0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004512:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004516:	2b08      	cmp	r3, #8
 8004518:	d827      	bhi.n	800456a <UART_SetConfig+0x506>
 800451a:	a201      	add	r2, pc, #4	; (adr r2, 8004520 <UART_SetConfig+0x4bc>)
 800451c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004520:	08004545 	.word	0x08004545
 8004524:	0800454d 	.word	0x0800454d
 8004528:	08004555 	.word	0x08004555
 800452c:	0800456b 	.word	0x0800456b
 8004530:	0800455b 	.word	0x0800455b
 8004534:	0800456b 	.word	0x0800456b
 8004538:	0800456b 	.word	0x0800456b
 800453c:	0800456b 	.word	0x0800456b
 8004540:	08004563 	.word	0x08004563
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004544:	f7fe fff8 	bl	8003538 <HAL_RCC_GetPCLK1Freq>
 8004548:	61f8      	str	r0, [r7, #28]
        break;
 800454a:	e014      	b.n	8004576 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800454c:	f7ff f80a 	bl	8003564 <HAL_RCC_GetPCLK2Freq>
 8004550:	61f8      	str	r0, [r7, #28]
        break;
 8004552:	e010      	b.n	8004576 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004554:	4b1e      	ldr	r3, [pc, #120]	; (80045d0 <UART_SetConfig+0x56c>)
 8004556:	61fb      	str	r3, [r7, #28]
        break;
 8004558:	e00d      	b.n	8004576 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800455a:	f7fe ff55 	bl	8003408 <HAL_RCC_GetSysClockFreq>
 800455e:	61f8      	str	r0, [r7, #28]
        break;
 8004560:	e009      	b.n	8004576 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004562:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004566:	61fb      	str	r3, [r7, #28]
        break;
 8004568:	e005      	b.n	8004576 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800456a:	2300      	movs	r3, #0
 800456c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004574:	bf00      	nop
    }

    if (pclk != 0U)
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d019      	beq.n	80045b0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	085a      	lsrs	r2, r3, #1
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	441a      	add	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	fbb2 f3f3 	udiv	r3, r2, r3
 800458e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	2b0f      	cmp	r3, #15
 8004594:	d909      	bls.n	80045aa <UART_SetConfig+0x546>
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800459c:	d205      	bcs.n	80045aa <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	60da      	str	r2, [r3, #12]
 80045a8:	e002      	b.n	80045b0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80045bc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3728      	adds	r7, #40	; 0x28
 80045c4:	46bd      	mov	sp, r7
 80045c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045ca:	bf00      	nop
 80045cc:	40008000 	.word	0x40008000
 80045d0:	00f42400 	.word	0x00f42400

080045d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00a      	beq.n	80045fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	430a      	orrs	r2, r1
 80045fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00a      	beq.n	8004620 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	430a      	orrs	r2, r1
 800461e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004624:	f003 0304 	and.w	r3, r3, #4
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00a      	beq.n	8004642 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	430a      	orrs	r2, r1
 8004640:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004646:	f003 0308 	and.w	r3, r3, #8
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00a      	beq.n	8004664 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	430a      	orrs	r2, r1
 8004662:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004668:	f003 0310 	and.w	r3, r3, #16
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00a      	beq.n	8004686 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	430a      	orrs	r2, r1
 8004684:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468a:	f003 0320 	and.w	r3, r3, #32
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00a      	beq.n	80046a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	430a      	orrs	r2, r1
 80046a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d01a      	beq.n	80046ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046d2:	d10a      	bne.n	80046ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	430a      	orrs	r2, r1
 80046e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00a      	beq.n	800470c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	430a      	orrs	r2, r1
 800470a:	605a      	str	r2, [r3, #4]
  }
}
 800470c:	bf00      	nop
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af02      	add	r7, sp, #8
 800471e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004728:	f7fc fa84 	bl	8000c34 <HAL_GetTick>
 800472c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0308 	and.w	r3, r3, #8
 8004738:	2b08      	cmp	r3, #8
 800473a:	d10e      	bne.n	800475a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800473c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004740:	9300      	str	r3, [sp, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 f82d 	bl	80047aa <UART_WaitOnFlagUntilTimeout>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d001      	beq.n	800475a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e023      	b.n	80047a2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0304 	and.w	r3, r3, #4
 8004764:	2b04      	cmp	r3, #4
 8004766:	d10e      	bne.n	8004786 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004768:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 f817 	bl	80047aa <UART_WaitOnFlagUntilTimeout>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e00d      	b.n	80047a2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2220      	movs	r2, #32
 800478a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2220      	movs	r2, #32
 8004790:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b09c      	sub	sp, #112	; 0x70
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	60f8      	str	r0, [r7, #12]
 80047b2:	60b9      	str	r1, [r7, #8]
 80047b4:	603b      	str	r3, [r7, #0]
 80047b6:	4613      	mov	r3, r2
 80047b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047ba:	e0a5      	b.n	8004908 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c2:	f000 80a1 	beq.w	8004908 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047c6:	f7fc fa35 	bl	8000c34 <HAL_GetTick>
 80047ca:	4602      	mov	r2, r0
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d302      	bcc.n	80047dc <UART_WaitOnFlagUntilTimeout+0x32>
 80047d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d13e      	bne.n	800485a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047e4:	e853 3f00 	ldrex	r3, [r3]
 80047e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80047ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047f0:	667b      	str	r3, [r7, #100]	; 0x64
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	461a      	mov	r2, r3
 80047f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047fc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004800:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004802:	e841 2300 	strex	r3, r2, [r1]
 8004806:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1e6      	bne.n	80047dc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	3308      	adds	r3, #8
 8004814:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004818:	e853 3f00 	ldrex	r3, [r3]
 800481c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800481e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004820:	f023 0301 	bic.w	r3, r3, #1
 8004824:	663b      	str	r3, [r7, #96]	; 0x60
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	3308      	adds	r3, #8
 800482c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800482e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004830:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004832:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004834:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004836:	e841 2300 	strex	r3, r2, [r1]
 800483a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800483c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1e5      	bne.n	800480e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2220      	movs	r2, #32
 8004846:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2220      	movs	r2, #32
 800484c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e067      	b.n	800492a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0304 	and.w	r3, r3, #4
 8004864:	2b00      	cmp	r3, #0
 8004866:	d04f      	beq.n	8004908 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	69db      	ldr	r3, [r3, #28]
 800486e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004872:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004876:	d147      	bne.n	8004908 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004880:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488a:	e853 3f00 	ldrex	r3, [r3]
 800488e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004892:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004896:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	461a      	mov	r2, r3
 800489e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048a0:	637b      	str	r3, [r7, #52]	; 0x34
 80048a2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048a8:	e841 2300 	strex	r3, r2, [r1]
 80048ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80048ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1e6      	bne.n	8004882 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	3308      	adds	r3, #8
 80048ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	e853 3f00 	ldrex	r3, [r3]
 80048c2:	613b      	str	r3, [r7, #16]
   return(result);
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	f023 0301 	bic.w	r3, r3, #1
 80048ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	3308      	adds	r3, #8
 80048d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80048d4:	623a      	str	r2, [r7, #32]
 80048d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d8:	69f9      	ldr	r1, [r7, #28]
 80048da:	6a3a      	ldr	r2, [r7, #32]
 80048dc:	e841 2300 	strex	r3, r2, [r1]
 80048e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1e5      	bne.n	80048b4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2220      	movs	r2, #32
 80048ec:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2220      	movs	r2, #32
 80048f2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2220      	movs	r2, #32
 80048f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e010      	b.n	800492a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	69da      	ldr	r2, [r3, #28]
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	4013      	ands	r3, r2
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	429a      	cmp	r2, r3
 8004916:	bf0c      	ite	eq
 8004918:	2301      	moveq	r3, #1
 800491a:	2300      	movne	r3, #0
 800491c:	b2db      	uxtb	r3, r3
 800491e:	461a      	mov	r2, r3
 8004920:	79fb      	ldrb	r3, [r7, #7]
 8004922:	429a      	cmp	r2, r3
 8004924:	f43f af4a 	beq.w	80047bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3770      	adds	r7, #112	; 0x70
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
	...

08004934 <__libc_init_array>:
 8004934:	b570      	push	{r4, r5, r6, lr}
 8004936:	4d0d      	ldr	r5, [pc, #52]	; (800496c <__libc_init_array+0x38>)
 8004938:	4c0d      	ldr	r4, [pc, #52]	; (8004970 <__libc_init_array+0x3c>)
 800493a:	1b64      	subs	r4, r4, r5
 800493c:	10a4      	asrs	r4, r4, #2
 800493e:	2600      	movs	r6, #0
 8004940:	42a6      	cmp	r6, r4
 8004942:	d109      	bne.n	8004958 <__libc_init_array+0x24>
 8004944:	4d0b      	ldr	r5, [pc, #44]	; (8004974 <__libc_init_array+0x40>)
 8004946:	4c0c      	ldr	r4, [pc, #48]	; (8004978 <__libc_init_array+0x44>)
 8004948:	f000 f820 	bl	800498c <_init>
 800494c:	1b64      	subs	r4, r4, r5
 800494e:	10a4      	asrs	r4, r4, #2
 8004950:	2600      	movs	r6, #0
 8004952:	42a6      	cmp	r6, r4
 8004954:	d105      	bne.n	8004962 <__libc_init_array+0x2e>
 8004956:	bd70      	pop	{r4, r5, r6, pc}
 8004958:	f855 3b04 	ldr.w	r3, [r5], #4
 800495c:	4798      	blx	r3
 800495e:	3601      	adds	r6, #1
 8004960:	e7ee      	b.n	8004940 <__libc_init_array+0xc>
 8004962:	f855 3b04 	ldr.w	r3, [r5], #4
 8004966:	4798      	blx	r3
 8004968:	3601      	adds	r6, #1
 800496a:	e7f2      	b.n	8004952 <__libc_init_array+0x1e>
 800496c:	080049f4 	.word	0x080049f4
 8004970:	080049f4 	.word	0x080049f4
 8004974:	080049f4 	.word	0x080049f4
 8004978:	080049f8 	.word	0x080049f8

0800497c <memset>:
 800497c:	4402      	add	r2, r0
 800497e:	4603      	mov	r3, r0
 8004980:	4293      	cmp	r3, r2
 8004982:	d100      	bne.n	8004986 <memset+0xa>
 8004984:	4770      	bx	lr
 8004986:	f803 1b01 	strb.w	r1, [r3], #1
 800498a:	e7f9      	b.n	8004980 <memset+0x4>

0800498c <_init>:
 800498c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800498e:	bf00      	nop
 8004990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004992:	bc08      	pop	{r3}
 8004994:	469e      	mov	lr, r3
 8004996:	4770      	bx	lr

08004998 <_fini>:
 8004998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800499a:	bf00      	nop
 800499c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800499e:	bc08      	pop	{r3}
 80049a0:	469e      	mov	lr, r3
 80049a2:	4770      	bx	lr
