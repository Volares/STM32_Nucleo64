
nucleo-l476rg-DMA_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003428  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  080035b0  080035b0  000135b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036b4  080036b4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080036b4  080036b4  000136b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080036bc  080036bc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036bc  080036bc  000136bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036c0  080036c0  000136c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080036c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000000c  080036d0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  080036d0  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b508  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019c5  00000000  00000000  0002b544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000930  00000000  00000000  0002cf10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000898  00000000  00000000  0002d840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000259e2  00000000  00000000  0002e0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b1b0  00000000  00000000  00053aba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e880e  00000000  00000000  0005ec6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00147478  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024d8  00000000  00000000  001474c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003598 	.word	0x08003598

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003598 	.word	0x08003598

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b5b0      	push	{r4, r5, r7, lr}
 80004de:	b0b0      	sub	sp, #192	; 0xc0
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char msg[] = "Long boat holystone pirate log driver hulk nipperkin cog. "\
 80004e2:	4a19      	ldr	r2, [pc, #100]	; (8000548 <main+0x6c>)
 80004e4:	1d3b      	adds	r3, r7, #4
 80004e6:	4611      	mov	r1, r2
 80004e8:	22bc      	movs	r2, #188	; 0xbc
 80004ea:	4618      	mov	r0, r3
 80004ec:	f003 f83e 	bl	800356c <memcpy>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f0:	f000 fa74 	bl	80009dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f4:	f000 f830 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f8:	f000 f8ce 	bl	8000698 <MX_GPIO_Init>
  MX_DMA_Init();
 80004fc:	f000 f8ae 	bl	800065c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000500:	f000 f87c 	bl	80005fc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_DMA_RegisterCallback(&hdma_usart2_tx, HAL_DMA_XFER_CPLT_CB_ID, &DMATRANSFERComplete);
 8000504:	4a11      	ldr	r2, [pc, #68]	; (800054c <main+0x70>)
 8000506:	2100      	movs	r1, #0
 8000508:	4811      	ldr	r0, [pc, #68]	; (8000550 <main+0x74>)
 800050a:	f000 fde1 	bl	80010d0 <HAL_DMA_RegisterCallback>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  huart2.Instance->CR3 |= USART_CR3_DMAT;
 800050e:	4b11      	ldr	r3, [pc, #68]	; (8000554 <main+0x78>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	689a      	ldr	r2, [r3, #8]
 8000514:	4b0f      	ldr	r3, [pc, #60]	; (8000554 <main+0x78>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800051c:	609a      	str	r2, [r3, #8]
	  HAL_DMA_Start_IT(&hdma_usart2_tx, (uint32_t)msg, (uint32_t)&huart2.Instance->TDR, strlen(msg));
 800051e:	1d3c      	adds	r4, r7, #4
 8000520:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <main+0x78>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	3328      	adds	r3, #40	; 0x28
 8000526:	461d      	mov	r5, r3
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	4618      	mov	r0, r3
 800052c:	f7ff fe4c 	bl	80001c8 <strlen>
 8000530:	4603      	mov	r3, r0
 8000532:	462a      	mov	r2, r5
 8000534:	4621      	mov	r1, r4
 8000536:	4806      	ldr	r0, [pc, #24]	; (8000550 <main+0x74>)
 8000538:	f000 fcba 	bl	8000eb0 <HAL_DMA_Start_IT>

	  HAL_Delay(1000);
 800053c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000540:	f000 fac8 	bl	8000ad4 <HAL_Delay>
	  huart2.Instance->CR3 |= USART_CR3_DMAT;
 8000544:	e7e3      	b.n	800050e <main+0x32>
 8000546:	bf00      	nop
 8000548:	080035b0 	.word	0x080035b0
 800054c:	08000765 	.word	0x08000765
 8000550:	200000ac 	.word	0x200000ac
 8000554:	20000028 	.word	0x20000028

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b096      	sub	sp, #88	; 0x58
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0314 	add.w	r3, r7, #20
 8000562:	2244      	movs	r2, #68	; 0x44
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f003 f80e 	bl	8003588 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	463b      	mov	r3, r7
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	605a      	str	r2, [r3, #4]
 8000574:	609a      	str	r2, [r3, #8]
 8000576:	60da      	str	r2, [r3, #12]
 8000578:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800057a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800057e:	f001 f809 	bl	8001594 <HAL_PWREx_ControlVoltageScaling>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000588:	f000 f904 	bl	8000794 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800058c:	2302      	movs	r3, #2
 800058e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000590:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000594:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000596:	2310      	movs	r3, #16
 8000598:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059a:	2302      	movs	r3, #2
 800059c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800059e:	2302      	movs	r3, #2
 80005a0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005a2:	2301      	movs	r3, #1
 80005a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005a6:	230a      	movs	r3, #10
 80005a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005aa:	2307      	movs	r3, #7
 80005ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005ae:	2302      	movs	r3, #2
 80005b0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005b2:	2302      	movs	r3, #2
 80005b4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	4618      	mov	r0, r3
 80005bc:	f001 f840 	bl	8001640 <HAL_RCC_OscConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005c6:	f000 f8e5 	bl	8000794 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ca:	230f      	movs	r3, #15
 80005cc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ce:	2303      	movs	r3, #3
 80005d0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005de:	463b      	mov	r3, r7
 80005e0:	2104      	movs	r1, #4
 80005e2:	4618      	mov	r0, r3
 80005e4:	f001 fc08 	bl	8001df8 <HAL_RCC_ClockConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005ee:	f000 f8d1 	bl	8000794 <Error_Handler>
  }
}
 80005f2:	bf00      	nop
 80005f4:	3758      	adds	r7, #88	; 0x58
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
	...

080005fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000600:	4b14      	ldr	r3, [pc, #80]	; (8000654 <MX_USART2_UART_Init+0x58>)
 8000602:	4a15      	ldr	r2, [pc, #84]	; (8000658 <MX_USART2_UART_Init+0x5c>)
 8000604:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000606:	4b13      	ldr	r3, [pc, #76]	; (8000654 <MX_USART2_UART_Init+0x58>)
 8000608:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800060c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800060e:	4b11      	ldr	r3, [pc, #68]	; (8000654 <MX_USART2_UART_Init+0x58>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000614:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <MX_USART2_UART_Init+0x58>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <MX_USART2_UART_Init+0x58>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <MX_USART2_UART_Init+0x58>)
 8000622:	220c      	movs	r2, #12
 8000624:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000626:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <MX_USART2_UART_Init+0x58>)
 8000628:	2200      	movs	r2, #0
 800062a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800062c:	4b09      	ldr	r3, [pc, #36]	; (8000654 <MX_USART2_UART_Init+0x58>)
 800062e:	2200      	movs	r2, #0
 8000630:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000632:	4b08      	ldr	r3, [pc, #32]	; (8000654 <MX_USART2_UART_Init+0x58>)
 8000634:	2200      	movs	r2, #0
 8000636:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <MX_USART2_UART_Init+0x58>)
 800063a:	2200      	movs	r2, #0
 800063c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800063e:	4805      	ldr	r0, [pc, #20]	; (8000654 <MX_USART2_UART_Init+0x58>)
 8000640:	f002 faba 	bl	8002bb8 <HAL_UART_Init>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800064a:	f000 f8a3 	bl	8000794 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000028 	.word	0x20000028
 8000658:	40004400 	.word	0x40004400

0800065c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000662:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <MX_DMA_Init+0x38>)
 8000664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000666:	4a0b      	ldr	r2, [pc, #44]	; (8000694 <MX_DMA_Init+0x38>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6493      	str	r3, [r2, #72]	; 0x48
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <MX_DMA_Init+0x38>)
 8000670:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800067a:	2200      	movs	r2, #0
 800067c:	2100      	movs	r1, #0
 800067e:	2011      	movs	r0, #17
 8000680:	f000 fb27 	bl	8000cd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000684:	2011      	movs	r0, #17
 8000686:	f000 fb40 	bl	8000d0a <HAL_NVIC_EnableIRQ>

}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40021000 	.word	0x40021000

08000698 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08a      	sub	sp, #40	; 0x28
 800069c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
 80006ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ae:	4b2b      	ldr	r3, [pc, #172]	; (800075c <MX_GPIO_Init+0xc4>)
 80006b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b2:	4a2a      	ldr	r2, [pc, #168]	; (800075c <MX_GPIO_Init+0xc4>)
 80006b4:	f043 0304 	orr.w	r3, r3, #4
 80006b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ba:	4b28      	ldr	r3, [pc, #160]	; (800075c <MX_GPIO_Init+0xc4>)
 80006bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006be:	f003 0304 	and.w	r3, r3, #4
 80006c2:	613b      	str	r3, [r7, #16]
 80006c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006c6:	4b25      	ldr	r3, [pc, #148]	; (800075c <MX_GPIO_Init+0xc4>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ca:	4a24      	ldr	r2, [pc, #144]	; (800075c <MX_GPIO_Init+0xc4>)
 80006cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006d2:	4b22      	ldr	r3, [pc, #136]	; (800075c <MX_GPIO_Init+0xc4>)
 80006d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006de:	4b1f      	ldr	r3, [pc, #124]	; (800075c <MX_GPIO_Init+0xc4>)
 80006e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e2:	4a1e      	ldr	r2, [pc, #120]	; (800075c <MX_GPIO_Init+0xc4>)
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ea:	4b1c      	ldr	r3, [pc, #112]	; (800075c <MX_GPIO_Init+0xc4>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f6:	4b19      	ldr	r3, [pc, #100]	; (800075c <MX_GPIO_Init+0xc4>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fa:	4a18      	ldr	r2, [pc, #96]	; (800075c <MX_GPIO_Init+0xc4>)
 80006fc:	f043 0302 	orr.w	r3, r3, #2
 8000700:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000702:	4b16      	ldr	r3, [pc, #88]	; (800075c <MX_GPIO_Init+0xc4>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000706:	f003 0302 	and.w	r3, r3, #2
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	2120      	movs	r1, #32
 8000712:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000716:	f000 fefd 	bl	8001514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800071a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800071e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000720:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000724:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	4619      	mov	r1, r3
 8000730:	480b      	ldr	r0, [pc, #44]	; (8000760 <MX_GPIO_Init+0xc8>)
 8000732:	f000 fd45 	bl	80011c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000736:	2320      	movs	r3, #32
 8000738:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073a:	2301      	movs	r3, #1
 800073c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	2300      	movs	r3, #0
 8000740:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000742:	2300      	movs	r3, #0
 8000744:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000746:	f107 0314 	add.w	r3, r7, #20
 800074a:	4619      	mov	r1, r3
 800074c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000750:	f000 fd36 	bl	80011c0 <HAL_GPIO_Init>

}
 8000754:	bf00      	nop
 8000756:	3728      	adds	r7, #40	; 0x28
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40021000 	.word	0x40021000
 8000760:	48000800 	.word	0x48000800

08000764 <DMATRANSFERComplete>:

/* USER CODE BEGIN 4 */
void DMATRANSFERComplete(DMA_HandleTypeDef *hdma)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	// Disable UART DMA mode
	huart2.Instance->CR3 &= ~USART_CR3_DMAT;
 800076c:	4b08      	ldr	r3, [pc, #32]	; (8000790 <DMATRANSFERComplete+0x2c>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	689a      	ldr	r2, [r3, #8]
 8000772:	4b07      	ldr	r3, [pc, #28]	; (8000790 <DMATRANSFERComplete+0x2c>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800077a:	609a      	str	r2, [r3, #8]

	// Toggle LD2
	HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 800077c:	2120      	movs	r1, #32
 800077e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000782:	f000 fedf 	bl	8001544 <HAL_GPIO_TogglePin>
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000028 	.word	0x20000028

08000794 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000798:	b672      	cpsid	i
}
 800079a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800079c:	e7fe      	b.n	800079c <Error_Handler+0x8>
	...

080007a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a6:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <HAL_MspInit+0x44>)
 80007a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007aa:	4a0e      	ldr	r2, [pc, #56]	; (80007e4 <HAL_MspInit+0x44>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6613      	str	r3, [r2, #96]	; 0x60
 80007b2:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <HAL_MspInit+0x44>)
 80007b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007be:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <HAL_MspInit+0x44>)
 80007c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007c2:	4a08      	ldr	r2, [pc, #32]	; (80007e4 <HAL_MspInit+0x44>)
 80007c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c8:	6593      	str	r3, [r2, #88]	; 0x58
 80007ca:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <HAL_MspInit+0x44>)
 80007cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d6:	bf00      	nop
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	40021000 	.word	0x40021000

080007e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b0ac      	sub	sp, #176	; 0xb0
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
 80007fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	2288      	movs	r2, #136	; 0x88
 8000806:	2100      	movs	r1, #0
 8000808:	4618      	mov	r0, r3
 800080a:	f002 febd 	bl	8003588 <memset>
  if(huart->Instance==USART2)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4a36      	ldr	r2, [pc, #216]	; (80008ec <HAL_UART_MspInit+0x104>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d164      	bne.n	80008e2 <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000818:	2302      	movs	r3, #2
 800081a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800081c:	2300      	movs	r3, #0
 800081e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	4618      	mov	r0, r3
 8000826:	f001 fd0b 	bl	8002240 <HAL_RCCEx_PeriphCLKConfig>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000830:	f7ff ffb0 	bl	8000794 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000834:	4b2e      	ldr	r3, [pc, #184]	; (80008f0 <HAL_UART_MspInit+0x108>)
 8000836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000838:	4a2d      	ldr	r2, [pc, #180]	; (80008f0 <HAL_UART_MspInit+0x108>)
 800083a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800083e:	6593      	str	r3, [r2, #88]	; 0x58
 8000840:	4b2b      	ldr	r3, [pc, #172]	; (80008f0 <HAL_UART_MspInit+0x108>)
 8000842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000848:	613b      	str	r3, [r7, #16]
 800084a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800084c:	4b28      	ldr	r3, [pc, #160]	; (80008f0 <HAL_UART_MspInit+0x108>)
 800084e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000850:	4a27      	ldr	r2, [pc, #156]	; (80008f0 <HAL_UART_MspInit+0x108>)
 8000852:	f043 0301 	orr.w	r3, r3, #1
 8000856:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000858:	4b25      	ldr	r3, [pc, #148]	; (80008f0 <HAL_UART_MspInit+0x108>)
 800085a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085c:	f003 0301 	and.w	r3, r3, #1
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000864:	230c      	movs	r3, #12
 8000866:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086a:	2302      	movs	r3, #2
 800086c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000876:	2303      	movs	r3, #3
 8000878:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800087c:	2307      	movs	r3, #7
 800087e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000882:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000886:	4619      	mov	r1, r3
 8000888:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800088c:	f000 fc98 	bl	80011c0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000890:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <HAL_UART_MspInit+0x10c>)
 8000892:	4a19      	ldr	r2, [pc, #100]	; (80008f8 <HAL_UART_MspInit+0x110>)
 8000894:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8000896:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <HAL_UART_MspInit+0x10c>)
 8000898:	2202      	movs	r2, #2
 800089a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800089c:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <HAL_UART_MspInit+0x10c>)
 800089e:	2210      	movs	r2, #16
 80008a0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008a2:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <HAL_UART_MspInit+0x10c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80008a8:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <HAL_UART_MspInit+0x10c>)
 80008aa:	2280      	movs	r2, #128	; 0x80
 80008ac:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <HAL_UART_MspInit+0x10c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008b4:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <HAL_UART_MspInit+0x10c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <HAL_UART_MspInit+0x10c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <HAL_UART_MspInit+0x10c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80008c6:	480b      	ldr	r0, [pc, #44]	; (80008f4 <HAL_UART_MspInit+0x10c>)
 80008c8:	f000 fa3a 	bl	8000d40 <HAL_DMA_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 80008d2:	f7ff ff5f 	bl	8000794 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4a06      	ldr	r2, [pc, #24]	; (80008f4 <HAL_UART_MspInit+0x10c>)
 80008da:	66da      	str	r2, [r3, #108]	; 0x6c
 80008dc:	4a05      	ldr	r2, [pc, #20]	; (80008f4 <HAL_UART_MspInit+0x10c>)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008e2:	bf00      	nop
 80008e4:	37b0      	adds	r7, #176	; 0xb0
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40004400 	.word	0x40004400
 80008f0:	40021000 	.word	0x40021000
 80008f4:	200000ac 	.word	0x200000ac
 80008f8:	40020080 	.word	0x40020080

080008fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <NMI_Handler+0x4>

08000902 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000906:	e7fe      	b.n	8000906 <HardFault_Handler+0x4>

08000908 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800090c:	e7fe      	b.n	800090c <MemManage_Handler+0x4>

0800090e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000912:	e7fe      	b.n	8000912 <BusFault_Handler+0x4>

08000914 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <UsageFault_Handler+0x4>

0800091a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr

08000936 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000948:	f000 f8a4 	bl	8000a94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}

08000950 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000954:	4802      	ldr	r0, [pc, #8]	; (8000960 <DMA1_Channel7_IRQHandler+0x10>)
 8000956:	f000 fb0b 	bl	8000f70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	200000ac 	.word	0x200000ac

08000964 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <SystemInit+0x20>)
 800096a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800096e:	4a05      	ldr	r2, [pc, #20]	; (8000984 <SystemInit+0x20>)
 8000970:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000974:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	e000ed00 	.word	0xe000ed00

08000988 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000988:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009c0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800098c:	f7ff ffea 	bl	8000964 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000990:	480c      	ldr	r0, [pc, #48]	; (80009c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000992:	490d      	ldr	r1, [pc, #52]	; (80009c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000994:	4a0d      	ldr	r2, [pc, #52]	; (80009cc <LoopForever+0xe>)
  movs r3, #0
 8000996:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000998:	e002      	b.n	80009a0 <LoopCopyDataInit>

0800099a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800099a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800099c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800099e:	3304      	adds	r3, #4

080009a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009a4:	d3f9      	bcc.n	800099a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009a6:	4a0a      	ldr	r2, [pc, #40]	; (80009d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009a8:	4c0a      	ldr	r4, [pc, #40]	; (80009d4 <LoopForever+0x16>)
  movs r3, #0
 80009aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009ac:	e001      	b.n	80009b2 <LoopFillZerobss>

080009ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b0:	3204      	adds	r2, #4

080009b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009b4:	d3fb      	bcc.n	80009ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009b6:	f002 fdb5 	bl	8003524 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009ba:	f7ff fd8f 	bl	80004dc <main>

080009be <LoopForever>:

LoopForever:
    b LoopForever
 80009be:	e7fe      	b.n	80009be <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009c0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80009c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009cc:	080036c4 	.word	0x080036c4
  ldr r2, =_sbss
 80009d0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009d4:	200000f8 	.word	0x200000f8

080009d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009d8:	e7fe      	b.n	80009d8 <ADC1_2_IRQHandler>
	...

080009dc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009e2:	2300      	movs	r3, #0
 80009e4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009e6:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <HAL_Init+0x3c>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a0b      	ldr	r2, [pc, #44]	; (8000a18 <HAL_Init+0x3c>)
 80009ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009f0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f2:	2003      	movs	r0, #3
 80009f4:	f000 f962 	bl	8000cbc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009f8:	2000      	movs	r0, #0
 80009fa:	f000 f80f 	bl	8000a1c <HAL_InitTick>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d002      	beq.n	8000a0a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000a04:	2301      	movs	r3, #1
 8000a06:	71fb      	strb	r3, [r7, #7]
 8000a08:	e001      	b.n	8000a0e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a0a:	f7ff fec9 	bl	80007a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40022000 	.word	0x40022000

08000a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a24:	2300      	movs	r3, #0
 8000a26:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a28:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <HAL_InitTick+0x6c>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d023      	beq.n	8000a78 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a30:	4b16      	ldr	r3, [pc, #88]	; (8000a8c <HAL_InitTick+0x70>)
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <HAL_InitTick+0x6c>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	4619      	mov	r1, r3
 8000a3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a46:	4618      	mov	r0, r3
 8000a48:	f000 f96d 	bl	8000d26 <HAL_SYSTICK_Config>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d10f      	bne.n	8000a72 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2b0f      	cmp	r3, #15
 8000a56:	d809      	bhi.n	8000a6c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	6879      	ldr	r1, [r7, #4]
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	f000 f937 	bl	8000cd2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a64:	4a0a      	ldr	r2, [pc, #40]	; (8000a90 <HAL_InitTick+0x74>)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6013      	str	r3, [r2, #0]
 8000a6a:	e007      	b.n	8000a7c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	73fb      	strb	r3, [r7, #15]
 8000a70:	e004      	b.n	8000a7c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
 8000a74:	73fb      	strb	r3, [r7, #15]
 8000a76:	e001      	b.n	8000a7c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3710      	adds	r7, #16
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000008 	.word	0x20000008
 8000a8c:	20000000 	.word	0x20000000
 8000a90:	20000004 	.word	0x20000004

08000a94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <HAL_IncTick+0x20>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <HAL_IncTick+0x24>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	4a04      	ldr	r2, [pc, #16]	; (8000ab8 <HAL_IncTick+0x24>)
 8000aa6:	6013      	str	r3, [r2, #0]
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	20000008 	.word	0x20000008
 8000ab8:	200000f4 	.word	0x200000f4

08000abc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac0:	4b03      	ldr	r3, [pc, #12]	; (8000ad0 <HAL_GetTick+0x14>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	200000f4 	.word	0x200000f4

08000ad4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000adc:	f7ff ffee 	bl	8000abc <HAL_GetTick>
 8000ae0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aec:	d005      	beq.n	8000afa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000aee:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <HAL_Delay+0x44>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	461a      	mov	r2, r3
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	4413      	add	r3, r2
 8000af8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000afa:	bf00      	nop
 8000afc:	f7ff ffde 	bl	8000abc <HAL_GetTick>
 8000b00:	4602      	mov	r2, r0
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	68fa      	ldr	r2, [r7, #12]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d8f7      	bhi.n	8000afc <HAL_Delay+0x28>
  {
  }
}
 8000b0c:	bf00      	nop
 8000b0e:	bf00      	nop
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000008 	.word	0x20000008

08000b1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f003 0307 	and.w	r3, r3, #7
 8000b2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <__NVIC_SetPriorityGrouping+0x44>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b38:	4013      	ands	r3, r2
 8000b3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b4e:	4a04      	ldr	r2, [pc, #16]	; (8000b60 <__NVIC_SetPriorityGrouping+0x44>)
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	60d3      	str	r3, [r2, #12]
}
 8000b54:	bf00      	nop
 8000b56:	3714      	adds	r7, #20
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b68:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <__NVIC_GetPriorityGrouping+0x18>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	0a1b      	lsrs	r3, r3, #8
 8000b6e:	f003 0307 	and.w	r3, r3, #7
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	db0b      	blt.n	8000baa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	f003 021f 	and.w	r2, r3, #31
 8000b98:	4907      	ldr	r1, [pc, #28]	; (8000bb8 <__NVIC_EnableIRQ+0x38>)
 8000b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9e:	095b      	lsrs	r3, r3, #5
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000baa:	bf00      	nop
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000e100 	.word	0xe000e100

08000bbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	6039      	str	r1, [r7, #0]
 8000bc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	db0a      	blt.n	8000be6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	b2da      	uxtb	r2, r3
 8000bd4:	490c      	ldr	r1, [pc, #48]	; (8000c08 <__NVIC_SetPriority+0x4c>)
 8000bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bda:	0112      	lsls	r2, r2, #4
 8000bdc:	b2d2      	uxtb	r2, r2
 8000bde:	440b      	add	r3, r1
 8000be0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000be4:	e00a      	b.n	8000bfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	b2da      	uxtb	r2, r3
 8000bea:	4908      	ldr	r1, [pc, #32]	; (8000c0c <__NVIC_SetPriority+0x50>)
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	f003 030f 	and.w	r3, r3, #15
 8000bf2:	3b04      	subs	r3, #4
 8000bf4:	0112      	lsls	r2, r2, #4
 8000bf6:	b2d2      	uxtb	r2, r2
 8000bf8:	440b      	add	r3, r1
 8000bfa:	761a      	strb	r2, [r3, #24]
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	e000e100 	.word	0xe000e100
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b089      	sub	sp, #36	; 0x24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	f003 0307 	and.w	r3, r3, #7
 8000c22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	f1c3 0307 	rsb	r3, r3, #7
 8000c2a:	2b04      	cmp	r3, #4
 8000c2c:	bf28      	it	cs
 8000c2e:	2304      	movcs	r3, #4
 8000c30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	3304      	adds	r3, #4
 8000c36:	2b06      	cmp	r3, #6
 8000c38:	d902      	bls.n	8000c40 <NVIC_EncodePriority+0x30>
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	3b03      	subs	r3, #3
 8000c3e:	e000      	b.n	8000c42 <NVIC_EncodePriority+0x32>
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c44:	f04f 32ff 	mov.w	r2, #4294967295
 8000c48:	69bb      	ldr	r3, [r7, #24]
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	43da      	mvns	r2, r3
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	401a      	ands	r2, r3
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c58:	f04f 31ff 	mov.w	r1, #4294967295
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c62:	43d9      	mvns	r1, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c68:	4313      	orrs	r3, r2
         );
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3724      	adds	r7, #36	; 0x24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
	...

08000c78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3b01      	subs	r3, #1
 8000c84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c88:	d301      	bcc.n	8000c8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e00f      	b.n	8000cae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c8e:	4a0a      	ldr	r2, [pc, #40]	; (8000cb8 <SysTick_Config+0x40>)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3b01      	subs	r3, #1
 8000c94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c96:	210f      	movs	r1, #15
 8000c98:	f04f 30ff 	mov.w	r0, #4294967295
 8000c9c:	f7ff ff8e 	bl	8000bbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca0:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <SysTick_Config+0x40>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ca6:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <SysTick_Config+0x40>)
 8000ca8:	2207      	movs	r2, #7
 8000caa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	e000e010 	.word	0xe000e010

08000cbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cc4:	6878      	ldr	r0, [r7, #4]
 8000cc6:	f7ff ff29 	bl	8000b1c <__NVIC_SetPriorityGrouping>
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b086      	sub	sp, #24
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	4603      	mov	r3, r0
 8000cda:	60b9      	str	r1, [r7, #8]
 8000cdc:	607a      	str	r2, [r7, #4]
 8000cde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ce4:	f7ff ff3e 	bl	8000b64 <__NVIC_GetPriorityGrouping>
 8000ce8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	68b9      	ldr	r1, [r7, #8]
 8000cee:	6978      	ldr	r0, [r7, #20]
 8000cf0:	f7ff ff8e 	bl	8000c10 <NVIC_EncodePriority>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cfa:	4611      	mov	r1, r2
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff ff5d 	bl	8000bbc <__NVIC_SetPriority>
}
 8000d02:	bf00      	nop
 8000d04:	3718      	adds	r7, #24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	4603      	mov	r3, r0
 8000d12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff ff31 	bl	8000b80 <__NVIC_EnableIRQ>
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b082      	sub	sp, #8
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f7ff ffa2 	bl	8000c78 <SysTick_Config>
 8000d34:	4603      	mov	r3, r0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d101      	bne.n	8000d52 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e098      	b.n	8000e84 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	461a      	mov	r2, r3
 8000d58:	4b4d      	ldr	r3, [pc, #308]	; (8000e90 <HAL_DMA_Init+0x150>)
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d80f      	bhi.n	8000d7e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	461a      	mov	r2, r3
 8000d64:	4b4b      	ldr	r3, [pc, #300]	; (8000e94 <HAL_DMA_Init+0x154>)
 8000d66:	4413      	add	r3, r2
 8000d68:	4a4b      	ldr	r2, [pc, #300]	; (8000e98 <HAL_DMA_Init+0x158>)
 8000d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d6e:	091b      	lsrs	r3, r3, #4
 8000d70:	009a      	lsls	r2, r3, #2
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a48      	ldr	r2, [pc, #288]	; (8000e9c <HAL_DMA_Init+0x15c>)
 8000d7a:	641a      	str	r2, [r3, #64]	; 0x40
 8000d7c:	e00e      	b.n	8000d9c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	461a      	mov	r2, r3
 8000d84:	4b46      	ldr	r3, [pc, #280]	; (8000ea0 <HAL_DMA_Init+0x160>)
 8000d86:	4413      	add	r3, r2
 8000d88:	4a43      	ldr	r2, [pc, #268]	; (8000e98 <HAL_DMA_Init+0x158>)
 8000d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d8e:	091b      	lsrs	r3, r3, #4
 8000d90:	009a      	lsls	r2, r3, #2
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a42      	ldr	r2, [pc, #264]	; (8000ea4 <HAL_DMA_Init+0x164>)
 8000d9a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2202      	movs	r2, #2
 8000da0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000db6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000dc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	691b      	ldr	r3, [r3, #16]
 8000dc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	699b      	ldr	r3, [r3, #24]
 8000dd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6a1b      	ldr	r3, [r3, #32]
 8000dde:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000de0:	68fa      	ldr	r2, [r7, #12]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000df6:	d039      	beq.n	8000e6c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfc:	4a27      	ldr	r2, [pc, #156]	; (8000e9c <HAL_DMA_Init+0x15c>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d11a      	bne.n	8000e38 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000e02:	4b29      	ldr	r3, [pc, #164]	; (8000ea8 <HAL_DMA_Init+0x168>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0a:	f003 031c 	and.w	r3, r3, #28
 8000e0e:	210f      	movs	r1, #15
 8000e10:	fa01 f303 	lsl.w	r3, r1, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	4924      	ldr	r1, [pc, #144]	; (8000ea8 <HAL_DMA_Init+0x168>)
 8000e18:	4013      	ands	r3, r2
 8000e1a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000e1c:	4b22      	ldr	r3, [pc, #136]	; (8000ea8 <HAL_DMA_Init+0x168>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6859      	ldr	r1, [r3, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e28:	f003 031c 	and.w	r3, r3, #28
 8000e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e30:	491d      	ldr	r1, [pc, #116]	; (8000ea8 <HAL_DMA_Init+0x168>)
 8000e32:	4313      	orrs	r3, r2
 8000e34:	600b      	str	r3, [r1, #0]
 8000e36:	e019      	b.n	8000e6c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000e38:	4b1c      	ldr	r3, [pc, #112]	; (8000eac <HAL_DMA_Init+0x16c>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e40:	f003 031c 	and.w	r3, r3, #28
 8000e44:	210f      	movs	r1, #15
 8000e46:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	4917      	ldr	r1, [pc, #92]	; (8000eac <HAL_DMA_Init+0x16c>)
 8000e4e:	4013      	ands	r3, r2
 8000e50:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000e52:	4b16      	ldr	r3, [pc, #88]	; (8000eac <HAL_DMA_Init+0x16c>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6859      	ldr	r1, [r3, #4]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5e:	f003 031c 	and.w	r3, r3, #28
 8000e62:	fa01 f303 	lsl.w	r3, r1, r3
 8000e66:	4911      	ldr	r1, [pc, #68]	; (8000eac <HAL_DMA_Init+0x16c>)
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2201      	movs	r2, #1
 8000e76:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000e82:	2300      	movs	r3, #0
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3714      	adds	r7, #20
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	40020407 	.word	0x40020407
 8000e94:	bffdfff8 	.word	0xbffdfff8
 8000e98:	cccccccd 	.word	0xcccccccd
 8000e9c:	40020000 	.word	0x40020000
 8000ea0:	bffdfbf8 	.word	0xbffdfbf8
 8000ea4:	40020400 	.word	0x40020400
 8000ea8:	400200a8 	.word	0x400200a8
 8000eac:	400204a8 	.word	0x400204a8

08000eb0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
 8000ebc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d101      	bne.n	8000ed0 <HAL_DMA_Start_IT+0x20>
 8000ecc:	2302      	movs	r3, #2
 8000ece:	e04b      	b.n	8000f68 <HAL_DMA_Start_IT+0xb8>
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d13a      	bne.n	8000f5a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	2202      	movs	r2, #2
 8000ee8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f022 0201 	bic.w	r2, r2, #1
 8000f00:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	68b9      	ldr	r1, [r7, #8]
 8000f08:	68f8      	ldr	r0, [r7, #12]
 8000f0a:	f000 f929 	bl	8001160 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d008      	beq.n	8000f28 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f042 020e 	orr.w	r2, r2, #14
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	e00f      	b.n	8000f48 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f022 0204 	bic.w	r2, r2, #4
 8000f36:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f042 020a 	orr.w	r2, r2, #10
 8000f46:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f042 0201 	orr.w	r2, r2, #1
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	e005      	b.n	8000f66 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000f62:	2302      	movs	r3, #2
 8000f64:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000f66:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3718      	adds	r7, #24
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8c:	f003 031c 	and.w	r3, r3, #28
 8000f90:	2204      	movs	r2, #4
 8000f92:	409a      	lsls	r2, r3
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	4013      	ands	r3, r2
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d026      	beq.n	8000fea <HAL_DMA_IRQHandler+0x7a>
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	f003 0304 	and.w	r3, r3, #4
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d021      	beq.n	8000fea <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f003 0320 	and.w	r3, r3, #32
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d107      	bne.n	8000fc4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f022 0204 	bic.w	r2, r2, #4
 8000fc2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc8:	f003 021c 	and.w	r2, r3, #28
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd0:	2104      	movs	r1, #4
 8000fd2:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d071      	beq.n	80010c4 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8000fe8:	e06c      	b.n	80010c4 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fee:	f003 031c 	and.w	r3, r3, #28
 8000ff2:	2202      	movs	r2, #2
 8000ff4:	409a      	lsls	r2, r3
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d02e      	beq.n	800105c <HAL_DMA_IRQHandler+0xec>
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	f003 0302 	and.w	r3, r3, #2
 8001004:	2b00      	cmp	r3, #0
 8001006:	d029      	beq.n	800105c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f003 0320 	and.w	r3, r3, #32
 8001012:	2b00      	cmp	r3, #0
 8001014:	d10b      	bne.n	800102e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f022 020a 	bic.w	r2, r2, #10
 8001024:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2201      	movs	r2, #1
 800102a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001032:	f003 021c 	and.w	r2, r3, #28
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	2102      	movs	r1, #2
 800103c:	fa01 f202 	lsl.w	r2, r1, r2
 8001040:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800104e:	2b00      	cmp	r3, #0
 8001050:	d038      	beq.n	80010c4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800105a:	e033      	b.n	80010c4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001060:	f003 031c 	and.w	r3, r3, #28
 8001064:	2208      	movs	r2, #8
 8001066:	409a      	lsls	r2, r3
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	4013      	ands	r3, r2
 800106c:	2b00      	cmp	r3, #0
 800106e:	d02a      	beq.n	80010c6 <HAL_DMA_IRQHandler+0x156>
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	f003 0308 	and.w	r3, r3, #8
 8001076:	2b00      	cmp	r3, #0
 8001078:	d025      	beq.n	80010c6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f022 020e 	bic.w	r2, r2, #14
 8001088:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108e:	f003 021c 	and.w	r2, r3, #28
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	2101      	movs	r1, #1
 8001098:	fa01 f202 	lsl.w	r2, r1, r2
 800109c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2201      	movs	r2, #1
 80010a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2201      	movs	r2, #1
 80010a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2200      	movs	r2, #0
 80010b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d004      	beq.n	80010c6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop
}
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 80010d0:	b480      	push	{r7}
 80010d2:	b087      	sub	sp, #28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	460b      	mov	r3, r1
 80010da:	607a      	str	r2, [r7, #4]
 80010dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80010de:	2300      	movs	r3, #0
 80010e0:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d101      	bne.n	80010f0 <HAL_DMA_RegisterCallback+0x20>
 80010ec:	2302      	movs	r3, #2
 80010ee:	e031      	b.n	8001154 <HAL_DMA_RegisterCallback+0x84>
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	2201      	movs	r2, #1
 80010f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	2b01      	cmp	r3, #1
 8001102:	d120      	bne.n	8001146 <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 8001104:	7afb      	ldrb	r3, [r7, #11]
 8001106:	2b03      	cmp	r3, #3
 8001108:	d81a      	bhi.n	8001140 <HAL_DMA_RegisterCallback+0x70>
 800110a:	a201      	add	r2, pc, #4	; (adr r2, 8001110 <HAL_DMA_RegisterCallback+0x40>)
 800110c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001110:	08001121 	.word	0x08001121
 8001114:	08001129 	.word	0x08001129
 8001118:	08001131 	.word	0x08001131
 800111c:	08001139 	.word	0x08001139
    {
     case  HAL_DMA_XFER_CPLT_CB_ID:
           hdma->XferCpltCallback = pCallback;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	62da      	str	r2, [r3, #44]	; 0x2c
           break;
 8001126:	e010      	b.n	800114a <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_HALFCPLT_CB_ID:
           hdma->XferHalfCpltCallback = pCallback;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	631a      	str	r2, [r3, #48]	; 0x30
           break;
 800112e:	e00c      	b.n	800114a <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_ERROR_CB_ID:
           hdma->XferErrorCallback = pCallback;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	635a      	str	r2, [r3, #52]	; 0x34
           break;
 8001136:	e008      	b.n	800114a <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_ABORT_CB_ID:
           hdma->XferAbortCallback = pCallback;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	639a      	str	r2, [r3, #56]	; 0x38
           break;
 800113e:	e004      	b.n	800114a <HAL_DMA_RegisterCallback+0x7a>

     default:
           status = HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	75fb      	strb	r3, [r7, #23]
           break;
 8001144:	e001      	b.n	800114a <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	2200      	movs	r2, #0
 800114e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001152:	7dfb      	ldrb	r3, [r7, #23]
}
 8001154:	4618      	mov	r0, r3
 8001156:	371c      	adds	r7, #28
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
 800116c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001172:	f003 021c 	and.w	r2, r3, #28
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	2101      	movs	r1, #1
 800117c:	fa01 f202 	lsl.w	r2, r1, r2
 8001180:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	683a      	ldr	r2, [r7, #0]
 8001188:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	2b10      	cmp	r3, #16
 8001190:	d108      	bne.n	80011a4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	68ba      	ldr	r2, [r7, #8]
 80011a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80011a2:	e007      	b.n	80011b4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	68ba      	ldr	r2, [r7, #8]
 80011aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	60da      	str	r2, [r3, #12]
}
 80011b4:	bf00      	nop
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b087      	sub	sp, #28
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011ca:	2300      	movs	r3, #0
 80011cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ce:	e17f      	b.n	80014d0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	2101      	movs	r1, #1
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	fa01 f303 	lsl.w	r3, r1, r3
 80011dc:	4013      	ands	r3, r2
 80011de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f000 8171 	beq.w	80014ca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 0303 	and.w	r3, r3, #3
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d005      	beq.n	8001200 <HAL_GPIO_Init+0x40>
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 0303 	and.w	r3, r3, #3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d130      	bne.n	8001262 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	2203      	movs	r2, #3
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	4013      	ands	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	68da      	ldr	r2, [r3, #12]
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	4313      	orrs	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001236:	2201      	movs	r2, #1
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43db      	mvns	r3, r3
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	4013      	ands	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	091b      	lsrs	r3, r3, #4
 800124c:	f003 0201 	and.w	r2, r3, #1
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	4313      	orrs	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f003 0303 	and.w	r3, r3, #3
 800126a:	2b03      	cmp	r3, #3
 800126c:	d118      	bne.n	80012a0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001272:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001274:	2201      	movs	r2, #1
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	43db      	mvns	r3, r3
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	4013      	ands	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	08db      	lsrs	r3, r3, #3
 800128a:	f003 0201 	and.w	r2, r3, #1
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	4313      	orrs	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f003 0303 	and.w	r3, r3, #3
 80012a8:	2b03      	cmp	r3, #3
 80012aa:	d017      	beq.n	80012dc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	2203      	movs	r2, #3
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4013      	ands	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	689a      	ldr	r2, [r3, #8]
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f003 0303 	and.w	r3, r3, #3
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d123      	bne.n	8001330 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	08da      	lsrs	r2, r3, #3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3208      	adds	r2, #8
 80012f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	f003 0307 	and.w	r3, r3, #7
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	220f      	movs	r2, #15
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	43db      	mvns	r3, r3
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	4013      	ands	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	691a      	ldr	r2, [r3, #16]
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	4313      	orrs	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	08da      	lsrs	r2, r3, #3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	3208      	adds	r2, #8
 800132a:	6939      	ldr	r1, [r7, #16]
 800132c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	2203      	movs	r2, #3
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	43db      	mvns	r3, r3
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	4013      	ands	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f003 0203 	and.w	r2, r3, #3
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	4313      	orrs	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800136c:	2b00      	cmp	r3, #0
 800136e:	f000 80ac 	beq.w	80014ca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001372:	4b5f      	ldr	r3, [pc, #380]	; (80014f0 <HAL_GPIO_Init+0x330>)
 8001374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001376:	4a5e      	ldr	r2, [pc, #376]	; (80014f0 <HAL_GPIO_Init+0x330>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	6613      	str	r3, [r2, #96]	; 0x60
 800137e:	4b5c      	ldr	r3, [pc, #368]	; (80014f0 <HAL_GPIO_Init+0x330>)
 8001380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800138a:	4a5a      	ldr	r2, [pc, #360]	; (80014f4 <HAL_GPIO_Init+0x334>)
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	089b      	lsrs	r3, r3, #2
 8001390:	3302      	adds	r3, #2
 8001392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001396:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	f003 0303 	and.w	r3, r3, #3
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	220f      	movs	r2, #15
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	4013      	ands	r3, r2
 80013ac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013b4:	d025      	beq.n	8001402 <HAL_GPIO_Init+0x242>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a4f      	ldr	r2, [pc, #316]	; (80014f8 <HAL_GPIO_Init+0x338>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d01f      	beq.n	80013fe <HAL_GPIO_Init+0x23e>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a4e      	ldr	r2, [pc, #312]	; (80014fc <HAL_GPIO_Init+0x33c>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d019      	beq.n	80013fa <HAL_GPIO_Init+0x23a>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a4d      	ldr	r2, [pc, #308]	; (8001500 <HAL_GPIO_Init+0x340>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d013      	beq.n	80013f6 <HAL_GPIO_Init+0x236>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a4c      	ldr	r2, [pc, #304]	; (8001504 <HAL_GPIO_Init+0x344>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d00d      	beq.n	80013f2 <HAL_GPIO_Init+0x232>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a4b      	ldr	r2, [pc, #300]	; (8001508 <HAL_GPIO_Init+0x348>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d007      	beq.n	80013ee <HAL_GPIO_Init+0x22e>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a4a      	ldr	r2, [pc, #296]	; (800150c <HAL_GPIO_Init+0x34c>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d101      	bne.n	80013ea <HAL_GPIO_Init+0x22a>
 80013e6:	2306      	movs	r3, #6
 80013e8:	e00c      	b.n	8001404 <HAL_GPIO_Init+0x244>
 80013ea:	2307      	movs	r3, #7
 80013ec:	e00a      	b.n	8001404 <HAL_GPIO_Init+0x244>
 80013ee:	2305      	movs	r3, #5
 80013f0:	e008      	b.n	8001404 <HAL_GPIO_Init+0x244>
 80013f2:	2304      	movs	r3, #4
 80013f4:	e006      	b.n	8001404 <HAL_GPIO_Init+0x244>
 80013f6:	2303      	movs	r3, #3
 80013f8:	e004      	b.n	8001404 <HAL_GPIO_Init+0x244>
 80013fa:	2302      	movs	r3, #2
 80013fc:	e002      	b.n	8001404 <HAL_GPIO_Init+0x244>
 80013fe:	2301      	movs	r3, #1
 8001400:	e000      	b.n	8001404 <HAL_GPIO_Init+0x244>
 8001402:	2300      	movs	r3, #0
 8001404:	697a      	ldr	r2, [r7, #20]
 8001406:	f002 0203 	and.w	r2, r2, #3
 800140a:	0092      	lsls	r2, r2, #2
 800140c:	4093      	lsls	r3, r2
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	4313      	orrs	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001414:	4937      	ldr	r1, [pc, #220]	; (80014f4 <HAL_GPIO_Init+0x334>)
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	089b      	lsrs	r3, r3, #2
 800141a:	3302      	adds	r3, #2
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001422:	4b3b      	ldr	r3, [pc, #236]	; (8001510 <HAL_GPIO_Init+0x350>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	43db      	mvns	r3, r3
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	4013      	ands	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	4313      	orrs	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001446:	4a32      	ldr	r2, [pc, #200]	; (8001510 <HAL_GPIO_Init+0x350>)
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800144c:	4b30      	ldr	r3, [pc, #192]	; (8001510 <HAL_GPIO_Init+0x350>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	43db      	mvns	r3, r3
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	4013      	ands	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d003      	beq.n	8001470 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	4313      	orrs	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001470:	4a27      	ldr	r2, [pc, #156]	; (8001510 <HAL_GPIO_Init+0x350>)
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001476:	4b26      	ldr	r3, [pc, #152]	; (8001510 <HAL_GPIO_Init+0x350>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	43db      	mvns	r3, r3
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	4013      	ands	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	4313      	orrs	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800149a:	4a1d      	ldr	r2, [pc, #116]	; (8001510 <HAL_GPIO_Init+0x350>)
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80014a0:	4b1b      	ldr	r3, [pc, #108]	; (8001510 <HAL_GPIO_Init+0x350>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	43db      	mvns	r3, r3
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	4013      	ands	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d003      	beq.n	80014c4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014c4:	4a12      	ldr	r2, [pc, #72]	; (8001510 <HAL_GPIO_Init+0x350>)
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	3301      	adds	r3, #1
 80014ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	fa22 f303 	lsr.w	r3, r2, r3
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f47f ae78 	bne.w	80011d0 <HAL_GPIO_Init+0x10>
  }
}
 80014e0:	bf00      	nop
 80014e2:	bf00      	nop
 80014e4:	371c      	adds	r7, #28
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	40021000 	.word	0x40021000
 80014f4:	40010000 	.word	0x40010000
 80014f8:	48000400 	.word	0x48000400
 80014fc:	48000800 	.word	0x48000800
 8001500:	48000c00 	.word	0x48000c00
 8001504:	48001000 	.word	0x48001000
 8001508:	48001400 	.word	0x48001400
 800150c:	48001800 	.word	0x48001800
 8001510:	40010400 	.word	0x40010400

08001514 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	460b      	mov	r3, r1
 800151e:	807b      	strh	r3, [r7, #2]
 8001520:	4613      	mov	r3, r2
 8001522:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001524:	787b      	ldrb	r3, [r7, #1]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d003      	beq.n	8001532 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800152a:	887a      	ldrh	r2, [r7, #2]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001530:	e002      	b.n	8001538 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001532:	887a      	ldrh	r2, [r7, #2]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	460b      	mov	r3, r1
 800154e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	695b      	ldr	r3, [r3, #20]
 8001554:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001556:	887a      	ldrh	r2, [r7, #2]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	4013      	ands	r3, r2
 800155c:	041a      	lsls	r2, r3, #16
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	43d9      	mvns	r1, r3
 8001562:	887b      	ldrh	r3, [r7, #2]
 8001564:	400b      	ands	r3, r1
 8001566:	431a      	orrs	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	619a      	str	r2, [r3, #24]
}
 800156c:	bf00      	nop
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800157c:	4b04      	ldr	r3, [pc, #16]	; (8001590 <HAL_PWREx_GetVoltageRange+0x18>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001584:	4618      	mov	r0, r3
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	40007000 	.word	0x40007000

08001594 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015a2:	d130      	bne.n	8001606 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80015a4:	4b23      	ldr	r3, [pc, #140]	; (8001634 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015b0:	d038      	beq.n	8001624 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015b2:	4b20      	ldr	r3, [pc, #128]	; (8001634 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015ba:	4a1e      	ldr	r2, [pc, #120]	; (8001634 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015c0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015c2:	4b1d      	ldr	r3, [pc, #116]	; (8001638 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2232      	movs	r2, #50	; 0x32
 80015c8:	fb02 f303 	mul.w	r3, r2, r3
 80015cc:	4a1b      	ldr	r2, [pc, #108]	; (800163c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80015ce:	fba2 2303 	umull	r2, r3, r2, r3
 80015d2:	0c9b      	lsrs	r3, r3, #18
 80015d4:	3301      	adds	r3, #1
 80015d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015d8:	e002      	b.n	80015e0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	3b01      	subs	r3, #1
 80015de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015e0:	4b14      	ldr	r3, [pc, #80]	; (8001634 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015e2:	695b      	ldr	r3, [r3, #20]
 80015e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015ec:	d102      	bne.n	80015f4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1f2      	bne.n	80015da <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015f4:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015f6:	695b      	ldr	r3, [r3, #20]
 80015f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001600:	d110      	bne.n	8001624 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e00f      	b.n	8001626 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001606:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800160e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001612:	d007      	beq.n	8001624 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001614:	4b07      	ldr	r3, [pc, #28]	; (8001634 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800161c:	4a05      	ldr	r2, [pc, #20]	; (8001634 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800161e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001622:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3714      	adds	r7, #20
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	40007000 	.word	0x40007000
 8001638:	20000000 	.word	0x20000000
 800163c:	431bde83 	.word	0x431bde83

08001640 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b088      	sub	sp, #32
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d101      	bne.n	8001652 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e3ca      	b.n	8001de8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001652:	4b97      	ldr	r3, [pc, #604]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 030c 	and.w	r3, r3, #12
 800165a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800165c:	4b94      	ldr	r3, [pc, #592]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	f003 0303 	and.w	r3, r3, #3
 8001664:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0310 	and.w	r3, r3, #16
 800166e:	2b00      	cmp	r3, #0
 8001670:	f000 80e4 	beq.w	800183c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d007      	beq.n	800168a <HAL_RCC_OscConfig+0x4a>
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	2b0c      	cmp	r3, #12
 800167e:	f040 808b 	bne.w	8001798 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	2b01      	cmp	r3, #1
 8001686:	f040 8087 	bne.w	8001798 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800168a:	4b89      	ldr	r3, [pc, #548]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d005      	beq.n	80016a2 <HAL_RCC_OscConfig+0x62>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d101      	bne.n	80016a2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e3a2      	b.n	8001de8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a1a      	ldr	r2, [r3, #32]
 80016a6:	4b82      	ldr	r3, [pc, #520]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0308 	and.w	r3, r3, #8
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d004      	beq.n	80016bc <HAL_RCC_OscConfig+0x7c>
 80016b2:	4b7f      	ldr	r3, [pc, #508]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016ba:	e005      	b.n	80016c8 <HAL_RCC_OscConfig+0x88>
 80016bc:	4b7c      	ldr	r3, [pc, #496]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80016be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016c2:	091b      	lsrs	r3, r3, #4
 80016c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d223      	bcs.n	8001714 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a1b      	ldr	r3, [r3, #32]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f000 fd55 	bl	8002180 <RCC_SetFlashLatencyFromMSIRange>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e383      	b.n	8001de8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016e0:	4b73      	ldr	r3, [pc, #460]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a72      	ldr	r2, [pc, #456]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80016e6:	f043 0308 	orr.w	r3, r3, #8
 80016ea:	6013      	str	r3, [r2, #0]
 80016ec:	4b70      	ldr	r3, [pc, #448]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	496d      	ldr	r1, [pc, #436]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80016fa:	4313      	orrs	r3, r2
 80016fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016fe:	4b6c      	ldr	r3, [pc, #432]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	021b      	lsls	r3, r3, #8
 800170c:	4968      	ldr	r1, [pc, #416]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 800170e:	4313      	orrs	r3, r2
 8001710:	604b      	str	r3, [r1, #4]
 8001712:	e025      	b.n	8001760 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001714:	4b66      	ldr	r3, [pc, #408]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a65      	ldr	r2, [pc, #404]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 800171a:	f043 0308 	orr.w	r3, r3, #8
 800171e:	6013      	str	r3, [r2, #0]
 8001720:	4b63      	ldr	r3, [pc, #396]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a1b      	ldr	r3, [r3, #32]
 800172c:	4960      	ldr	r1, [pc, #384]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 800172e:	4313      	orrs	r3, r2
 8001730:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001732:	4b5f      	ldr	r3, [pc, #380]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	021b      	lsls	r3, r3, #8
 8001740:	495b      	ldr	r1, [pc, #364]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001742:	4313      	orrs	r3, r2
 8001744:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d109      	bne.n	8001760 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a1b      	ldr	r3, [r3, #32]
 8001750:	4618      	mov	r0, r3
 8001752:	f000 fd15 	bl	8002180 <RCC_SetFlashLatencyFromMSIRange>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e343      	b.n	8001de8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001760:	f000 fc4a 	bl	8001ff8 <HAL_RCC_GetSysClockFreq>
 8001764:	4602      	mov	r2, r0
 8001766:	4b52      	ldr	r3, [pc, #328]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	091b      	lsrs	r3, r3, #4
 800176c:	f003 030f 	and.w	r3, r3, #15
 8001770:	4950      	ldr	r1, [pc, #320]	; (80018b4 <HAL_RCC_OscConfig+0x274>)
 8001772:	5ccb      	ldrb	r3, [r1, r3]
 8001774:	f003 031f 	and.w	r3, r3, #31
 8001778:	fa22 f303 	lsr.w	r3, r2, r3
 800177c:	4a4e      	ldr	r2, [pc, #312]	; (80018b8 <HAL_RCC_OscConfig+0x278>)
 800177e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001780:	4b4e      	ldr	r3, [pc, #312]	; (80018bc <HAL_RCC_OscConfig+0x27c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff f949 	bl	8000a1c <HAL_InitTick>
 800178a:	4603      	mov	r3, r0
 800178c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800178e:	7bfb      	ldrb	r3, [r7, #15]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d052      	beq.n	800183a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001794:	7bfb      	ldrb	r3, [r7, #15]
 8001796:	e327      	b.n	8001de8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d032      	beq.n	8001806 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017a0:	4b43      	ldr	r3, [pc, #268]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a42      	ldr	r2, [pc, #264]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80017a6:	f043 0301 	orr.w	r3, r3, #1
 80017aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017ac:	f7ff f986 	bl	8000abc <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017b4:	f7ff f982 	bl	8000abc <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e310      	b.n	8001de8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017c6:	4b3a      	ldr	r3, [pc, #232]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d0f0      	beq.n	80017b4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017d2:	4b37      	ldr	r3, [pc, #220]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a36      	ldr	r2, [pc, #216]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80017d8:	f043 0308 	orr.w	r3, r3, #8
 80017dc:	6013      	str	r3, [r2, #0]
 80017de:	4b34      	ldr	r3, [pc, #208]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a1b      	ldr	r3, [r3, #32]
 80017ea:	4931      	ldr	r1, [pc, #196]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80017ec:	4313      	orrs	r3, r2
 80017ee:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017f0:	4b2f      	ldr	r3, [pc, #188]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	69db      	ldr	r3, [r3, #28]
 80017fc:	021b      	lsls	r3, r3, #8
 80017fe:	492c      	ldr	r1, [pc, #176]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001800:	4313      	orrs	r3, r2
 8001802:	604b      	str	r3, [r1, #4]
 8001804:	e01a      	b.n	800183c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001806:	4b2a      	ldr	r3, [pc, #168]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a29      	ldr	r2, [pc, #164]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 800180c:	f023 0301 	bic.w	r3, r3, #1
 8001810:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001812:	f7ff f953 	bl	8000abc <HAL_GetTick>
 8001816:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001818:	e008      	b.n	800182c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800181a:	f7ff f94f 	bl	8000abc <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e2dd      	b.n	8001de8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800182c:	4b20      	ldr	r3, [pc, #128]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1f0      	bne.n	800181a <HAL_RCC_OscConfig+0x1da>
 8001838:	e000      	b.n	800183c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800183a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	2b00      	cmp	r3, #0
 8001846:	d074      	beq.n	8001932 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	2b08      	cmp	r3, #8
 800184c:	d005      	beq.n	800185a <HAL_RCC_OscConfig+0x21a>
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	2b0c      	cmp	r3, #12
 8001852:	d10e      	bne.n	8001872 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	2b03      	cmp	r3, #3
 8001858:	d10b      	bne.n	8001872 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800185a:	4b15      	ldr	r3, [pc, #84]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d064      	beq.n	8001930 <HAL_RCC_OscConfig+0x2f0>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d160      	bne.n	8001930 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e2ba      	b.n	8001de8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800187a:	d106      	bne.n	800188a <HAL_RCC_OscConfig+0x24a>
 800187c:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a0b      	ldr	r2, [pc, #44]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001882:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001886:	6013      	str	r3, [r2, #0]
 8001888:	e026      	b.n	80018d8 <HAL_RCC_OscConfig+0x298>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001892:	d115      	bne.n	80018c0 <HAL_RCC_OscConfig+0x280>
 8001894:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a05      	ldr	r2, [pc, #20]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 800189a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800189e:	6013      	str	r3, [r2, #0]
 80018a0:	4b03      	ldr	r3, [pc, #12]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a02      	ldr	r2, [pc, #8]	; (80018b0 <HAL_RCC_OscConfig+0x270>)
 80018a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018aa:	6013      	str	r3, [r2, #0]
 80018ac:	e014      	b.n	80018d8 <HAL_RCC_OscConfig+0x298>
 80018ae:	bf00      	nop
 80018b0:	40021000 	.word	0x40021000
 80018b4:	0800366c 	.word	0x0800366c
 80018b8:	20000000 	.word	0x20000000
 80018bc:	20000004 	.word	0x20000004
 80018c0:	4ba0      	ldr	r3, [pc, #640]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a9f      	ldr	r2, [pc, #636]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 80018c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ca:	6013      	str	r3, [r2, #0]
 80018cc:	4b9d      	ldr	r3, [pc, #628]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a9c      	ldr	r2, [pc, #624]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 80018d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d013      	beq.n	8001908 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e0:	f7ff f8ec 	bl	8000abc <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018e8:	f7ff f8e8 	bl	8000abc <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b64      	cmp	r3, #100	; 0x64
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e276      	b.n	8001de8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018fa:	4b92      	ldr	r3, [pc, #584]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0f0      	beq.n	80018e8 <HAL_RCC_OscConfig+0x2a8>
 8001906:	e014      	b.n	8001932 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001908:	f7ff f8d8 	bl	8000abc <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001910:	f7ff f8d4 	bl	8000abc <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b64      	cmp	r3, #100	; 0x64
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e262      	b.n	8001de8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001922:	4b88      	ldr	r3, [pc, #544]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1f0      	bne.n	8001910 <HAL_RCC_OscConfig+0x2d0>
 800192e:	e000      	b.n	8001932 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001930:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d060      	beq.n	8001a00 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	2b04      	cmp	r3, #4
 8001942:	d005      	beq.n	8001950 <HAL_RCC_OscConfig+0x310>
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	2b0c      	cmp	r3, #12
 8001948:	d119      	bne.n	800197e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	2b02      	cmp	r3, #2
 800194e:	d116      	bne.n	800197e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001950:	4b7c      	ldr	r3, [pc, #496]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001958:	2b00      	cmp	r3, #0
 800195a:	d005      	beq.n	8001968 <HAL_RCC_OscConfig+0x328>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e23f      	b.n	8001de8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001968:	4b76      	ldr	r3, [pc, #472]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	691b      	ldr	r3, [r3, #16]
 8001974:	061b      	lsls	r3, r3, #24
 8001976:	4973      	ldr	r1, [pc, #460]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001978:	4313      	orrs	r3, r2
 800197a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800197c:	e040      	b.n	8001a00 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d023      	beq.n	80019ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001986:	4b6f      	ldr	r3, [pc, #444]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a6e      	ldr	r2, [pc, #440]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 800198c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001990:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001992:	f7ff f893 	bl	8000abc <HAL_GetTick>
 8001996:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001998:	e008      	b.n	80019ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800199a:	f7ff f88f 	bl	8000abc <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d901      	bls.n	80019ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e21d      	b.n	8001de8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019ac:	4b65      	ldr	r3, [pc, #404]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d0f0      	beq.n	800199a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b8:	4b62      	ldr	r3, [pc, #392]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	691b      	ldr	r3, [r3, #16]
 80019c4:	061b      	lsls	r3, r3, #24
 80019c6:	495f      	ldr	r1, [pc, #380]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 80019c8:	4313      	orrs	r3, r2
 80019ca:	604b      	str	r3, [r1, #4]
 80019cc:	e018      	b.n	8001a00 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ce:	4b5d      	ldr	r3, [pc, #372]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a5c      	ldr	r2, [pc, #368]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 80019d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019da:	f7ff f86f 	bl	8000abc <HAL_GetTick>
 80019de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019e2:	f7ff f86b 	bl	8000abc <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e1f9      	b.n	8001de8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019f4:	4b53      	ldr	r3, [pc, #332]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1f0      	bne.n	80019e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0308 	and.w	r3, r3, #8
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d03c      	beq.n	8001a86 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	695b      	ldr	r3, [r3, #20]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d01c      	beq.n	8001a4e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a14:	4b4b      	ldr	r3, [pc, #300]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001a16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a1a:	4a4a      	ldr	r2, [pc, #296]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a24:	f7ff f84a 	bl	8000abc <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a2c:	f7ff f846 	bl	8000abc <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e1d4      	b.n	8001de8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a3e:	4b41      	ldr	r3, [pc, #260]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001a40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d0ef      	beq.n	8001a2c <HAL_RCC_OscConfig+0x3ec>
 8001a4c:	e01b      	b.n	8001a86 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a4e:	4b3d      	ldr	r3, [pc, #244]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001a50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a54:	4a3b      	ldr	r2, [pc, #236]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001a56:	f023 0301 	bic.w	r3, r3, #1
 8001a5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5e:	f7ff f82d 	bl	8000abc <HAL_GetTick>
 8001a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a64:	e008      	b.n	8001a78 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a66:	f7ff f829 	bl	8000abc <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e1b7      	b.n	8001de8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a78:	4b32      	ldr	r3, [pc, #200]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001a7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1ef      	bne.n	8001a66 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0304 	and.w	r3, r3, #4
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f000 80a6 	beq.w	8001be0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a94:	2300      	movs	r3, #0
 8001a96:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a98:	4b2a      	ldr	r3, [pc, #168]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d10d      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aa4:	4b27      	ldr	r3, [pc, #156]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa8:	4a26      	ldr	r2, [pc, #152]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001aaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aae:	6593      	str	r3, [r2, #88]	; 0x58
 8001ab0:	4b24      	ldr	r3, [pc, #144]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab8:	60bb      	str	r3, [r7, #8]
 8001aba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001abc:	2301      	movs	r3, #1
 8001abe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ac0:	4b21      	ldr	r3, [pc, #132]	; (8001b48 <HAL_RCC_OscConfig+0x508>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d118      	bne.n	8001afe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001acc:	4b1e      	ldr	r3, [pc, #120]	; (8001b48 <HAL_RCC_OscConfig+0x508>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a1d      	ldr	r2, [pc, #116]	; (8001b48 <HAL_RCC_OscConfig+0x508>)
 8001ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ad8:	f7fe fff0 	bl	8000abc <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ae0:	f7fe ffec 	bl	8000abc <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e17a      	b.n	8001de8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001af2:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <HAL_RCC_OscConfig+0x508>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d0f0      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d108      	bne.n	8001b18 <HAL_RCC_OscConfig+0x4d8>
 8001b06:	4b0f      	ldr	r3, [pc, #60]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b0c:	4a0d      	ldr	r2, [pc, #52]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b16:	e029      	b.n	8001b6c <HAL_RCC_OscConfig+0x52c>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	2b05      	cmp	r3, #5
 8001b1e:	d115      	bne.n	8001b4c <HAL_RCC_OscConfig+0x50c>
 8001b20:	4b08      	ldr	r3, [pc, #32]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b26:	4a07      	ldr	r2, [pc, #28]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001b28:	f043 0304 	orr.w	r3, r3, #4
 8001b2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b30:	4b04      	ldr	r3, [pc, #16]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b36:	4a03      	ldr	r2, [pc, #12]	; (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b40:	e014      	b.n	8001b6c <HAL_RCC_OscConfig+0x52c>
 8001b42:	bf00      	nop
 8001b44:	40021000 	.word	0x40021000
 8001b48:	40007000 	.word	0x40007000
 8001b4c:	4b9c      	ldr	r3, [pc, #624]	; (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b52:	4a9b      	ldr	r2, [pc, #620]	; (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001b54:	f023 0301 	bic.w	r3, r3, #1
 8001b58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b5c:	4b98      	ldr	r3, [pc, #608]	; (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b62:	4a97      	ldr	r2, [pc, #604]	; (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001b64:	f023 0304 	bic.w	r3, r3, #4
 8001b68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d016      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b74:	f7fe ffa2 	bl	8000abc <HAL_GetTick>
 8001b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b7a:	e00a      	b.n	8001b92 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b7c:	f7fe ff9e 	bl	8000abc <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e12a      	b.n	8001de8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b92:	4b8b      	ldr	r3, [pc, #556]	; (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0ed      	beq.n	8001b7c <HAL_RCC_OscConfig+0x53c>
 8001ba0:	e015      	b.n	8001bce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba2:	f7fe ff8b 	bl	8000abc <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ba8:	e00a      	b.n	8001bc0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001baa:	f7fe ff87 	bl	8000abc <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e113      	b.n	8001de8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bc0:	4b7f      	ldr	r3, [pc, #508]	; (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1ed      	bne.n	8001baa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bce:	7ffb      	ldrb	r3, [r7, #31]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d105      	bne.n	8001be0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bd4:	4b7a      	ldr	r3, [pc, #488]	; (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd8:	4a79      	ldr	r2, [pc, #484]	; (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001bda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bde:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f000 80fe 	beq.w	8001de6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	f040 80d0 	bne.w	8001d94 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001bf4:	4b72      	ldr	r3, [pc, #456]	; (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	f003 0203 	and.w	r2, r3, #3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d130      	bne.n	8001c6a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	3b01      	subs	r3, #1
 8001c14:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d127      	bne.n	8001c6a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c24:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d11f      	bne.n	8001c6a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c34:	2a07      	cmp	r2, #7
 8001c36:	bf14      	ite	ne
 8001c38:	2201      	movne	r2, #1
 8001c3a:	2200      	moveq	r2, #0
 8001c3c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d113      	bne.n	8001c6a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c4c:	085b      	lsrs	r3, r3, #1
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d109      	bne.n	8001c6a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c60:	085b      	lsrs	r3, r3, #1
 8001c62:	3b01      	subs	r3, #1
 8001c64:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d06e      	beq.n	8001d48 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	2b0c      	cmp	r3, #12
 8001c6e:	d069      	beq.n	8001d44 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c70:	4b53      	ldr	r3, [pc, #332]	; (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d105      	bne.n	8001c88 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001c7c:	4b50      	ldr	r3, [pc, #320]	; (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e0ad      	b.n	8001de8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c8c:	4b4c      	ldr	r3, [pc, #304]	; (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a4b      	ldr	r2, [pc, #300]	; (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001c92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c96:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c98:	f7fe ff10 	bl	8000abc <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca0:	f7fe ff0c 	bl	8000abc <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e09a      	b.n	8001de8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cb2:	4b43      	ldr	r3, [pc, #268]	; (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1f0      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cbe:	4b40      	ldr	r3, [pc, #256]	; (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001cc0:	68da      	ldr	r2, [r3, #12]
 8001cc2:	4b40      	ldr	r3, [pc, #256]	; (8001dc4 <HAL_RCC_OscConfig+0x784>)
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001cce:	3a01      	subs	r2, #1
 8001cd0:	0112      	lsls	r2, r2, #4
 8001cd2:	4311      	orrs	r1, r2
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001cd8:	0212      	lsls	r2, r2, #8
 8001cda:	4311      	orrs	r1, r2
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ce0:	0852      	lsrs	r2, r2, #1
 8001ce2:	3a01      	subs	r2, #1
 8001ce4:	0552      	lsls	r2, r2, #21
 8001ce6:	4311      	orrs	r1, r2
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001cec:	0852      	lsrs	r2, r2, #1
 8001cee:	3a01      	subs	r2, #1
 8001cf0:	0652      	lsls	r2, r2, #25
 8001cf2:	4311      	orrs	r1, r2
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001cf8:	0912      	lsrs	r2, r2, #4
 8001cfa:	0452      	lsls	r2, r2, #17
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	4930      	ldr	r1, [pc, #192]	; (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d04:	4b2e      	ldr	r3, [pc, #184]	; (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a2d      	ldr	r2, [pc, #180]	; (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001d0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d0e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d10:	4b2b      	ldr	r3, [pc, #172]	; (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	4a2a      	ldr	r2, [pc, #168]	; (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001d16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d1a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d1c:	f7fe fece 	bl	8000abc <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d24:	f7fe feca 	bl	8000abc <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e058      	b.n	8001de8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d36:	4b22      	ldr	r3, [pc, #136]	; (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0f0      	beq.n	8001d24 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d42:	e050      	b.n	8001de6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e04f      	b.n	8001de8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d48:	4b1d      	ldr	r3, [pc, #116]	; (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d148      	bne.n	8001de6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d54:	4b1a      	ldr	r3, [pc, #104]	; (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a19      	ldr	r2, [pc, #100]	; (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001d5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d5e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d60:	4b17      	ldr	r3, [pc, #92]	; (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	4a16      	ldr	r2, [pc, #88]	; (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001d66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d6a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d6c:	f7fe fea6 	bl	8000abc <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d74:	f7fe fea2 	bl	8000abc <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e030      	b.n	8001de8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d86:	4b0e      	ldr	r3, [pc, #56]	; (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d0f0      	beq.n	8001d74 <HAL_RCC_OscConfig+0x734>
 8001d92:	e028      	b.n	8001de6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	2b0c      	cmp	r3, #12
 8001d98:	d023      	beq.n	8001de2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d9a:	4b09      	ldr	r3, [pc, #36]	; (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a08      	ldr	r2, [pc, #32]	; (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001da0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001da4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da6:	f7fe fe89 	bl	8000abc <HAL_GetTick>
 8001daa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dac:	e00c      	b.n	8001dc8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dae:	f7fe fe85 	bl	8000abc <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d905      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e013      	b.n	8001de8 <HAL_RCC_OscConfig+0x7a8>
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dc8:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <HAL_RCC_OscConfig+0x7b0>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1ec      	bne.n	8001dae <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001dd4:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <HAL_RCC_OscConfig+0x7b0>)
 8001dd6:	68da      	ldr	r2, [r3, #12]
 8001dd8:	4905      	ldr	r1, [pc, #20]	; (8001df0 <HAL_RCC_OscConfig+0x7b0>)
 8001dda:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <HAL_RCC_OscConfig+0x7b4>)
 8001ddc:	4013      	ands	r3, r2
 8001dde:	60cb      	str	r3, [r1, #12]
 8001de0:	e001      	b.n	8001de6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e000      	b.n	8001de8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3720      	adds	r7, #32
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40021000 	.word	0x40021000
 8001df4:	feeefffc 	.word	0xfeeefffc

08001df8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e0e7      	b.n	8001fdc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e0c:	4b75      	ldr	r3, [pc, #468]	; (8001fe4 <HAL_RCC_ClockConfig+0x1ec>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0307 	and.w	r3, r3, #7
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d910      	bls.n	8001e3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e1a:	4b72      	ldr	r3, [pc, #456]	; (8001fe4 <HAL_RCC_ClockConfig+0x1ec>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f023 0207 	bic.w	r2, r3, #7
 8001e22:	4970      	ldr	r1, [pc, #448]	; (8001fe4 <HAL_RCC_ClockConfig+0x1ec>)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e2a:	4b6e      	ldr	r3, [pc, #440]	; (8001fe4 <HAL_RCC_ClockConfig+0x1ec>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d001      	beq.n	8001e3c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e0cf      	b.n	8001fdc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d010      	beq.n	8001e6a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	4b66      	ldr	r3, [pc, #408]	; (8001fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d908      	bls.n	8001e6a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e58:	4b63      	ldr	r3, [pc, #396]	; (8001fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	4960      	ldr	r1, [pc, #384]	; (8001fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d04c      	beq.n	8001f10 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	2b03      	cmp	r3, #3
 8001e7c:	d107      	bne.n	8001e8e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e7e:	4b5a      	ldr	r3, [pc, #360]	; (8001fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d121      	bne.n	8001ece <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e0a6      	b.n	8001fdc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d107      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e96:	4b54      	ldr	r3, [pc, #336]	; (8001fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d115      	bne.n	8001ece <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e09a      	b.n	8001fdc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d107      	bne.n	8001ebe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001eae:	4b4e      	ldr	r3, [pc, #312]	; (8001fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d109      	bne.n	8001ece <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e08e      	b.n	8001fdc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ebe:	4b4a      	ldr	r3, [pc, #296]	; (8001fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e086      	b.n	8001fdc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ece:	4b46      	ldr	r3, [pc, #280]	; (8001fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f023 0203 	bic.w	r2, r3, #3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	4943      	ldr	r1, [pc, #268]	; (8001fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ee0:	f7fe fdec 	bl	8000abc <HAL_GetTick>
 8001ee4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee6:	e00a      	b.n	8001efe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ee8:	f7fe fde8 	bl	8000abc <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e06e      	b.n	8001fdc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efe:	4b3a      	ldr	r3, [pc, #232]	; (8001fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f003 020c 	and.w	r2, r3, #12
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d1eb      	bne.n	8001ee8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d010      	beq.n	8001f3e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689a      	ldr	r2, [r3, #8]
 8001f20:	4b31      	ldr	r3, [pc, #196]	; (8001fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d208      	bcs.n	8001f3e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f2c:	4b2e      	ldr	r3, [pc, #184]	; (8001fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	492b      	ldr	r1, [pc, #172]	; (8001fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f3e:	4b29      	ldr	r3, [pc, #164]	; (8001fe4 <HAL_RCC_ClockConfig+0x1ec>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d210      	bcs.n	8001f6e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4c:	4b25      	ldr	r3, [pc, #148]	; (8001fe4 <HAL_RCC_ClockConfig+0x1ec>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f023 0207 	bic.w	r2, r3, #7
 8001f54:	4923      	ldr	r1, [pc, #140]	; (8001fe4 <HAL_RCC_ClockConfig+0x1ec>)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f5c:	4b21      	ldr	r3, [pc, #132]	; (8001fe4 <HAL_RCC_ClockConfig+0x1ec>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0307 	and.w	r3, r3, #7
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d001      	beq.n	8001f6e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e036      	b.n	8001fdc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0304 	and.w	r3, r3, #4
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d008      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f7a:	4b1b      	ldr	r3, [pc, #108]	; (8001fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	4918      	ldr	r1, [pc, #96]	; (8001fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0308 	and.w	r3, r3, #8
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d009      	beq.n	8001fac <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f98:	4b13      	ldr	r3, [pc, #76]	; (8001fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	4910      	ldr	r1, [pc, #64]	; (8001fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fac:	f000 f824 	bl	8001ff8 <HAL_RCC_GetSysClockFreq>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	4b0d      	ldr	r3, [pc, #52]	; (8001fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	091b      	lsrs	r3, r3, #4
 8001fb8:	f003 030f 	and.w	r3, r3, #15
 8001fbc:	490b      	ldr	r1, [pc, #44]	; (8001fec <HAL_RCC_ClockConfig+0x1f4>)
 8001fbe:	5ccb      	ldrb	r3, [r1, r3]
 8001fc0:	f003 031f 	and.w	r3, r3, #31
 8001fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fc8:	4a09      	ldr	r2, [pc, #36]	; (8001ff0 <HAL_RCC_ClockConfig+0x1f8>)
 8001fca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001fcc:	4b09      	ldr	r3, [pc, #36]	; (8001ff4 <HAL_RCC_ClockConfig+0x1fc>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7fe fd23 	bl	8000a1c <HAL_InitTick>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	72fb      	strb	r3, [r7, #11]

  return status;
 8001fda:	7afb      	ldrb	r3, [r7, #11]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40022000 	.word	0x40022000
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	0800366c 	.word	0x0800366c
 8001ff0:	20000000 	.word	0x20000000
 8001ff4:	20000004 	.word	0x20000004

08001ff8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b089      	sub	sp, #36	; 0x24
 8001ffc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ffe:	2300      	movs	r3, #0
 8002000:	61fb      	str	r3, [r7, #28]
 8002002:	2300      	movs	r3, #0
 8002004:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002006:	4b3e      	ldr	r3, [pc, #248]	; (8002100 <HAL_RCC_GetSysClockFreq+0x108>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 030c 	and.w	r3, r3, #12
 800200e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002010:	4b3b      	ldr	r3, [pc, #236]	; (8002100 <HAL_RCC_GetSysClockFreq+0x108>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	f003 0303 	and.w	r3, r3, #3
 8002018:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d005      	beq.n	800202c <HAL_RCC_GetSysClockFreq+0x34>
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	2b0c      	cmp	r3, #12
 8002024:	d121      	bne.n	800206a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d11e      	bne.n	800206a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800202c:	4b34      	ldr	r3, [pc, #208]	; (8002100 <HAL_RCC_GetSysClockFreq+0x108>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0308 	and.w	r3, r3, #8
 8002034:	2b00      	cmp	r3, #0
 8002036:	d107      	bne.n	8002048 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002038:	4b31      	ldr	r3, [pc, #196]	; (8002100 <HAL_RCC_GetSysClockFreq+0x108>)
 800203a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800203e:	0a1b      	lsrs	r3, r3, #8
 8002040:	f003 030f 	and.w	r3, r3, #15
 8002044:	61fb      	str	r3, [r7, #28]
 8002046:	e005      	b.n	8002054 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002048:	4b2d      	ldr	r3, [pc, #180]	; (8002100 <HAL_RCC_GetSysClockFreq+0x108>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	091b      	lsrs	r3, r3, #4
 800204e:	f003 030f 	and.w	r3, r3, #15
 8002052:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002054:	4a2b      	ldr	r2, [pc, #172]	; (8002104 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800205c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d10d      	bne.n	8002080 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002068:	e00a      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	2b04      	cmp	r3, #4
 800206e:	d102      	bne.n	8002076 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002070:	4b25      	ldr	r3, [pc, #148]	; (8002108 <HAL_RCC_GetSysClockFreq+0x110>)
 8002072:	61bb      	str	r3, [r7, #24]
 8002074:	e004      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	2b08      	cmp	r3, #8
 800207a:	d101      	bne.n	8002080 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800207c:	4b23      	ldr	r3, [pc, #140]	; (800210c <HAL_RCC_GetSysClockFreq+0x114>)
 800207e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	2b0c      	cmp	r3, #12
 8002084:	d134      	bne.n	80020f0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002086:	4b1e      	ldr	r3, [pc, #120]	; (8002100 <HAL_RCC_GetSysClockFreq+0x108>)
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	f003 0303 	and.w	r3, r3, #3
 800208e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	2b02      	cmp	r3, #2
 8002094:	d003      	beq.n	800209e <HAL_RCC_GetSysClockFreq+0xa6>
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	2b03      	cmp	r3, #3
 800209a:	d003      	beq.n	80020a4 <HAL_RCC_GetSysClockFreq+0xac>
 800209c:	e005      	b.n	80020aa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800209e:	4b1a      	ldr	r3, [pc, #104]	; (8002108 <HAL_RCC_GetSysClockFreq+0x110>)
 80020a0:	617b      	str	r3, [r7, #20]
      break;
 80020a2:	e005      	b.n	80020b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80020a4:	4b19      	ldr	r3, [pc, #100]	; (800210c <HAL_RCC_GetSysClockFreq+0x114>)
 80020a6:	617b      	str	r3, [r7, #20]
      break;
 80020a8:	e002      	b.n	80020b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	617b      	str	r3, [r7, #20]
      break;
 80020ae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020b0:	4b13      	ldr	r3, [pc, #76]	; (8002100 <HAL_RCC_GetSysClockFreq+0x108>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	091b      	lsrs	r3, r3, #4
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	3301      	adds	r3, #1
 80020bc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80020be:	4b10      	ldr	r3, [pc, #64]	; (8002100 <HAL_RCC_GetSysClockFreq+0x108>)
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	0a1b      	lsrs	r3, r3, #8
 80020c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020c8:	697a      	ldr	r2, [r7, #20]
 80020ca:	fb03 f202 	mul.w	r2, r3, r2
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020d6:	4b0a      	ldr	r3, [pc, #40]	; (8002100 <HAL_RCC_GetSysClockFreq+0x108>)
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	0e5b      	lsrs	r3, r3, #25
 80020dc:	f003 0303 	and.w	r3, r3, #3
 80020e0:	3301      	adds	r3, #1
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80020f0:	69bb      	ldr	r3, [r7, #24]
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3724      	adds	r7, #36	; 0x24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	40021000 	.word	0x40021000
 8002104:	08003684 	.word	0x08003684
 8002108:	00f42400 	.word	0x00f42400
 800210c:	007a1200 	.word	0x007a1200

08002110 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002114:	4b03      	ldr	r3, [pc, #12]	; (8002124 <HAL_RCC_GetHCLKFreq+0x14>)
 8002116:	681b      	ldr	r3, [r3, #0]
}
 8002118:	4618      	mov	r0, r3
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	20000000 	.word	0x20000000

08002128 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800212c:	f7ff fff0 	bl	8002110 <HAL_RCC_GetHCLKFreq>
 8002130:	4602      	mov	r2, r0
 8002132:	4b06      	ldr	r3, [pc, #24]	; (800214c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	0a1b      	lsrs	r3, r3, #8
 8002138:	f003 0307 	and.w	r3, r3, #7
 800213c:	4904      	ldr	r1, [pc, #16]	; (8002150 <HAL_RCC_GetPCLK1Freq+0x28>)
 800213e:	5ccb      	ldrb	r3, [r1, r3]
 8002140:	f003 031f 	and.w	r3, r3, #31
 8002144:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002148:	4618      	mov	r0, r3
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40021000 	.word	0x40021000
 8002150:	0800367c 	.word	0x0800367c

08002154 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002158:	f7ff ffda 	bl	8002110 <HAL_RCC_GetHCLKFreq>
 800215c:	4602      	mov	r2, r0
 800215e:	4b06      	ldr	r3, [pc, #24]	; (8002178 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	0adb      	lsrs	r3, r3, #11
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	4904      	ldr	r1, [pc, #16]	; (800217c <HAL_RCC_GetPCLK2Freq+0x28>)
 800216a:	5ccb      	ldrb	r3, [r1, r3]
 800216c:	f003 031f 	and.w	r3, r3, #31
 8002170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002174:	4618      	mov	r0, r3
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40021000 	.word	0x40021000
 800217c:	0800367c 	.word	0x0800367c

08002180 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002188:	2300      	movs	r3, #0
 800218a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800218c:	4b2a      	ldr	r3, [pc, #168]	; (8002238 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800218e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d003      	beq.n	80021a0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002198:	f7ff f9ee 	bl	8001578 <HAL_PWREx_GetVoltageRange>
 800219c:	6178      	str	r0, [r7, #20]
 800219e:	e014      	b.n	80021ca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021a0:	4b25      	ldr	r3, [pc, #148]	; (8002238 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a4:	4a24      	ldr	r2, [pc, #144]	; (8002238 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021aa:	6593      	str	r3, [r2, #88]	; 0x58
 80021ac:	4b22      	ldr	r3, [pc, #136]	; (8002238 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80021b8:	f7ff f9de 	bl	8001578 <HAL_PWREx_GetVoltageRange>
 80021bc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80021be:	4b1e      	ldr	r3, [pc, #120]	; (8002238 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c2:	4a1d      	ldr	r2, [pc, #116]	; (8002238 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021c8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021d0:	d10b      	bne.n	80021ea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2b80      	cmp	r3, #128	; 0x80
 80021d6:	d919      	bls.n	800220c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2ba0      	cmp	r3, #160	; 0xa0
 80021dc:	d902      	bls.n	80021e4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021de:	2302      	movs	r3, #2
 80021e0:	613b      	str	r3, [r7, #16]
 80021e2:	e013      	b.n	800220c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021e4:	2301      	movs	r3, #1
 80021e6:	613b      	str	r3, [r7, #16]
 80021e8:	e010      	b.n	800220c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b80      	cmp	r3, #128	; 0x80
 80021ee:	d902      	bls.n	80021f6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80021f0:	2303      	movs	r3, #3
 80021f2:	613b      	str	r3, [r7, #16]
 80021f4:	e00a      	b.n	800220c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2b80      	cmp	r3, #128	; 0x80
 80021fa:	d102      	bne.n	8002202 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021fc:	2302      	movs	r3, #2
 80021fe:	613b      	str	r3, [r7, #16]
 8002200:	e004      	b.n	800220c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b70      	cmp	r3, #112	; 0x70
 8002206:	d101      	bne.n	800220c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002208:	2301      	movs	r3, #1
 800220a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800220c:	4b0b      	ldr	r3, [pc, #44]	; (800223c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f023 0207 	bic.w	r2, r3, #7
 8002214:	4909      	ldr	r1, [pc, #36]	; (800223c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	4313      	orrs	r3, r2
 800221a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800221c:	4b07      	ldr	r3, [pc, #28]	; (800223c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0307 	and.w	r3, r3, #7
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	429a      	cmp	r2, r3
 8002228:	d001      	beq.n	800222e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e000      	b.n	8002230 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	3718      	adds	r7, #24
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40021000 	.word	0x40021000
 800223c:	40022000 	.word	0x40022000

08002240 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002248:	2300      	movs	r3, #0
 800224a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800224c:	2300      	movs	r3, #0
 800224e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002258:	2b00      	cmp	r3, #0
 800225a:	d041      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002260:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002264:	d02a      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002266:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800226a:	d824      	bhi.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800226c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002270:	d008      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002272:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002276:	d81e      	bhi.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002278:	2b00      	cmp	r3, #0
 800227a:	d00a      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800227c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002280:	d010      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002282:	e018      	b.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002284:	4b86      	ldr	r3, [pc, #536]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	4a85      	ldr	r2, [pc, #532]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800228a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800228e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002290:	e015      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3304      	adds	r3, #4
 8002296:	2100      	movs	r1, #0
 8002298:	4618      	mov	r0, r3
 800229a:	f000 fabb 	bl	8002814 <RCCEx_PLLSAI1_Config>
 800229e:	4603      	mov	r3, r0
 80022a0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022a2:	e00c      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	3320      	adds	r3, #32
 80022a8:	2100      	movs	r1, #0
 80022aa:	4618      	mov	r0, r3
 80022ac:	f000 fba6 	bl	80029fc <RCCEx_PLLSAI2_Config>
 80022b0:	4603      	mov	r3, r0
 80022b2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022b4:	e003      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	74fb      	strb	r3, [r7, #19]
      break;
 80022ba:	e000      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80022bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022be:	7cfb      	ldrb	r3, [r7, #19]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d10b      	bne.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022c4:	4b76      	ldr	r3, [pc, #472]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022d2:	4973      	ldr	r1, [pc, #460]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80022da:	e001      	b.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022dc:	7cfb      	ldrb	r3, [r7, #19]
 80022de:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d041      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80022f4:	d02a      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80022f6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80022fa:	d824      	bhi.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80022fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002300:	d008      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002302:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002306:	d81e      	bhi.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00a      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800230c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002310:	d010      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002312:	e018      	b.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002314:	4b62      	ldr	r3, [pc, #392]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	4a61      	ldr	r2, [pc, #388]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800231a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800231e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002320:	e015      	b.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	3304      	adds	r3, #4
 8002326:	2100      	movs	r1, #0
 8002328:	4618      	mov	r0, r3
 800232a:	f000 fa73 	bl	8002814 <RCCEx_PLLSAI1_Config>
 800232e:	4603      	mov	r3, r0
 8002330:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002332:	e00c      	b.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3320      	adds	r3, #32
 8002338:	2100      	movs	r1, #0
 800233a:	4618      	mov	r0, r3
 800233c:	f000 fb5e 	bl	80029fc <RCCEx_PLLSAI2_Config>
 8002340:	4603      	mov	r3, r0
 8002342:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002344:	e003      	b.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	74fb      	strb	r3, [r7, #19]
      break;
 800234a:	e000      	b.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800234c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800234e:	7cfb      	ldrb	r3, [r7, #19]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d10b      	bne.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002354:	4b52      	ldr	r3, [pc, #328]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800235a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002362:	494f      	ldr	r1, [pc, #316]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002364:	4313      	orrs	r3, r2
 8002366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800236a:	e001      	b.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800236c:	7cfb      	ldrb	r3, [r7, #19]
 800236e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002378:	2b00      	cmp	r3, #0
 800237a:	f000 80a0 	beq.w	80024be <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800237e:	2300      	movs	r3, #0
 8002380:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002382:	4b47      	ldr	r3, [pc, #284]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800238e:	2301      	movs	r3, #1
 8002390:	e000      	b.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002392:	2300      	movs	r3, #0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00d      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002398:	4b41      	ldr	r3, [pc, #260]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800239a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239c:	4a40      	ldr	r2, [pc, #256]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800239e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a2:	6593      	str	r3, [r2, #88]	; 0x58
 80023a4:	4b3e      	ldr	r3, [pc, #248]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ac:	60bb      	str	r3, [r7, #8]
 80023ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023b0:	2301      	movs	r3, #1
 80023b2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023b4:	4b3b      	ldr	r3, [pc, #236]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a3a      	ldr	r2, [pc, #232]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023c0:	f7fe fb7c 	bl	8000abc <HAL_GetTick>
 80023c4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023c6:	e009      	b.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023c8:	f7fe fb78 	bl	8000abc <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d902      	bls.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	74fb      	strb	r3, [r7, #19]
        break;
 80023da:	e005      	b.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023dc:	4b31      	ldr	r3, [pc, #196]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d0ef      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80023e8:	7cfb      	ldrb	r3, [r7, #19]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d15c      	bne.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023ee:	4b2c      	ldr	r3, [pc, #176]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023f8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d01f      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	429a      	cmp	r2, r3
 800240a:	d019      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800240c:	4b24      	ldr	r3, [pc, #144]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800240e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002412:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002416:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002418:	4b21      	ldr	r3, [pc, #132]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800241a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800241e:	4a20      	ldr	r2, [pc, #128]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002424:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002428:	4b1d      	ldr	r3, [pc, #116]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800242a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800242e:	4a1c      	ldr	r2, [pc, #112]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002430:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002434:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002438:	4a19      	ldr	r2, [pc, #100]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b00      	cmp	r3, #0
 8002448:	d016      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244a:	f7fe fb37 	bl	8000abc <HAL_GetTick>
 800244e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002450:	e00b      	b.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002452:	f7fe fb33 	bl	8000abc <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002460:	4293      	cmp	r3, r2
 8002462:	d902      	bls.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	74fb      	strb	r3, [r7, #19]
            break;
 8002468:	e006      	b.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800246a:	4b0d      	ldr	r3, [pc, #52]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800246c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d0ec      	beq.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002478:	7cfb      	ldrb	r3, [r7, #19]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10c      	bne.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800247e:	4b08      	ldr	r3, [pc, #32]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002484:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800248e:	4904      	ldr	r1, [pc, #16]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002490:	4313      	orrs	r3, r2
 8002492:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002496:	e009      	b.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002498:	7cfb      	ldrb	r3, [r7, #19]
 800249a:	74bb      	strb	r3, [r7, #18]
 800249c:	e006      	b.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800249e:	bf00      	nop
 80024a0:	40021000 	.word	0x40021000
 80024a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024a8:	7cfb      	ldrb	r3, [r7, #19]
 80024aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024ac:	7c7b      	ldrb	r3, [r7, #17]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d105      	bne.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024b2:	4b9e      	ldr	r3, [pc, #632]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b6:	4a9d      	ldr	r2, [pc, #628]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024bc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00a      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024ca:	4b98      	ldr	r3, [pc, #608]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d0:	f023 0203 	bic.w	r2, r3, #3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d8:	4994      	ldr	r1, [pc, #592]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00a      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024ec:	4b8f      	ldr	r3, [pc, #572]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f2:	f023 020c 	bic.w	r2, r3, #12
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024fa:	498c      	ldr	r1, [pc, #560]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0304 	and.w	r3, r3, #4
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00a      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800250e:	4b87      	ldr	r3, [pc, #540]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002514:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251c:	4983      	ldr	r1, [pc, #524]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800251e:	4313      	orrs	r3, r2
 8002520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0308 	and.w	r3, r3, #8
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00a      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002530:	4b7e      	ldr	r3, [pc, #504]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002536:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253e:	497b      	ldr	r1, [pc, #492]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0310 	and.w	r3, r3, #16
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00a      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002552:	4b76      	ldr	r3, [pc, #472]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002558:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002560:	4972      	ldr	r1, [pc, #456]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002562:	4313      	orrs	r3, r2
 8002564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0320 	and.w	r3, r3, #32
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00a      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002574:	4b6d      	ldr	r3, [pc, #436]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002582:	496a      	ldr	r1, [pc, #424]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002584:	4313      	orrs	r3, r2
 8002586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00a      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002596:	4b65      	ldr	r3, [pc, #404]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a4:	4961      	ldr	r1, [pc, #388]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00a      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80025b8:	4b5c      	ldr	r3, [pc, #368]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025c6:	4959      	ldr	r1, [pc, #356]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00a      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025da:	4b54      	ldr	r3, [pc, #336]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025e8:	4950      	ldr	r1, [pc, #320]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00a      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025fc:	4b4b      	ldr	r3, [pc, #300]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002602:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800260a:	4948      	ldr	r1, [pc, #288]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00a      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800261e:	4b43      	ldr	r3, [pc, #268]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002624:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262c:	493f      	ldr	r1, [pc, #252]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800262e:	4313      	orrs	r3, r2
 8002630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d028      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002640:	4b3a      	ldr	r3, [pc, #232]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002646:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800264e:	4937      	ldr	r1, [pc, #220]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002650:	4313      	orrs	r3, r2
 8002652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800265a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800265e:	d106      	bne.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002660:	4b32      	ldr	r3, [pc, #200]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	4a31      	ldr	r2, [pc, #196]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002666:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800266a:	60d3      	str	r3, [r2, #12]
 800266c:	e011      	b.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002672:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002676:	d10c      	bne.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3304      	adds	r3, #4
 800267c:	2101      	movs	r1, #1
 800267e:	4618      	mov	r0, r3
 8002680:	f000 f8c8 	bl	8002814 <RCCEx_PLLSAI1_Config>
 8002684:	4603      	mov	r3, r0
 8002686:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002688:	7cfb      	ldrb	r3, [r7, #19]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800268e:	7cfb      	ldrb	r3, [r7, #19]
 8002690:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d028      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800269e:	4b23      	ldr	r3, [pc, #140]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ac:	491f      	ldr	r1, [pc, #124]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026bc:	d106      	bne.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026be:	4b1b      	ldr	r3, [pc, #108]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	4a1a      	ldr	r2, [pc, #104]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026c8:	60d3      	str	r3, [r2, #12]
 80026ca:	e011      	b.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026d4:	d10c      	bne.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	3304      	adds	r3, #4
 80026da:	2101      	movs	r1, #1
 80026dc:	4618      	mov	r0, r3
 80026de:	f000 f899 	bl	8002814 <RCCEx_PLLSAI1_Config>
 80026e2:	4603      	mov	r3, r0
 80026e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026e6:	7cfb      	ldrb	r3, [r7, #19]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80026ec:	7cfb      	ldrb	r3, [r7, #19]
 80026ee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d02b      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80026fc:	4b0b      	ldr	r3, [pc, #44]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002702:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800270a:	4908      	ldr	r1, [pc, #32]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800270c:	4313      	orrs	r3, r2
 800270e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002716:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800271a:	d109      	bne.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800271c:	4b03      	ldr	r3, [pc, #12]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	4a02      	ldr	r2, [pc, #8]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002722:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002726:	60d3      	str	r3, [r2, #12]
 8002728:	e014      	b.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800272a:	bf00      	nop
 800272c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002734:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002738:	d10c      	bne.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	3304      	adds	r3, #4
 800273e:	2101      	movs	r1, #1
 8002740:	4618      	mov	r0, r3
 8002742:	f000 f867 	bl	8002814 <RCCEx_PLLSAI1_Config>
 8002746:	4603      	mov	r3, r0
 8002748:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800274a:	7cfb      	ldrb	r3, [r7, #19]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002750:	7cfb      	ldrb	r3, [r7, #19]
 8002752:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d02f      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002760:	4b2b      	ldr	r3, [pc, #172]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002766:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800276e:	4928      	ldr	r1, [pc, #160]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002770:	4313      	orrs	r3, r2
 8002772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800277a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800277e:	d10d      	bne.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3304      	adds	r3, #4
 8002784:	2102      	movs	r1, #2
 8002786:	4618      	mov	r0, r3
 8002788:	f000 f844 	bl	8002814 <RCCEx_PLLSAI1_Config>
 800278c:	4603      	mov	r3, r0
 800278e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002790:	7cfb      	ldrb	r3, [r7, #19]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d014      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002796:	7cfb      	ldrb	r3, [r7, #19]
 8002798:	74bb      	strb	r3, [r7, #18]
 800279a:	e011      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027a4:	d10c      	bne.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	3320      	adds	r3, #32
 80027aa:	2102      	movs	r1, #2
 80027ac:	4618      	mov	r0, r3
 80027ae:	f000 f925 	bl	80029fc <RCCEx_PLLSAI2_Config>
 80027b2:	4603      	mov	r3, r0
 80027b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027b6:	7cfb      	ldrb	r3, [r7, #19]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80027bc:	7cfb      	ldrb	r3, [r7, #19]
 80027be:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00a      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80027cc:	4b10      	ldr	r3, [pc, #64]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027da:	490d      	ldr	r1, [pc, #52]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00b      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80027ee:	4b08      	ldr	r3, [pc, #32]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027fe:	4904      	ldr	r1, [pc, #16]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002800:	4313      	orrs	r3, r2
 8002802:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002806:	7cbb      	ldrb	r3, [r7, #18]
}
 8002808:	4618      	mov	r0, r3
 800280a:	3718      	adds	r7, #24
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40021000 	.word	0x40021000

08002814 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800281e:	2300      	movs	r3, #0
 8002820:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002822:	4b75      	ldr	r3, [pc, #468]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	f003 0303 	and.w	r3, r3, #3
 800282a:	2b00      	cmp	r3, #0
 800282c:	d018      	beq.n	8002860 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800282e:	4b72      	ldr	r3, [pc, #456]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	f003 0203 	and.w	r2, r3, #3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	429a      	cmp	r2, r3
 800283c:	d10d      	bne.n	800285a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
       ||
 8002842:	2b00      	cmp	r3, #0
 8002844:	d009      	beq.n	800285a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002846:	4b6c      	ldr	r3, [pc, #432]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	091b      	lsrs	r3, r3, #4
 800284c:	f003 0307 	and.w	r3, r3, #7
 8002850:	1c5a      	adds	r2, r3, #1
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
       ||
 8002856:	429a      	cmp	r2, r3
 8002858:	d047      	beq.n	80028ea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	73fb      	strb	r3, [r7, #15]
 800285e:	e044      	b.n	80028ea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2b03      	cmp	r3, #3
 8002866:	d018      	beq.n	800289a <RCCEx_PLLSAI1_Config+0x86>
 8002868:	2b03      	cmp	r3, #3
 800286a:	d825      	bhi.n	80028b8 <RCCEx_PLLSAI1_Config+0xa4>
 800286c:	2b01      	cmp	r3, #1
 800286e:	d002      	beq.n	8002876 <RCCEx_PLLSAI1_Config+0x62>
 8002870:	2b02      	cmp	r3, #2
 8002872:	d009      	beq.n	8002888 <RCCEx_PLLSAI1_Config+0x74>
 8002874:	e020      	b.n	80028b8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002876:	4b60      	ldr	r3, [pc, #384]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d11d      	bne.n	80028be <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002886:	e01a      	b.n	80028be <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002888:	4b5b      	ldr	r3, [pc, #364]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002890:	2b00      	cmp	r3, #0
 8002892:	d116      	bne.n	80028c2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002898:	e013      	b.n	80028c2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800289a:	4b57      	ldr	r3, [pc, #348]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10f      	bne.n	80028c6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028a6:	4b54      	ldr	r3, [pc, #336]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d109      	bne.n	80028c6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80028b6:	e006      	b.n	80028c6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	73fb      	strb	r3, [r7, #15]
      break;
 80028bc:	e004      	b.n	80028c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028be:	bf00      	nop
 80028c0:	e002      	b.n	80028c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028c2:	bf00      	nop
 80028c4:	e000      	b.n	80028c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80028c8:	7bfb      	ldrb	r3, [r7, #15]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10d      	bne.n	80028ea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80028ce:	4b4a      	ldr	r3, [pc, #296]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6819      	ldr	r1, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	3b01      	subs	r3, #1
 80028e0:	011b      	lsls	r3, r3, #4
 80028e2:	430b      	orrs	r3, r1
 80028e4:	4944      	ldr	r1, [pc, #272]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80028ea:	7bfb      	ldrb	r3, [r7, #15]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d17d      	bne.n	80029ec <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80028f0:	4b41      	ldr	r3, [pc, #260]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a40      	ldr	r2, [pc, #256]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80028fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028fc:	f7fe f8de 	bl	8000abc <HAL_GetTick>
 8002900:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002902:	e009      	b.n	8002918 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002904:	f7fe f8da 	bl	8000abc <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d902      	bls.n	8002918 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	73fb      	strb	r3, [r7, #15]
        break;
 8002916:	e005      	b.n	8002924 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002918:	4b37      	ldr	r3, [pc, #220]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1ef      	bne.n	8002904 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002924:	7bfb      	ldrb	r3, [r7, #15]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d160      	bne.n	80029ec <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d111      	bne.n	8002954 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002930:	4b31      	ldr	r3, [pc, #196]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002938:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	6892      	ldr	r2, [r2, #8]
 8002940:	0211      	lsls	r1, r2, #8
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	68d2      	ldr	r2, [r2, #12]
 8002946:	0912      	lsrs	r2, r2, #4
 8002948:	0452      	lsls	r2, r2, #17
 800294a:	430a      	orrs	r2, r1
 800294c:	492a      	ldr	r1, [pc, #168]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800294e:	4313      	orrs	r3, r2
 8002950:	610b      	str	r3, [r1, #16]
 8002952:	e027      	b.n	80029a4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d112      	bne.n	8002980 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800295a:	4b27      	ldr	r3, [pc, #156]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002962:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	6892      	ldr	r2, [r2, #8]
 800296a:	0211      	lsls	r1, r2, #8
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	6912      	ldr	r2, [r2, #16]
 8002970:	0852      	lsrs	r2, r2, #1
 8002972:	3a01      	subs	r2, #1
 8002974:	0552      	lsls	r2, r2, #21
 8002976:	430a      	orrs	r2, r1
 8002978:	491f      	ldr	r1, [pc, #124]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800297a:	4313      	orrs	r3, r2
 800297c:	610b      	str	r3, [r1, #16]
 800297e:	e011      	b.n	80029a4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002980:	4b1d      	ldr	r3, [pc, #116]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002988:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	6892      	ldr	r2, [r2, #8]
 8002990:	0211      	lsls	r1, r2, #8
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6952      	ldr	r2, [r2, #20]
 8002996:	0852      	lsrs	r2, r2, #1
 8002998:	3a01      	subs	r2, #1
 800299a:	0652      	lsls	r2, r2, #25
 800299c:	430a      	orrs	r2, r1
 800299e:	4916      	ldr	r1, [pc, #88]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80029a4:	4b14      	ldr	r3, [pc, #80]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a13      	ldr	r2, [pc, #76]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b0:	f7fe f884 	bl	8000abc <HAL_GetTick>
 80029b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029b6:	e009      	b.n	80029cc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029b8:	f7fe f880 	bl	8000abc <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d902      	bls.n	80029cc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	73fb      	strb	r3, [r7, #15]
          break;
 80029ca:	e005      	b.n	80029d8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029cc:	4b0a      	ldr	r3, [pc, #40]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d0ef      	beq.n	80029b8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80029d8:	7bfb      	ldrb	r3, [r7, #15]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d106      	bne.n	80029ec <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80029de:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029e0:	691a      	ldr	r2, [r3, #16]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	4904      	ldr	r1, [pc, #16]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80029ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40021000 	.word	0x40021000

080029fc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a06:	2300      	movs	r3, #0
 8002a08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a0a:	4b6a      	ldr	r3, [pc, #424]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	f003 0303 	and.w	r3, r3, #3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d018      	beq.n	8002a48 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002a16:	4b67      	ldr	r3, [pc, #412]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	f003 0203 	and.w	r2, r3, #3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d10d      	bne.n	8002a42 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
       ||
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d009      	beq.n	8002a42 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002a2e:	4b61      	ldr	r3, [pc, #388]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	091b      	lsrs	r3, r3, #4
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	1c5a      	adds	r2, r3, #1
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
       ||
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d047      	beq.n	8002ad2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	73fb      	strb	r3, [r7, #15]
 8002a46:	e044      	b.n	8002ad2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2b03      	cmp	r3, #3
 8002a4e:	d018      	beq.n	8002a82 <RCCEx_PLLSAI2_Config+0x86>
 8002a50:	2b03      	cmp	r3, #3
 8002a52:	d825      	bhi.n	8002aa0 <RCCEx_PLLSAI2_Config+0xa4>
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d002      	beq.n	8002a5e <RCCEx_PLLSAI2_Config+0x62>
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d009      	beq.n	8002a70 <RCCEx_PLLSAI2_Config+0x74>
 8002a5c:	e020      	b.n	8002aa0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a5e:	4b55      	ldr	r3, [pc, #340]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d11d      	bne.n	8002aa6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a6e:	e01a      	b.n	8002aa6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a70:	4b50      	ldr	r3, [pc, #320]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d116      	bne.n	8002aaa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a80:	e013      	b.n	8002aaa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a82:	4b4c      	ldr	r3, [pc, #304]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d10f      	bne.n	8002aae <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a8e:	4b49      	ldr	r3, [pc, #292]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d109      	bne.n	8002aae <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a9e:	e006      	b.n	8002aae <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	73fb      	strb	r3, [r7, #15]
      break;
 8002aa4:	e004      	b.n	8002ab0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002aa6:	bf00      	nop
 8002aa8:	e002      	b.n	8002ab0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002aaa:	bf00      	nop
 8002aac:	e000      	b.n	8002ab0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002aae:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ab0:	7bfb      	ldrb	r3, [r7, #15]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10d      	bne.n	8002ad2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ab6:	4b3f      	ldr	r3, [pc, #252]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6819      	ldr	r1, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	011b      	lsls	r3, r3, #4
 8002aca:	430b      	orrs	r3, r1
 8002acc:	4939      	ldr	r1, [pc, #228]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ad2:	7bfb      	ldrb	r3, [r7, #15]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d167      	bne.n	8002ba8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002ad8:	4b36      	ldr	r3, [pc, #216]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a35      	ldr	r2, [pc, #212]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ade:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ae2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ae4:	f7fd ffea 	bl	8000abc <HAL_GetTick>
 8002ae8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002aea:	e009      	b.n	8002b00 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002aec:	f7fd ffe6 	bl	8000abc <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d902      	bls.n	8002b00 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	73fb      	strb	r3, [r7, #15]
        break;
 8002afe:	e005      	b.n	8002b0c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b00:	4b2c      	ldr	r3, [pc, #176]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d1ef      	bne.n	8002aec <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b0c:	7bfb      	ldrb	r3, [r7, #15]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d14a      	bne.n	8002ba8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d111      	bne.n	8002b3c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b18:	4b26      	ldr	r3, [pc, #152]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b1a:	695b      	ldr	r3, [r3, #20]
 8002b1c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002b20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	6892      	ldr	r2, [r2, #8]
 8002b28:	0211      	lsls	r1, r2, #8
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	68d2      	ldr	r2, [r2, #12]
 8002b2e:	0912      	lsrs	r2, r2, #4
 8002b30:	0452      	lsls	r2, r2, #17
 8002b32:	430a      	orrs	r2, r1
 8002b34:	491f      	ldr	r1, [pc, #124]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	614b      	str	r3, [r1, #20]
 8002b3a:	e011      	b.n	8002b60 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b3c:	4b1d      	ldr	r3, [pc, #116]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002b44:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6892      	ldr	r2, [r2, #8]
 8002b4c:	0211      	lsls	r1, r2, #8
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	6912      	ldr	r2, [r2, #16]
 8002b52:	0852      	lsrs	r2, r2, #1
 8002b54:	3a01      	subs	r2, #1
 8002b56:	0652      	lsls	r2, r2, #25
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	4916      	ldr	r1, [pc, #88]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002b60:	4b14      	ldr	r3, [pc, #80]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a13      	ldr	r2, [pc, #76]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b6a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b6c:	f7fd ffa6 	bl	8000abc <HAL_GetTick>
 8002b70:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b72:	e009      	b.n	8002b88 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b74:	f7fd ffa2 	bl	8000abc <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d902      	bls.n	8002b88 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	73fb      	strb	r3, [r7, #15]
          break;
 8002b86:	e005      	b.n	8002b94 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b88:	4b0a      	ldr	r3, [pc, #40]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0ef      	beq.n	8002b74 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002b94:	7bfb      	ldrb	r3, [r7, #15]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d106      	bne.n	8002ba8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002b9a:	4b06      	ldr	r3, [pc, #24]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b9c:	695a      	ldr	r2, [r3, #20]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	4904      	ldr	r1, [pc, #16]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40021000 	.word	0x40021000

08002bb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e040      	b.n	8002c4c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d106      	bne.n	8002be0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f7fd fe04 	bl	80007e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2224      	movs	r2, #36	; 0x24
 8002be4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 0201 	bic.w	r2, r2, #1
 8002bf4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f82c 	bl	8002c54 <UART_SetConfig>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d101      	bne.n	8002c06 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e022      	b.n	8002c4c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d002      	beq.n	8002c14 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 fad8 	bl	80031c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689a      	ldr	r2, [r3, #8]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f042 0201 	orr.w	r2, r2, #1
 8002c42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 fb5f 	bl	8003308 <UART_CheckIdleState>
 8002c4a:	4603      	mov	r3, r0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3708      	adds	r7, #8
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c58:	b08a      	sub	sp, #40	; 0x28
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	431a      	orrs	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	431a      	orrs	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	69db      	ldr	r3, [r3, #28]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	4ba4      	ldr	r3, [pc, #656]	; (8002f14 <UART_SetConfig+0x2c0>)
 8002c84:	4013      	ands	r3, r2
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	6812      	ldr	r2, [r2, #0]
 8002c8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c8c:	430b      	orrs	r3, r1
 8002c8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	68da      	ldr	r2, [r3, #12]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a99      	ldr	r2, [pc, #612]	; (8002f18 <UART_SetConfig+0x2c4>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d004      	beq.n	8002cc0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a90      	ldr	r2, [pc, #576]	; (8002f1c <UART_SetConfig+0x2c8>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d126      	bne.n	8002d2c <UART_SetConfig+0xd8>
 8002cde:	4b90      	ldr	r3, [pc, #576]	; (8002f20 <UART_SetConfig+0x2cc>)
 8002ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce4:	f003 0303 	and.w	r3, r3, #3
 8002ce8:	2b03      	cmp	r3, #3
 8002cea:	d81b      	bhi.n	8002d24 <UART_SetConfig+0xd0>
 8002cec:	a201      	add	r2, pc, #4	; (adr r2, 8002cf4 <UART_SetConfig+0xa0>)
 8002cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf2:	bf00      	nop
 8002cf4:	08002d05 	.word	0x08002d05
 8002cf8:	08002d15 	.word	0x08002d15
 8002cfc:	08002d0d 	.word	0x08002d0d
 8002d00:	08002d1d 	.word	0x08002d1d
 8002d04:	2301      	movs	r3, #1
 8002d06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d0a:	e116      	b.n	8002f3a <UART_SetConfig+0x2e6>
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d12:	e112      	b.n	8002f3a <UART_SetConfig+0x2e6>
 8002d14:	2304      	movs	r3, #4
 8002d16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d1a:	e10e      	b.n	8002f3a <UART_SetConfig+0x2e6>
 8002d1c:	2308      	movs	r3, #8
 8002d1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d22:	e10a      	b.n	8002f3a <UART_SetConfig+0x2e6>
 8002d24:	2310      	movs	r3, #16
 8002d26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d2a:	e106      	b.n	8002f3a <UART_SetConfig+0x2e6>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a7c      	ldr	r2, [pc, #496]	; (8002f24 <UART_SetConfig+0x2d0>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d138      	bne.n	8002da8 <UART_SetConfig+0x154>
 8002d36:	4b7a      	ldr	r3, [pc, #488]	; (8002f20 <UART_SetConfig+0x2cc>)
 8002d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d3c:	f003 030c 	and.w	r3, r3, #12
 8002d40:	2b0c      	cmp	r3, #12
 8002d42:	d82d      	bhi.n	8002da0 <UART_SetConfig+0x14c>
 8002d44:	a201      	add	r2, pc, #4	; (adr r2, 8002d4c <UART_SetConfig+0xf8>)
 8002d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d4a:	bf00      	nop
 8002d4c:	08002d81 	.word	0x08002d81
 8002d50:	08002da1 	.word	0x08002da1
 8002d54:	08002da1 	.word	0x08002da1
 8002d58:	08002da1 	.word	0x08002da1
 8002d5c:	08002d91 	.word	0x08002d91
 8002d60:	08002da1 	.word	0x08002da1
 8002d64:	08002da1 	.word	0x08002da1
 8002d68:	08002da1 	.word	0x08002da1
 8002d6c:	08002d89 	.word	0x08002d89
 8002d70:	08002da1 	.word	0x08002da1
 8002d74:	08002da1 	.word	0x08002da1
 8002d78:	08002da1 	.word	0x08002da1
 8002d7c:	08002d99 	.word	0x08002d99
 8002d80:	2300      	movs	r3, #0
 8002d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d86:	e0d8      	b.n	8002f3a <UART_SetConfig+0x2e6>
 8002d88:	2302      	movs	r3, #2
 8002d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d8e:	e0d4      	b.n	8002f3a <UART_SetConfig+0x2e6>
 8002d90:	2304      	movs	r3, #4
 8002d92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d96:	e0d0      	b.n	8002f3a <UART_SetConfig+0x2e6>
 8002d98:	2308      	movs	r3, #8
 8002d9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d9e:	e0cc      	b.n	8002f3a <UART_SetConfig+0x2e6>
 8002da0:	2310      	movs	r3, #16
 8002da2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002da6:	e0c8      	b.n	8002f3a <UART_SetConfig+0x2e6>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a5e      	ldr	r2, [pc, #376]	; (8002f28 <UART_SetConfig+0x2d4>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d125      	bne.n	8002dfe <UART_SetConfig+0x1aa>
 8002db2:	4b5b      	ldr	r3, [pc, #364]	; (8002f20 <UART_SetConfig+0x2cc>)
 8002db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002dbc:	2b30      	cmp	r3, #48	; 0x30
 8002dbe:	d016      	beq.n	8002dee <UART_SetConfig+0x19a>
 8002dc0:	2b30      	cmp	r3, #48	; 0x30
 8002dc2:	d818      	bhi.n	8002df6 <UART_SetConfig+0x1a2>
 8002dc4:	2b20      	cmp	r3, #32
 8002dc6:	d00a      	beq.n	8002dde <UART_SetConfig+0x18a>
 8002dc8:	2b20      	cmp	r3, #32
 8002dca:	d814      	bhi.n	8002df6 <UART_SetConfig+0x1a2>
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d002      	beq.n	8002dd6 <UART_SetConfig+0x182>
 8002dd0:	2b10      	cmp	r3, #16
 8002dd2:	d008      	beq.n	8002de6 <UART_SetConfig+0x192>
 8002dd4:	e00f      	b.n	8002df6 <UART_SetConfig+0x1a2>
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ddc:	e0ad      	b.n	8002f3a <UART_SetConfig+0x2e6>
 8002dde:	2302      	movs	r3, #2
 8002de0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002de4:	e0a9      	b.n	8002f3a <UART_SetConfig+0x2e6>
 8002de6:	2304      	movs	r3, #4
 8002de8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dec:	e0a5      	b.n	8002f3a <UART_SetConfig+0x2e6>
 8002dee:	2308      	movs	r3, #8
 8002df0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002df4:	e0a1      	b.n	8002f3a <UART_SetConfig+0x2e6>
 8002df6:	2310      	movs	r3, #16
 8002df8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dfc:	e09d      	b.n	8002f3a <UART_SetConfig+0x2e6>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a4a      	ldr	r2, [pc, #296]	; (8002f2c <UART_SetConfig+0x2d8>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d125      	bne.n	8002e54 <UART_SetConfig+0x200>
 8002e08:	4b45      	ldr	r3, [pc, #276]	; (8002f20 <UART_SetConfig+0x2cc>)
 8002e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e0e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002e12:	2bc0      	cmp	r3, #192	; 0xc0
 8002e14:	d016      	beq.n	8002e44 <UART_SetConfig+0x1f0>
 8002e16:	2bc0      	cmp	r3, #192	; 0xc0
 8002e18:	d818      	bhi.n	8002e4c <UART_SetConfig+0x1f8>
 8002e1a:	2b80      	cmp	r3, #128	; 0x80
 8002e1c:	d00a      	beq.n	8002e34 <UART_SetConfig+0x1e0>
 8002e1e:	2b80      	cmp	r3, #128	; 0x80
 8002e20:	d814      	bhi.n	8002e4c <UART_SetConfig+0x1f8>
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d002      	beq.n	8002e2c <UART_SetConfig+0x1d8>
 8002e26:	2b40      	cmp	r3, #64	; 0x40
 8002e28:	d008      	beq.n	8002e3c <UART_SetConfig+0x1e8>
 8002e2a:	e00f      	b.n	8002e4c <UART_SetConfig+0x1f8>
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e32:	e082      	b.n	8002f3a <UART_SetConfig+0x2e6>
 8002e34:	2302      	movs	r3, #2
 8002e36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e3a:	e07e      	b.n	8002f3a <UART_SetConfig+0x2e6>
 8002e3c:	2304      	movs	r3, #4
 8002e3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e42:	e07a      	b.n	8002f3a <UART_SetConfig+0x2e6>
 8002e44:	2308      	movs	r3, #8
 8002e46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e4a:	e076      	b.n	8002f3a <UART_SetConfig+0x2e6>
 8002e4c:	2310      	movs	r3, #16
 8002e4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e52:	e072      	b.n	8002f3a <UART_SetConfig+0x2e6>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a35      	ldr	r2, [pc, #212]	; (8002f30 <UART_SetConfig+0x2dc>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d12a      	bne.n	8002eb4 <UART_SetConfig+0x260>
 8002e5e:	4b30      	ldr	r3, [pc, #192]	; (8002f20 <UART_SetConfig+0x2cc>)
 8002e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e6c:	d01a      	beq.n	8002ea4 <UART_SetConfig+0x250>
 8002e6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e72:	d81b      	bhi.n	8002eac <UART_SetConfig+0x258>
 8002e74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e78:	d00c      	beq.n	8002e94 <UART_SetConfig+0x240>
 8002e7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e7e:	d815      	bhi.n	8002eac <UART_SetConfig+0x258>
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <UART_SetConfig+0x238>
 8002e84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e88:	d008      	beq.n	8002e9c <UART_SetConfig+0x248>
 8002e8a:	e00f      	b.n	8002eac <UART_SetConfig+0x258>
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e92:	e052      	b.n	8002f3a <UART_SetConfig+0x2e6>
 8002e94:	2302      	movs	r3, #2
 8002e96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e9a:	e04e      	b.n	8002f3a <UART_SetConfig+0x2e6>
 8002e9c:	2304      	movs	r3, #4
 8002e9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ea2:	e04a      	b.n	8002f3a <UART_SetConfig+0x2e6>
 8002ea4:	2308      	movs	r3, #8
 8002ea6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002eaa:	e046      	b.n	8002f3a <UART_SetConfig+0x2e6>
 8002eac:	2310      	movs	r3, #16
 8002eae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002eb2:	e042      	b.n	8002f3a <UART_SetConfig+0x2e6>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a17      	ldr	r2, [pc, #92]	; (8002f18 <UART_SetConfig+0x2c4>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d13a      	bne.n	8002f34 <UART_SetConfig+0x2e0>
 8002ebe:	4b18      	ldr	r3, [pc, #96]	; (8002f20 <UART_SetConfig+0x2cc>)
 8002ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002ec8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ecc:	d01a      	beq.n	8002f04 <UART_SetConfig+0x2b0>
 8002ece:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ed2:	d81b      	bhi.n	8002f0c <UART_SetConfig+0x2b8>
 8002ed4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ed8:	d00c      	beq.n	8002ef4 <UART_SetConfig+0x2a0>
 8002eda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ede:	d815      	bhi.n	8002f0c <UART_SetConfig+0x2b8>
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d003      	beq.n	8002eec <UART_SetConfig+0x298>
 8002ee4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ee8:	d008      	beq.n	8002efc <UART_SetConfig+0x2a8>
 8002eea:	e00f      	b.n	8002f0c <UART_SetConfig+0x2b8>
 8002eec:	2300      	movs	r3, #0
 8002eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ef2:	e022      	b.n	8002f3a <UART_SetConfig+0x2e6>
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002efa:	e01e      	b.n	8002f3a <UART_SetConfig+0x2e6>
 8002efc:	2304      	movs	r3, #4
 8002efe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f02:	e01a      	b.n	8002f3a <UART_SetConfig+0x2e6>
 8002f04:	2308      	movs	r3, #8
 8002f06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f0a:	e016      	b.n	8002f3a <UART_SetConfig+0x2e6>
 8002f0c:	2310      	movs	r3, #16
 8002f0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f12:	e012      	b.n	8002f3a <UART_SetConfig+0x2e6>
 8002f14:	efff69f3 	.word	0xefff69f3
 8002f18:	40008000 	.word	0x40008000
 8002f1c:	40013800 	.word	0x40013800
 8002f20:	40021000 	.word	0x40021000
 8002f24:	40004400 	.word	0x40004400
 8002f28:	40004800 	.word	0x40004800
 8002f2c:	40004c00 	.word	0x40004c00
 8002f30:	40005000 	.word	0x40005000
 8002f34:	2310      	movs	r3, #16
 8002f36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a9f      	ldr	r2, [pc, #636]	; (80031bc <UART_SetConfig+0x568>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d17a      	bne.n	800303a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002f44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f48:	2b08      	cmp	r3, #8
 8002f4a:	d824      	bhi.n	8002f96 <UART_SetConfig+0x342>
 8002f4c:	a201      	add	r2, pc, #4	; (adr r2, 8002f54 <UART_SetConfig+0x300>)
 8002f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f52:	bf00      	nop
 8002f54:	08002f79 	.word	0x08002f79
 8002f58:	08002f97 	.word	0x08002f97
 8002f5c:	08002f81 	.word	0x08002f81
 8002f60:	08002f97 	.word	0x08002f97
 8002f64:	08002f87 	.word	0x08002f87
 8002f68:	08002f97 	.word	0x08002f97
 8002f6c:	08002f97 	.word	0x08002f97
 8002f70:	08002f97 	.word	0x08002f97
 8002f74:	08002f8f 	.word	0x08002f8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f78:	f7ff f8d6 	bl	8002128 <HAL_RCC_GetPCLK1Freq>
 8002f7c:	61f8      	str	r0, [r7, #28]
        break;
 8002f7e:	e010      	b.n	8002fa2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f80:	4b8f      	ldr	r3, [pc, #572]	; (80031c0 <UART_SetConfig+0x56c>)
 8002f82:	61fb      	str	r3, [r7, #28]
        break;
 8002f84:	e00d      	b.n	8002fa2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f86:	f7ff f837 	bl	8001ff8 <HAL_RCC_GetSysClockFreq>
 8002f8a:	61f8      	str	r0, [r7, #28]
        break;
 8002f8c:	e009      	b.n	8002fa2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f92:	61fb      	str	r3, [r7, #28]
        break;
 8002f94:	e005      	b.n	8002fa2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002f96:	2300      	movs	r3, #0
 8002f98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002fa0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f000 80fb 	beq.w	80031a0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	4413      	add	r3, r2
 8002fb4:	69fa      	ldr	r2, [r7, #28]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d305      	bcc.n	8002fc6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002fc0:	69fa      	ldr	r2, [r7, #28]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d903      	bls.n	8002fce <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002fcc:	e0e8      	b.n	80031a0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	461c      	mov	r4, r3
 8002fd4:	4615      	mov	r5, r2
 8002fd6:	f04f 0200 	mov.w	r2, #0
 8002fda:	f04f 0300 	mov.w	r3, #0
 8002fde:	022b      	lsls	r3, r5, #8
 8002fe0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002fe4:	0222      	lsls	r2, r4, #8
 8002fe6:	68f9      	ldr	r1, [r7, #12]
 8002fe8:	6849      	ldr	r1, [r1, #4]
 8002fea:	0849      	lsrs	r1, r1, #1
 8002fec:	2000      	movs	r0, #0
 8002fee:	4688      	mov	r8, r1
 8002ff0:	4681      	mov	r9, r0
 8002ff2:	eb12 0a08 	adds.w	sl, r2, r8
 8002ff6:	eb43 0b09 	adc.w	fp, r3, r9
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	603b      	str	r3, [r7, #0]
 8003002:	607a      	str	r2, [r7, #4]
 8003004:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003008:	4650      	mov	r0, sl
 800300a:	4659      	mov	r1, fp
 800300c:	f7fd f8e4 	bl	80001d8 <__aeabi_uldivmod>
 8003010:	4602      	mov	r2, r0
 8003012:	460b      	mov	r3, r1
 8003014:	4613      	mov	r3, r2
 8003016:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800301e:	d308      	bcc.n	8003032 <UART_SetConfig+0x3de>
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003026:	d204      	bcs.n	8003032 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	60da      	str	r2, [r3, #12]
 8003030:	e0b6      	b.n	80031a0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003038:	e0b2      	b.n	80031a0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003042:	d15e      	bne.n	8003102 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003044:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003048:	2b08      	cmp	r3, #8
 800304a:	d828      	bhi.n	800309e <UART_SetConfig+0x44a>
 800304c:	a201      	add	r2, pc, #4	; (adr r2, 8003054 <UART_SetConfig+0x400>)
 800304e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003052:	bf00      	nop
 8003054:	08003079 	.word	0x08003079
 8003058:	08003081 	.word	0x08003081
 800305c:	08003089 	.word	0x08003089
 8003060:	0800309f 	.word	0x0800309f
 8003064:	0800308f 	.word	0x0800308f
 8003068:	0800309f 	.word	0x0800309f
 800306c:	0800309f 	.word	0x0800309f
 8003070:	0800309f 	.word	0x0800309f
 8003074:	08003097 	.word	0x08003097
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003078:	f7ff f856 	bl	8002128 <HAL_RCC_GetPCLK1Freq>
 800307c:	61f8      	str	r0, [r7, #28]
        break;
 800307e:	e014      	b.n	80030aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003080:	f7ff f868 	bl	8002154 <HAL_RCC_GetPCLK2Freq>
 8003084:	61f8      	str	r0, [r7, #28]
        break;
 8003086:	e010      	b.n	80030aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003088:	4b4d      	ldr	r3, [pc, #308]	; (80031c0 <UART_SetConfig+0x56c>)
 800308a:	61fb      	str	r3, [r7, #28]
        break;
 800308c:	e00d      	b.n	80030aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800308e:	f7fe ffb3 	bl	8001ff8 <HAL_RCC_GetSysClockFreq>
 8003092:	61f8      	str	r0, [r7, #28]
        break;
 8003094:	e009      	b.n	80030aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003096:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800309a:	61fb      	str	r3, [r7, #28]
        break;
 800309c:	e005      	b.n	80030aa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800309e:	2300      	movs	r3, #0
 80030a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80030a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d077      	beq.n	80031a0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	005a      	lsls	r2, r3, #1
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	085b      	lsrs	r3, r3, #1
 80030ba:	441a      	add	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	2b0f      	cmp	r3, #15
 80030ca:	d916      	bls.n	80030fa <UART_SetConfig+0x4a6>
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030d2:	d212      	bcs.n	80030fa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	f023 030f 	bic.w	r3, r3, #15
 80030dc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	085b      	lsrs	r3, r3, #1
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	f003 0307 	and.w	r3, r3, #7
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	8afb      	ldrh	r3, [r7, #22]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	8afa      	ldrh	r2, [r7, #22]
 80030f6:	60da      	str	r2, [r3, #12]
 80030f8:	e052      	b.n	80031a0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003100:	e04e      	b.n	80031a0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003102:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003106:	2b08      	cmp	r3, #8
 8003108:	d827      	bhi.n	800315a <UART_SetConfig+0x506>
 800310a:	a201      	add	r2, pc, #4	; (adr r2, 8003110 <UART_SetConfig+0x4bc>)
 800310c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003110:	08003135 	.word	0x08003135
 8003114:	0800313d 	.word	0x0800313d
 8003118:	08003145 	.word	0x08003145
 800311c:	0800315b 	.word	0x0800315b
 8003120:	0800314b 	.word	0x0800314b
 8003124:	0800315b 	.word	0x0800315b
 8003128:	0800315b 	.word	0x0800315b
 800312c:	0800315b 	.word	0x0800315b
 8003130:	08003153 	.word	0x08003153
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003134:	f7fe fff8 	bl	8002128 <HAL_RCC_GetPCLK1Freq>
 8003138:	61f8      	str	r0, [r7, #28]
        break;
 800313a:	e014      	b.n	8003166 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800313c:	f7ff f80a 	bl	8002154 <HAL_RCC_GetPCLK2Freq>
 8003140:	61f8      	str	r0, [r7, #28]
        break;
 8003142:	e010      	b.n	8003166 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003144:	4b1e      	ldr	r3, [pc, #120]	; (80031c0 <UART_SetConfig+0x56c>)
 8003146:	61fb      	str	r3, [r7, #28]
        break;
 8003148:	e00d      	b.n	8003166 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800314a:	f7fe ff55 	bl	8001ff8 <HAL_RCC_GetSysClockFreq>
 800314e:	61f8      	str	r0, [r7, #28]
        break;
 8003150:	e009      	b.n	8003166 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003152:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003156:	61fb      	str	r3, [r7, #28]
        break;
 8003158:	e005      	b.n	8003166 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800315a:	2300      	movs	r3, #0
 800315c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003164:	bf00      	nop
    }

    if (pclk != 0U)
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d019      	beq.n	80031a0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	085a      	lsrs	r2, r3, #1
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	441a      	add	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	fbb2 f3f3 	udiv	r3, r2, r3
 800317e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	2b0f      	cmp	r3, #15
 8003184:	d909      	bls.n	800319a <UART_SetConfig+0x546>
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800318c:	d205      	bcs.n	800319a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	b29a      	uxth	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	60da      	str	r2, [r3, #12]
 8003198:	e002      	b.n	80031a0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80031ac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3728      	adds	r7, #40	; 0x28
 80031b4:	46bd      	mov	sp, r7
 80031b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031ba:	bf00      	nop
 80031bc:	40008000 	.word	0x40008000
 80031c0:	00f42400 	.word	0x00f42400

080031c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00a      	beq.n	80031ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00a      	beq.n	8003210 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	430a      	orrs	r2, r1
 800320e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003214:	f003 0304 	and.w	r3, r3, #4
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00a      	beq.n	8003232 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003236:	f003 0308 	and.w	r3, r3, #8
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00a      	beq.n	8003254 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	430a      	orrs	r2, r1
 8003252:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003258:	f003 0310 	and.w	r3, r3, #16
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00a      	beq.n	8003276 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	430a      	orrs	r2, r1
 8003274:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	f003 0320 	and.w	r3, r3, #32
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00a      	beq.n	8003298 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d01a      	beq.n	80032da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032c2:	d10a      	bne.n	80032da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00a      	beq.n	80032fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	430a      	orrs	r2, r1
 80032fa:	605a      	str	r2, [r3, #4]
  }
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af02      	add	r7, sp, #8
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003318:	f7fd fbd0 	bl	8000abc <HAL_GetTick>
 800331c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0308 	and.w	r3, r3, #8
 8003328:	2b08      	cmp	r3, #8
 800332a:	d10e      	bne.n	800334a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800332c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003330:	9300      	str	r3, [sp, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 f82d 	bl	800339a <UART_WaitOnFlagUntilTimeout>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e023      	b.n	8003392 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0304 	and.w	r3, r3, #4
 8003354:	2b04      	cmp	r3, #4
 8003356:	d10e      	bne.n	8003376 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003358:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800335c:	9300      	str	r3, [sp, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 f817 	bl	800339a <UART_WaitOnFlagUntilTimeout>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e00d      	b.n	8003392 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2220      	movs	r2, #32
 800337a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2220      	movs	r2, #32
 8003380:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b09c      	sub	sp, #112	; 0x70
 800339e:	af00      	add	r7, sp, #0
 80033a0:	60f8      	str	r0, [r7, #12]
 80033a2:	60b9      	str	r1, [r7, #8]
 80033a4:	603b      	str	r3, [r7, #0]
 80033a6:	4613      	mov	r3, r2
 80033a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033aa:	e0a5      	b.n	80034f8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b2:	f000 80a1 	beq.w	80034f8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033b6:	f7fd fb81 	bl	8000abc <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d302      	bcc.n	80033cc <UART_WaitOnFlagUntilTimeout+0x32>
 80033c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d13e      	bne.n	800344a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033d4:	e853 3f00 	ldrex	r3, [r3]
 80033d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80033da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80033e0:	667b      	str	r3, [r7, #100]	; 0x64
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	461a      	mov	r2, r3
 80033e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033ec:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80033f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80033f2:	e841 2300 	strex	r3, r2, [r1]
 80033f6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80033f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1e6      	bne.n	80033cc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	3308      	adds	r3, #8
 8003404:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003408:	e853 3f00 	ldrex	r3, [r3]
 800340c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800340e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003410:	f023 0301 	bic.w	r3, r3, #1
 8003414:	663b      	str	r3, [r7, #96]	; 0x60
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	3308      	adds	r3, #8
 800341c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800341e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003420:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003422:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003424:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003426:	e841 2300 	strex	r3, r2, [r1]
 800342a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800342c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1e5      	bne.n	80033fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2220      	movs	r2, #32
 8003436:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2220      	movs	r2, #32
 800343c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e067      	b.n	800351a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0304 	and.w	r3, r3, #4
 8003454:	2b00      	cmp	r3, #0
 8003456:	d04f      	beq.n	80034f8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003462:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003466:	d147      	bne.n	80034f8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003470:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800347a:	e853 3f00 	ldrex	r3, [r3]
 800347e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003482:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003486:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	461a      	mov	r2, r3
 800348e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003490:	637b      	str	r3, [r7, #52]	; 0x34
 8003492:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003494:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003496:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003498:	e841 2300 	strex	r3, r2, [r1]
 800349c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800349e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1e6      	bne.n	8003472 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	3308      	adds	r3, #8
 80034aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	e853 3f00 	ldrex	r3, [r3]
 80034b2:	613b      	str	r3, [r7, #16]
   return(result);
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	f023 0301 	bic.w	r3, r3, #1
 80034ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	3308      	adds	r3, #8
 80034c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80034c4:	623a      	str	r2, [r7, #32]
 80034c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c8:	69f9      	ldr	r1, [r7, #28]
 80034ca:	6a3a      	ldr	r2, [r7, #32]
 80034cc:	e841 2300 	strex	r3, r2, [r1]
 80034d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1e5      	bne.n	80034a4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2220      	movs	r2, #32
 80034dc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2220      	movs	r2, #32
 80034e2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2220      	movs	r2, #32
 80034e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e010      	b.n	800351a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	69da      	ldr	r2, [r3, #28]
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	4013      	ands	r3, r2
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	429a      	cmp	r2, r3
 8003506:	bf0c      	ite	eq
 8003508:	2301      	moveq	r3, #1
 800350a:	2300      	movne	r3, #0
 800350c:	b2db      	uxtb	r3, r3
 800350e:	461a      	mov	r2, r3
 8003510:	79fb      	ldrb	r3, [r7, #7]
 8003512:	429a      	cmp	r2, r3
 8003514:	f43f af4a 	beq.w	80033ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3770      	adds	r7, #112	; 0x70
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
	...

08003524 <__libc_init_array>:
 8003524:	b570      	push	{r4, r5, r6, lr}
 8003526:	4d0d      	ldr	r5, [pc, #52]	; (800355c <__libc_init_array+0x38>)
 8003528:	4c0d      	ldr	r4, [pc, #52]	; (8003560 <__libc_init_array+0x3c>)
 800352a:	1b64      	subs	r4, r4, r5
 800352c:	10a4      	asrs	r4, r4, #2
 800352e:	2600      	movs	r6, #0
 8003530:	42a6      	cmp	r6, r4
 8003532:	d109      	bne.n	8003548 <__libc_init_array+0x24>
 8003534:	4d0b      	ldr	r5, [pc, #44]	; (8003564 <__libc_init_array+0x40>)
 8003536:	4c0c      	ldr	r4, [pc, #48]	; (8003568 <__libc_init_array+0x44>)
 8003538:	f000 f82e 	bl	8003598 <_init>
 800353c:	1b64      	subs	r4, r4, r5
 800353e:	10a4      	asrs	r4, r4, #2
 8003540:	2600      	movs	r6, #0
 8003542:	42a6      	cmp	r6, r4
 8003544:	d105      	bne.n	8003552 <__libc_init_array+0x2e>
 8003546:	bd70      	pop	{r4, r5, r6, pc}
 8003548:	f855 3b04 	ldr.w	r3, [r5], #4
 800354c:	4798      	blx	r3
 800354e:	3601      	adds	r6, #1
 8003550:	e7ee      	b.n	8003530 <__libc_init_array+0xc>
 8003552:	f855 3b04 	ldr.w	r3, [r5], #4
 8003556:	4798      	blx	r3
 8003558:	3601      	adds	r6, #1
 800355a:	e7f2      	b.n	8003542 <__libc_init_array+0x1e>
 800355c:	080036bc 	.word	0x080036bc
 8003560:	080036bc 	.word	0x080036bc
 8003564:	080036bc 	.word	0x080036bc
 8003568:	080036c0 	.word	0x080036c0

0800356c <memcpy>:
 800356c:	440a      	add	r2, r1
 800356e:	4291      	cmp	r1, r2
 8003570:	f100 33ff 	add.w	r3, r0, #4294967295
 8003574:	d100      	bne.n	8003578 <memcpy+0xc>
 8003576:	4770      	bx	lr
 8003578:	b510      	push	{r4, lr}
 800357a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800357e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003582:	4291      	cmp	r1, r2
 8003584:	d1f9      	bne.n	800357a <memcpy+0xe>
 8003586:	bd10      	pop	{r4, pc}

08003588 <memset>:
 8003588:	4402      	add	r2, r0
 800358a:	4603      	mov	r3, r0
 800358c:	4293      	cmp	r3, r2
 800358e:	d100      	bne.n	8003592 <memset+0xa>
 8003590:	4770      	bx	lr
 8003592:	f803 1b01 	strb.w	r1, [r3], #1
 8003596:	e7f9      	b.n	800358c <memset+0x4>

08003598 <_init>:
 8003598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800359a:	bf00      	nop
 800359c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800359e:	bc08      	pop	{r3}
 80035a0:	469e      	mov	lr, r3
 80035a2:	4770      	bx	lr

080035a4 <_fini>:
 80035a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035a6:	bf00      	nop
 80035a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035aa:	bc08      	pop	{r3}
 80035ac:	469e      	mov	lr, r3
 80035ae:	4770      	bx	lr
