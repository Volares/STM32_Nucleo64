
nucleo-l476rg-SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000485c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  080049ec  080049ec  000149ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a88  08004a88  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004a88  08004a88  00014a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a90  08004a90  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a90  08004a90  00014a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a94  08004a94  00014a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004a98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000070  08004b08  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  08004b08  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c742  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019ea  00000000  00000000  0002c7e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  0002e1d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a00  00000000  00000000  0002ec78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002652a  00000000  00000000  0002f678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cbb0  00000000  00000000  00055ba2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ebce3  00000000  00000000  00062752  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014e435  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f50  00000000  00000000  0014e488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080049d4 	.word	0x080049d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080049d4 	.word	0x080049d4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b094      	sub	sp, #80	; 0x50
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057a:	f000 faed 	bl	8000b58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057e:	f000 f861 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000582:	f000 f91f 	bl	80007c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000586:	f000 f8ed 	bl	8000764 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800058a:	f000 f8ad 	bl	80006e8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // CS pin should default high
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800058e:	2201      	movs	r2, #1
 8000590:	2140      	movs	r1, #64	; 0x40
 8000592:	4825      	ldr	r0, [pc, #148]	; (8000628 <main+0xb4>)
 8000594:	f000 fdec 	bl	8001170 <HAL_GPIO_WritePin>

  // Say something
  uart_buf_len = sprintf(uart_buf, "SPI TEST\r\n");
 8000598:	f107 0318 	add.w	r3, r7, #24
 800059c:	4923      	ldr	r1, [pc, #140]	; (800062c <main+0xb8>)
 800059e:	4618      	mov	r0, r3
 80005a0:	f003 fdaa 	bl	80040f8 <siprintf>
 80005a4:	64f8      	str	r0, [r7, #76]	; 0x4c
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 80005a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80005a8:	b29a      	uxth	r2, r3
 80005aa:	f107 0118 	add.w	r1, r7, #24
 80005ae:	2364      	movs	r3, #100	; 0x64
 80005b0:	481f      	ldr	r0, [pc, #124]	; (8000630 <main+0xbc>)
 80005b2:	f003 f873 	bl	800369c <HAL_UART_Transmit>

  // Enable write enable latch (allow write operations
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2140      	movs	r1, #64	; 0x40
 80005ba:	481b      	ldr	r0, [pc, #108]	; (8000628 <main+0xb4>)
 80005bc:	f000 fdd8 	bl	8001170 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_WREN, 1, 100);
 80005c0:	2364      	movs	r3, #100	; 0x64
 80005c2:	2201      	movs	r2, #1
 80005c4:	491b      	ldr	r1, [pc, #108]	; (8000634 <main+0xc0>)
 80005c6:	481c      	ldr	r0, [pc, #112]	; (8000638 <main+0xc4>)
 80005c8:	f002 f9ad 	bl	8002926 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80005cc:	2201      	movs	r2, #1
 80005ce:	2140      	movs	r1, #64	; 0x40
 80005d0:	4815      	ldr	r0, [pc, #84]	; (8000628 <main+0xb4>)
 80005d2:	f000 fdcd 	bl	8001170 <HAL_GPIO_WritePin>

  // Read status register
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2140      	movs	r1, #64	; 0x40
 80005da:	4813      	ldr	r0, [pc, #76]	; (8000628 <main+0xb4>)
 80005dc:	f000 fdc8 	bl	8001170 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_RDSR, 1, 100);
 80005e0:	2364      	movs	r3, #100	; 0x64
 80005e2:	2201      	movs	r2, #1
 80005e4:	4915      	ldr	r1, [pc, #84]	; (800063c <main+0xc8>)
 80005e6:	4814      	ldr	r0, [pc, #80]	; (8000638 <main+0xc4>)
 80005e8:	f002 f99d 	bl	8002926 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, (uint8_t *)spi_buf, 1, 100);
 80005ec:	1d39      	adds	r1, r7, #4
 80005ee:	2364      	movs	r3, #100	; 0x64
 80005f0:	2201      	movs	r2, #1
 80005f2:	4811      	ldr	r0, [pc, #68]	; (8000638 <main+0xc4>)
 80005f4:	f002 fb05 	bl	8002c02 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80005f8:	2201      	movs	r2, #1
 80005fa:	2140      	movs	r1, #64	; 0x40
 80005fc:	480a      	ldr	r0, [pc, #40]	; (8000628 <main+0xb4>)
 80005fe:	f000 fdb7 	bl	8001170 <HAL_GPIO_WritePin>

  // Print out status register
  uart_buf_len = sprintf(uart_buf,
		  	  	  	  	  "Status: 0x%02x\r\n",
						  (unsigned int)spi_buf[0]);
 8000602:	793b      	ldrb	r3, [r7, #4]
  uart_buf_len = sprintf(uart_buf,
 8000604:	461a      	mov	r2, r3
 8000606:	f107 0318 	add.w	r3, r7, #24
 800060a:	490d      	ldr	r1, [pc, #52]	; (8000640 <main+0xcc>)
 800060c:	4618      	mov	r0, r3
 800060e:	f003 fd73 	bl	80040f8 <siprintf>
 8000612:	64f8      	str	r0, [r7, #76]	; 0x4c
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000616:	b29a      	uxth	r2, r3
 8000618:	f107 0118 	add.w	r1, r7, #24
 800061c:	2364      	movs	r3, #100	; 0x64
 800061e:	4804      	ldr	r0, [pc, #16]	; (8000630 <main+0xbc>)
 8000620:	f003 f83c 	bl	800369c <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000624:	e7fe      	b.n	8000624 <main+0xb0>
 8000626:	bf00      	nop
 8000628:	48000400 	.word	0x48000400
 800062c:	080049ec 	.word	0x080049ec
 8000630:	200000f0 	.word	0x200000f0
 8000634:	08004a09 	.word	0x08004a09
 8000638:	2000008c 	.word	0x2000008c
 800063c:	08004a0a 	.word	0x08004a0a
 8000640:	080049f8 	.word	0x080049f8

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b096      	sub	sp, #88	; 0x58
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	2244      	movs	r2, #68	; 0x44
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f003 fd48 	bl	80040e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	463b      	mov	r3, r7
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]
 8000664:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000666:	f44f 7000 	mov.w	r0, #512	; 0x200
 800066a:	f000 fda7 	bl	80011bc <HAL_PWREx_ControlVoltageScaling>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000674:	f000 f90c 	bl	8000890 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000678:	2302      	movs	r3, #2
 800067a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000680:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000682:	2310      	movs	r3, #16
 8000684:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000686:	2302      	movs	r3, #2
 8000688:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800068a:	2302      	movs	r3, #2
 800068c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800068e:	2301      	movs	r3, #1
 8000690:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000692:	230a      	movs	r3, #10
 8000694:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000696:	2307      	movs	r3, #7
 8000698:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800069a:	2302      	movs	r3, #2
 800069c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800069e:	2302      	movs	r3, #2
 80006a0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a2:	f107 0314 	add.w	r3, r7, #20
 80006a6:	4618      	mov	r0, r3
 80006a8:	f000 fdde 	bl	8001268 <HAL_RCC_OscConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006b2:	f000 f8ed 	bl	8000890 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b6:	230f      	movs	r3, #15
 80006b8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ba:	2303      	movs	r3, #3
 80006bc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006ca:	463b      	mov	r3, r7
 80006cc:	2104      	movs	r1, #4
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 f9a6 	bl	8001a20 <HAL_RCC_ClockConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006da:	f000 f8d9 	bl	8000890 <Error_Handler>
  }
}
 80006de:	bf00      	nop
 80006e0:	3758      	adds	r7, #88	; 0x58
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
	...

080006e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006ec:	4b1b      	ldr	r3, [pc, #108]	; (800075c <MX_SPI1_Init+0x74>)
 80006ee:	4a1c      	ldr	r2, [pc, #112]	; (8000760 <MX_SPI1_Init+0x78>)
 80006f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006f2:	4b1a      	ldr	r3, [pc, #104]	; (800075c <MX_SPI1_Init+0x74>)
 80006f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006fa:	4b18      	ldr	r3, [pc, #96]	; (800075c <MX_SPI1_Init+0x74>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000700:	4b16      	ldr	r3, [pc, #88]	; (800075c <MX_SPI1_Init+0x74>)
 8000702:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000706:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000708:	4b14      	ldr	r3, [pc, #80]	; (800075c <MX_SPI1_Init+0x74>)
 800070a:	2200      	movs	r2, #0
 800070c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800070e:	4b13      	ldr	r3, [pc, #76]	; (800075c <MX_SPI1_Init+0x74>)
 8000710:	2200      	movs	r2, #0
 8000712:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000714:	4b11      	ldr	r3, [pc, #68]	; (800075c <MX_SPI1_Init+0x74>)
 8000716:	f44f 7200 	mov.w	r2, #512	; 0x200
 800071a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800071c:	4b0f      	ldr	r3, [pc, #60]	; (800075c <MX_SPI1_Init+0x74>)
 800071e:	2228      	movs	r2, #40	; 0x28
 8000720:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <MX_SPI1_Init+0x74>)
 8000724:	2200      	movs	r2, #0
 8000726:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000728:	4b0c      	ldr	r3, [pc, #48]	; (800075c <MX_SPI1_Init+0x74>)
 800072a:	2200      	movs	r2, #0
 800072c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800072e:	4b0b      	ldr	r3, [pc, #44]	; (800075c <MX_SPI1_Init+0x74>)
 8000730:	2200      	movs	r2, #0
 8000732:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000734:	4b09      	ldr	r3, [pc, #36]	; (800075c <MX_SPI1_Init+0x74>)
 8000736:	2207      	movs	r2, #7
 8000738:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800073a:	4b08      	ldr	r3, [pc, #32]	; (800075c <MX_SPI1_Init+0x74>)
 800073c:	2200      	movs	r2, #0
 800073e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <MX_SPI1_Init+0x74>)
 8000742:	2200      	movs	r2, #0
 8000744:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000746:	4805      	ldr	r0, [pc, #20]	; (800075c <MX_SPI1_Init+0x74>)
 8000748:	f002 f84a 	bl	80027e0 <HAL_SPI_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000752:	f000 f89d 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	2000008c 	.word	0x2000008c
 8000760:	40013000 	.word	0x40013000

08000764 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000768:	4b14      	ldr	r3, [pc, #80]	; (80007bc <MX_USART2_UART_Init+0x58>)
 800076a:	4a15      	ldr	r2, [pc, #84]	; (80007c0 <MX_USART2_UART_Init+0x5c>)
 800076c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800076e:	4b13      	ldr	r3, [pc, #76]	; (80007bc <MX_USART2_UART_Init+0x58>)
 8000770:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000774:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000776:	4b11      	ldr	r3, [pc, #68]	; (80007bc <MX_USART2_UART_Init+0x58>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800077c:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <MX_USART2_UART_Init+0x58>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <MX_USART2_UART_Init+0x58>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000788:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <MX_USART2_UART_Init+0x58>)
 800078a:	220c      	movs	r2, #12
 800078c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <MX_USART2_UART_Init+0x58>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000794:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_USART2_UART_Init+0x58>)
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800079a:	4b08      	ldr	r3, [pc, #32]	; (80007bc <MX_USART2_UART_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <MX_USART2_UART_Init+0x58>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007a6:	4805      	ldr	r0, [pc, #20]	; (80007bc <MX_USART2_UART_Init+0x58>)
 80007a8:	f002 ff2a 	bl	8003600 <HAL_UART_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007b2:	f000 f86d 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	200000f0 	.word	0x200000f0
 80007c0:	40004400 	.word	0x40004400

080007c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08a      	sub	sp, #40	; 0x28
 80007c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007da:	4b2a      	ldr	r3, [pc, #168]	; (8000884 <MX_GPIO_Init+0xc0>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	4a29      	ldr	r2, [pc, #164]	; (8000884 <MX_GPIO_Init+0xc0>)
 80007e0:	f043 0304 	orr.w	r3, r3, #4
 80007e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e6:	4b27      	ldr	r3, [pc, #156]	; (8000884 <MX_GPIO_Init+0xc0>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	f003 0304 	and.w	r3, r3, #4
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007f2:	4b24      	ldr	r3, [pc, #144]	; (8000884 <MX_GPIO_Init+0xc0>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f6:	4a23      	ldr	r2, [pc, #140]	; (8000884 <MX_GPIO_Init+0xc0>)
 80007f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007fe:	4b21      	ldr	r3, [pc, #132]	; (8000884 <MX_GPIO_Init+0xc0>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	4b1e      	ldr	r3, [pc, #120]	; (8000884 <MX_GPIO_Init+0xc0>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080e:	4a1d      	ldr	r2, [pc, #116]	; (8000884 <MX_GPIO_Init+0xc0>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000816:	4b1b      	ldr	r3, [pc, #108]	; (8000884 <MX_GPIO_Init+0xc0>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	4b18      	ldr	r3, [pc, #96]	; (8000884 <MX_GPIO_Init+0xc0>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	4a17      	ldr	r2, [pc, #92]	; (8000884 <MX_GPIO_Init+0xc0>)
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082e:	4b15      	ldr	r3, [pc, #84]	; (8000884 <MX_GPIO_Init+0xc0>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	2140      	movs	r1, #64	; 0x40
 800083e:	4812      	ldr	r0, [pc, #72]	; (8000888 <MX_GPIO_Init+0xc4>)
 8000840:	f000 fc96 	bl	8001170 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000844:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000848:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800084a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800084e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	4619      	mov	r1, r3
 800085a:	480c      	ldr	r0, [pc, #48]	; (800088c <MX_GPIO_Init+0xc8>)
 800085c:	f000 fade 	bl	8000e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000860:	2340      	movs	r3, #64	; 0x40
 8000862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000864:	2301      	movs	r3, #1
 8000866:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086c:	2300      	movs	r3, #0
 800086e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	4619      	mov	r1, r3
 8000876:	4804      	ldr	r0, [pc, #16]	; (8000888 <MX_GPIO_Init+0xc4>)
 8000878:	f000 fad0 	bl	8000e1c <HAL_GPIO_Init>

}
 800087c:	bf00      	nop
 800087e:	3728      	adds	r7, #40	; 0x28
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40021000 	.word	0x40021000
 8000888:	48000400 	.word	0x48000400
 800088c:	48000800 	.word	0x48000800

08000890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000894:	b672      	cpsid	i
}
 8000896:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000898:	e7fe      	b.n	8000898 <Error_Handler+0x8>
	...

0800089c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a2:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <HAL_MspInit+0x44>)
 80008a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008a6:	4a0e      	ldr	r2, [pc, #56]	; (80008e0 <HAL_MspInit+0x44>)
 80008a8:	f043 0301 	orr.w	r3, r3, #1
 80008ac:	6613      	str	r3, [r2, #96]	; 0x60
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <HAL_MspInit+0x44>)
 80008b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <HAL_MspInit+0x44>)
 80008bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008be:	4a08      	ldr	r2, [pc, #32]	; (80008e0 <HAL_MspInit+0x44>)
 80008c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c4:	6593      	str	r3, [r2, #88]	; 0x58
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <HAL_MspInit+0x44>)
 80008c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d2:	bf00      	nop
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	40021000 	.word	0x40021000

080008e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08a      	sub	sp, #40	; 0x28
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a17      	ldr	r2, [pc, #92]	; (8000960 <HAL_SPI_MspInit+0x7c>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d128      	bne.n	8000958 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000906:	4b17      	ldr	r3, [pc, #92]	; (8000964 <HAL_SPI_MspInit+0x80>)
 8000908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800090a:	4a16      	ldr	r2, [pc, #88]	; (8000964 <HAL_SPI_MspInit+0x80>)
 800090c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000910:	6613      	str	r3, [r2, #96]	; 0x60
 8000912:	4b14      	ldr	r3, [pc, #80]	; (8000964 <HAL_SPI_MspInit+0x80>)
 8000914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000916:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800091a:	613b      	str	r3, [r7, #16]
 800091c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <HAL_SPI_MspInit+0x80>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000922:	4a10      	ldr	r2, [pc, #64]	; (8000964 <HAL_SPI_MspInit+0x80>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	64d3      	str	r3, [r2, #76]	; 0x4c
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <HAL_SPI_MspInit+0x80>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000936:	23e0      	movs	r3, #224	; 0xe0
 8000938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093a:	2302      	movs	r3, #2
 800093c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000942:	2303      	movs	r3, #3
 8000944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000946:	2305      	movs	r3, #5
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	4619      	mov	r1, r3
 8000950:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000954:	f000 fa62 	bl	8000e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000958:	bf00      	nop
 800095a:	3728      	adds	r7, #40	; 0x28
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40013000 	.word	0x40013000
 8000964:	40021000 	.word	0x40021000

08000968 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b0ac      	sub	sp, #176	; 0xb0
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	2288      	movs	r2, #136	; 0x88
 8000986:	2100      	movs	r1, #0
 8000988:	4618      	mov	r0, r3
 800098a:	f003 fbad 	bl	80040e8 <memset>
  if(huart->Instance==USART2)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a21      	ldr	r2, [pc, #132]	; (8000a18 <HAL_UART_MspInit+0xb0>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d13b      	bne.n	8000a10 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000998:	2302      	movs	r3, #2
 800099a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800099c:	2300      	movs	r3, #0
 800099e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	4618      	mov	r0, r3
 80009a6:	f001 fa5f 	bl	8001e68 <HAL_RCCEx_PeriphCLKConfig>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009b0:	f7ff ff6e 	bl	8000890 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009b4:	4b19      	ldr	r3, [pc, #100]	; (8000a1c <HAL_UART_MspInit+0xb4>)
 80009b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009b8:	4a18      	ldr	r2, [pc, #96]	; (8000a1c <HAL_UART_MspInit+0xb4>)
 80009ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009be:	6593      	str	r3, [r2, #88]	; 0x58
 80009c0:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <HAL_UART_MspInit+0xb4>)
 80009c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009c8:	613b      	str	r3, [r7, #16]
 80009ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009cc:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <HAL_UART_MspInit+0xb4>)
 80009ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d0:	4a12      	ldr	r2, [pc, #72]	; (8000a1c <HAL_UART_MspInit+0xb4>)
 80009d2:	f043 0301 	orr.w	r3, r3, #1
 80009d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d8:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <HAL_UART_MspInit+0xb4>)
 80009da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009dc:	f003 0301 	and.w	r3, r3, #1
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009e4:	230c      	movs	r3, #12
 80009e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ea:	2302      	movs	r3, #2
 80009ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f6:	2303      	movs	r3, #3
 80009f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009fc:	2307      	movs	r3, #7
 80009fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a02:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a06:	4619      	mov	r1, r3
 8000a08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a0c:	f000 fa06 	bl	8000e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a10:	bf00      	nop
 8000a12:	37b0      	adds	r7, #176	; 0xb0
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40004400 	.word	0x40004400
 8000a1c:	40021000 	.word	0x40021000

08000a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <NMI_Handler+0x4>

08000a26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a2a:	e7fe      	b.n	8000a2a <HardFault_Handler+0x4>

08000a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <MemManage_Handler+0x4>

08000a32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a36:	e7fe      	b.n	8000a36 <BusFault_Handler+0x4>

08000a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <UsageFault_Handler+0x4>

08000a3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr

08000a5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a6c:	f000 f8d0 	bl	8000c10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a7c:	4a14      	ldr	r2, [pc, #80]	; (8000ad0 <_sbrk+0x5c>)
 8000a7e:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <_sbrk+0x60>)
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a88:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <_sbrk+0x64>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d102      	bne.n	8000a96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a90:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <_sbrk+0x64>)
 8000a92:	4a12      	ldr	r2, [pc, #72]	; (8000adc <_sbrk+0x68>)
 8000a94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a96:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <_sbrk+0x64>)
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d207      	bcs.n	8000ab4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aa4:	f003 faf6 	bl	8004094 <__errno>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	220c      	movs	r2, #12
 8000aac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aae:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab2:	e009      	b.n	8000ac8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ab4:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <_sbrk+0x64>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aba:	4b07      	ldr	r3, [pc, #28]	; (8000ad8 <_sbrk+0x64>)
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	4a05      	ldr	r2, [pc, #20]	; (8000ad8 <_sbrk+0x64>)
 8000ac4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3718      	adds	r7, #24
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20018000 	.word	0x20018000
 8000ad4:	00000400 	.word	0x00000400
 8000ad8:	20000174 	.word	0x20000174
 8000adc:	20000190 	.word	0x20000190

08000ae0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <SystemInit+0x20>)
 8000ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aea:	4a05      	ldr	r2, [pc, #20]	; (8000b00 <SystemInit+0x20>)
 8000aec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000af0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b3c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b08:	f7ff ffea 	bl	8000ae0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b0c:	480c      	ldr	r0, [pc, #48]	; (8000b40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b0e:	490d      	ldr	r1, [pc, #52]	; (8000b44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b10:	4a0d      	ldr	r2, [pc, #52]	; (8000b48 <LoopForever+0xe>)
  movs r3, #0
 8000b12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b14:	e002      	b.n	8000b1c <LoopCopyDataInit>

08000b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1a:	3304      	adds	r3, #4

08000b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b20:	d3f9      	bcc.n	8000b16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b22:	4a0a      	ldr	r2, [pc, #40]	; (8000b4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b24:	4c0a      	ldr	r4, [pc, #40]	; (8000b50 <LoopForever+0x16>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b28:	e001      	b.n	8000b2e <LoopFillZerobss>

08000b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b2c:	3204      	adds	r2, #4

08000b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b30:	d3fb      	bcc.n	8000b2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b32:	f003 fab5 	bl	80040a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b36:	f7ff fd1d 	bl	8000574 <main>

08000b3a <LoopForever>:

LoopForever:
    b LoopForever
 8000b3a:	e7fe      	b.n	8000b3a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b3c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b44:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b48:	08004a98 	.word	0x08004a98
  ldr r2, =_sbss
 8000b4c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b50:	2000018c 	.word	0x2000018c

08000b54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b54:	e7fe      	b.n	8000b54 <ADC1_2_IRQHandler>
	...

08000b58 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b62:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <HAL_Init+0x3c>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a0b      	ldr	r2, [pc, #44]	; (8000b94 <HAL_Init+0x3c>)
 8000b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b6c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b6e:	2003      	movs	r0, #3
 8000b70:	f000 f920 	bl	8000db4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b74:	2000      	movs	r0, #0
 8000b76:	f000 f80f 	bl	8000b98 <HAL_InitTick>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d002      	beq.n	8000b86 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b80:	2301      	movs	r3, #1
 8000b82:	71fb      	strb	r3, [r7, #7]
 8000b84:	e001      	b.n	8000b8a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b86:	f7ff fe89 	bl	800089c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40022000 	.word	0x40022000

08000b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ba4:	4b17      	ldr	r3, [pc, #92]	; (8000c04 <HAL_InitTick+0x6c>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d023      	beq.n	8000bf4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bac:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <HAL_InitTick+0x70>)
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	4b14      	ldr	r3, [pc, #80]	; (8000c04 <HAL_InitTick+0x6c>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f000 f91d 	bl	8000e02 <HAL_SYSTICK_Config>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d10f      	bne.n	8000bee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2b0f      	cmp	r3, #15
 8000bd2:	d809      	bhi.n	8000be8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	6879      	ldr	r1, [r7, #4]
 8000bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bdc:	f000 f8f5 	bl	8000dca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000be0:	4a0a      	ldr	r2, [pc, #40]	; (8000c0c <HAL_InitTick+0x74>)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6013      	str	r3, [r2, #0]
 8000be6:	e007      	b.n	8000bf8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000be8:	2301      	movs	r3, #1
 8000bea:	73fb      	strb	r3, [r7, #15]
 8000bec:	e004      	b.n	8000bf8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	73fb      	strb	r3, [r7, #15]
 8000bf2:	e001      	b.n	8000bf8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000008 	.word	0x20000008
 8000c08:	20000000 	.word	0x20000000
 8000c0c:	20000004 	.word	0x20000004

08000c10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <HAL_IncTick+0x20>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <HAL_IncTick+0x24>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4413      	add	r3, r2
 8000c20:	4a04      	ldr	r2, [pc, #16]	; (8000c34 <HAL_IncTick+0x24>)
 8000c22:	6013      	str	r3, [r2, #0]
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	20000008 	.word	0x20000008
 8000c34:	20000178 	.word	0x20000178

08000c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c3c:	4b03      	ldr	r3, [pc, #12]	; (8000c4c <HAL_GetTick+0x14>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	20000178 	.word	0x20000178

08000c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <__NVIC_SetPriorityGrouping+0x44>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c82:	4a04      	ldr	r2, [pc, #16]	; (8000c94 <__NVIC_SetPriorityGrouping+0x44>)
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	60d3      	str	r3, [r2, #12]
}
 8000c88:	bf00      	nop
 8000c8a:	3714      	adds	r7, #20
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c9c:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	0a1b      	lsrs	r3, r3, #8
 8000ca2:	f003 0307 	and.w	r3, r3, #7
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	6039      	str	r1, [r7, #0]
 8000cbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	db0a      	blt.n	8000cde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	490c      	ldr	r1, [pc, #48]	; (8000d00 <__NVIC_SetPriority+0x4c>)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	0112      	lsls	r2, r2, #4
 8000cd4:	b2d2      	uxtb	r2, r2
 8000cd6:	440b      	add	r3, r1
 8000cd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cdc:	e00a      	b.n	8000cf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	4908      	ldr	r1, [pc, #32]	; (8000d04 <__NVIC_SetPriority+0x50>)
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	f003 030f 	and.w	r3, r3, #15
 8000cea:	3b04      	subs	r3, #4
 8000cec:	0112      	lsls	r2, r2, #4
 8000cee:	b2d2      	uxtb	r2, r2
 8000cf0:	440b      	add	r3, r1
 8000cf2:	761a      	strb	r2, [r3, #24]
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000e100 	.word	0xe000e100
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b089      	sub	sp, #36	; 0x24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	f1c3 0307 	rsb	r3, r3, #7
 8000d22:	2b04      	cmp	r3, #4
 8000d24:	bf28      	it	cs
 8000d26:	2304      	movcs	r3, #4
 8000d28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	2b06      	cmp	r3, #6
 8000d30:	d902      	bls.n	8000d38 <NVIC_EncodePriority+0x30>
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	3b03      	subs	r3, #3
 8000d36:	e000      	b.n	8000d3a <NVIC_EncodePriority+0x32>
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43da      	mvns	r2, r3
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	401a      	ands	r2, r3
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d50:	f04f 31ff 	mov.w	r1, #4294967295
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5a:	43d9      	mvns	r1, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d60:	4313      	orrs	r3, r2
         );
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3724      	adds	r7, #36	; 0x24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
	...

08000d70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d80:	d301      	bcc.n	8000d86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d82:	2301      	movs	r3, #1
 8000d84:	e00f      	b.n	8000da6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d86:	4a0a      	ldr	r2, [pc, #40]	; (8000db0 <SysTick_Config+0x40>)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d8e:	210f      	movs	r1, #15
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295
 8000d94:	f7ff ff8e 	bl	8000cb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d98:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <SysTick_Config+0x40>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d9e:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <SysTick_Config+0x40>)
 8000da0:	2207      	movs	r2, #7
 8000da2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	e000e010 	.word	0xe000e010

08000db4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff ff47 	bl	8000c50 <__NVIC_SetPriorityGrouping>
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b086      	sub	sp, #24
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	60b9      	str	r1, [r7, #8]
 8000dd4:	607a      	str	r2, [r7, #4]
 8000dd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ddc:	f7ff ff5c 	bl	8000c98 <__NVIC_GetPriorityGrouping>
 8000de0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	68b9      	ldr	r1, [r7, #8]
 8000de6:	6978      	ldr	r0, [r7, #20]
 8000de8:	f7ff ff8e 	bl	8000d08 <NVIC_EncodePriority>
 8000dec:	4602      	mov	r2, r0
 8000dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df2:	4611      	mov	r1, r2
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff ff5d 	bl	8000cb4 <__NVIC_SetPriority>
}
 8000dfa:	bf00      	nop
 8000dfc:	3718      	adds	r7, #24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f7ff ffb0 	bl	8000d70 <SysTick_Config>
 8000e10:	4603      	mov	r3, r0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
	...

08000e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b087      	sub	sp, #28
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e2a:	e17f      	b.n	800112c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	2101      	movs	r1, #1
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	fa01 f303 	lsl.w	r3, r1, r3
 8000e38:	4013      	ands	r3, r2
 8000e3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f000 8171 	beq.w	8001126 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f003 0303 	and.w	r3, r3, #3
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d005      	beq.n	8000e5c <HAL_GPIO_Init+0x40>
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f003 0303 	and.w	r3, r3, #3
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d130      	bne.n	8000ebe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	2203      	movs	r2, #3
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	4013      	ands	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	68da      	ldr	r2, [r3, #12]
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e92:	2201      	movs	r2, #1
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	091b      	lsrs	r3, r3, #4
 8000ea8:	f003 0201 	and.w	r2, r3, #1
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f003 0303 	and.w	r3, r3, #3
 8000ec6:	2b03      	cmp	r3, #3
 8000ec8:	d118      	bne.n	8000efc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ece:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	4013      	ands	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	08db      	lsrs	r3, r3, #3
 8000ee6:	f003 0201 	and.w	r2, r3, #1
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f003 0303 	and.w	r3, r3, #3
 8000f04:	2b03      	cmp	r3, #3
 8000f06:	d017      	beq.n	8000f38 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	2203      	movs	r2, #3
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	689a      	ldr	r2, [r3, #8]
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f003 0303 	and.w	r3, r3, #3
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d123      	bne.n	8000f8c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	08da      	lsrs	r2, r3, #3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3208      	adds	r2, #8
 8000f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f50:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	f003 0307 	and.w	r3, r3, #7
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	220f      	movs	r2, #15
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	4013      	ands	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	691a      	ldr	r2, [r3, #16]
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	08da      	lsrs	r2, r3, #3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	3208      	adds	r2, #8
 8000f86:	6939      	ldr	r1, [r7, #16]
 8000f88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	2203      	movs	r2, #3
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 0203 	and.w	r2, r3, #3
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	f000 80ac 	beq.w	8001126 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fce:	4b5f      	ldr	r3, [pc, #380]	; (800114c <HAL_GPIO_Init+0x330>)
 8000fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fd2:	4a5e      	ldr	r2, [pc, #376]	; (800114c <HAL_GPIO_Init+0x330>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	6613      	str	r3, [r2, #96]	; 0x60
 8000fda:	4b5c      	ldr	r3, [pc, #368]	; (800114c <HAL_GPIO_Init+0x330>)
 8000fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	60bb      	str	r3, [r7, #8]
 8000fe4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fe6:	4a5a      	ldr	r2, [pc, #360]	; (8001150 <HAL_GPIO_Init+0x334>)
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	089b      	lsrs	r3, r3, #2
 8000fec:	3302      	adds	r3, #2
 8000fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	f003 0303 	and.w	r3, r3, #3
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	220f      	movs	r2, #15
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43db      	mvns	r3, r3
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	4013      	ands	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001010:	d025      	beq.n	800105e <HAL_GPIO_Init+0x242>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a4f      	ldr	r2, [pc, #316]	; (8001154 <HAL_GPIO_Init+0x338>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d01f      	beq.n	800105a <HAL_GPIO_Init+0x23e>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a4e      	ldr	r2, [pc, #312]	; (8001158 <HAL_GPIO_Init+0x33c>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d019      	beq.n	8001056 <HAL_GPIO_Init+0x23a>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a4d      	ldr	r2, [pc, #308]	; (800115c <HAL_GPIO_Init+0x340>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d013      	beq.n	8001052 <HAL_GPIO_Init+0x236>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a4c      	ldr	r2, [pc, #304]	; (8001160 <HAL_GPIO_Init+0x344>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d00d      	beq.n	800104e <HAL_GPIO_Init+0x232>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a4b      	ldr	r2, [pc, #300]	; (8001164 <HAL_GPIO_Init+0x348>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d007      	beq.n	800104a <HAL_GPIO_Init+0x22e>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a4a      	ldr	r2, [pc, #296]	; (8001168 <HAL_GPIO_Init+0x34c>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d101      	bne.n	8001046 <HAL_GPIO_Init+0x22a>
 8001042:	2306      	movs	r3, #6
 8001044:	e00c      	b.n	8001060 <HAL_GPIO_Init+0x244>
 8001046:	2307      	movs	r3, #7
 8001048:	e00a      	b.n	8001060 <HAL_GPIO_Init+0x244>
 800104a:	2305      	movs	r3, #5
 800104c:	e008      	b.n	8001060 <HAL_GPIO_Init+0x244>
 800104e:	2304      	movs	r3, #4
 8001050:	e006      	b.n	8001060 <HAL_GPIO_Init+0x244>
 8001052:	2303      	movs	r3, #3
 8001054:	e004      	b.n	8001060 <HAL_GPIO_Init+0x244>
 8001056:	2302      	movs	r3, #2
 8001058:	e002      	b.n	8001060 <HAL_GPIO_Init+0x244>
 800105a:	2301      	movs	r3, #1
 800105c:	e000      	b.n	8001060 <HAL_GPIO_Init+0x244>
 800105e:	2300      	movs	r3, #0
 8001060:	697a      	ldr	r2, [r7, #20]
 8001062:	f002 0203 	and.w	r2, r2, #3
 8001066:	0092      	lsls	r2, r2, #2
 8001068:	4093      	lsls	r3, r2
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	4313      	orrs	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001070:	4937      	ldr	r1, [pc, #220]	; (8001150 <HAL_GPIO_Init+0x334>)
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	089b      	lsrs	r3, r3, #2
 8001076:	3302      	adds	r3, #2
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800107e:	4b3b      	ldr	r3, [pc, #236]	; (800116c <HAL_GPIO_Init+0x350>)
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	43db      	mvns	r3, r3
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4013      	ands	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d003      	beq.n	80010a2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4313      	orrs	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010a2:	4a32      	ldr	r2, [pc, #200]	; (800116c <HAL_GPIO_Init+0x350>)
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010a8:	4b30      	ldr	r3, [pc, #192]	; (800116c <HAL_GPIO_Init+0x350>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	43db      	mvns	r3, r3
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4013      	ands	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010cc:	4a27      	ldr	r2, [pc, #156]	; (800116c <HAL_GPIO_Init+0x350>)
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010d2:	4b26      	ldr	r3, [pc, #152]	; (800116c <HAL_GPIO_Init+0x350>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	43db      	mvns	r3, r3
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	4013      	ands	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d003      	beq.n	80010f6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010f6:	4a1d      	ldr	r2, [pc, #116]	; (800116c <HAL_GPIO_Init+0x350>)
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80010fc:	4b1b      	ldr	r3, [pc, #108]	; (800116c <HAL_GPIO_Init+0x350>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	43db      	mvns	r3, r3
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	4013      	ands	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001114:	2b00      	cmp	r3, #0
 8001116:	d003      	beq.n	8001120 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	4313      	orrs	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001120:	4a12      	ldr	r2, [pc, #72]	; (800116c <HAL_GPIO_Init+0x350>)
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	3301      	adds	r3, #1
 800112a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	fa22 f303 	lsr.w	r3, r2, r3
 8001136:	2b00      	cmp	r3, #0
 8001138:	f47f ae78 	bne.w	8000e2c <HAL_GPIO_Init+0x10>
  }
}
 800113c:	bf00      	nop
 800113e:	bf00      	nop
 8001140:	371c      	adds	r7, #28
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	40021000 	.word	0x40021000
 8001150:	40010000 	.word	0x40010000
 8001154:	48000400 	.word	0x48000400
 8001158:	48000800 	.word	0x48000800
 800115c:	48000c00 	.word	0x48000c00
 8001160:	48001000 	.word	0x48001000
 8001164:	48001400 	.word	0x48001400
 8001168:	48001800 	.word	0x48001800
 800116c:	40010400 	.word	0x40010400

08001170 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	460b      	mov	r3, r1
 800117a:	807b      	strh	r3, [r7, #2]
 800117c:	4613      	mov	r3, r2
 800117e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001180:	787b      	ldrb	r3, [r7, #1]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d003      	beq.n	800118e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001186:	887a      	ldrh	r2, [r7, #2]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800118c:	e002      	b.n	8001194 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800118e:	887a      	ldrh	r2, [r7, #2]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80011a4:	4b04      	ldr	r3, [pc, #16]	; (80011b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	40007000 	.word	0x40007000

080011bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011ca:	d130      	bne.n	800122e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80011cc:	4b23      	ldr	r3, [pc, #140]	; (800125c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011d8:	d038      	beq.n	800124c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011da:	4b20      	ldr	r3, [pc, #128]	; (800125c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011e2:	4a1e      	ldr	r2, [pc, #120]	; (800125c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011e8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011ea:	4b1d      	ldr	r3, [pc, #116]	; (8001260 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2232      	movs	r2, #50	; 0x32
 80011f0:	fb02 f303 	mul.w	r3, r2, r3
 80011f4:	4a1b      	ldr	r2, [pc, #108]	; (8001264 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80011f6:	fba2 2303 	umull	r2, r3, r2, r3
 80011fa:	0c9b      	lsrs	r3, r3, #18
 80011fc:	3301      	adds	r3, #1
 80011fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001200:	e002      	b.n	8001208 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	3b01      	subs	r3, #1
 8001206:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001208:	4b14      	ldr	r3, [pc, #80]	; (800125c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800120a:	695b      	ldr	r3, [r3, #20]
 800120c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001210:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001214:	d102      	bne.n	800121c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d1f2      	bne.n	8001202 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800121c:	4b0f      	ldr	r3, [pc, #60]	; (800125c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800121e:	695b      	ldr	r3, [r3, #20]
 8001220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001224:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001228:	d110      	bne.n	800124c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e00f      	b.n	800124e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800122e:	4b0b      	ldr	r3, [pc, #44]	; (800125c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001236:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800123a:	d007      	beq.n	800124c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800123c:	4b07      	ldr	r3, [pc, #28]	; (800125c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001244:	4a05      	ldr	r2, [pc, #20]	; (800125c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001246:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800124a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	40007000 	.word	0x40007000
 8001260:	20000000 	.word	0x20000000
 8001264:	431bde83 	.word	0x431bde83

08001268 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d101      	bne.n	800127a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e3ca      	b.n	8001a10 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800127a:	4b97      	ldr	r3, [pc, #604]	; (80014d8 <HAL_RCC_OscConfig+0x270>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f003 030c 	and.w	r3, r3, #12
 8001282:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001284:	4b94      	ldr	r3, [pc, #592]	; (80014d8 <HAL_RCC_OscConfig+0x270>)
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	f003 0303 	and.w	r3, r3, #3
 800128c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0310 	and.w	r3, r3, #16
 8001296:	2b00      	cmp	r3, #0
 8001298:	f000 80e4 	beq.w	8001464 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d007      	beq.n	80012b2 <HAL_RCC_OscConfig+0x4a>
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	2b0c      	cmp	r3, #12
 80012a6:	f040 808b 	bne.w	80013c0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	f040 8087 	bne.w	80013c0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012b2:	4b89      	ldr	r3, [pc, #548]	; (80014d8 <HAL_RCC_OscConfig+0x270>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d005      	beq.n	80012ca <HAL_RCC_OscConfig+0x62>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d101      	bne.n	80012ca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e3a2      	b.n	8001a10 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6a1a      	ldr	r2, [r3, #32]
 80012ce:	4b82      	ldr	r3, [pc, #520]	; (80014d8 <HAL_RCC_OscConfig+0x270>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0308 	and.w	r3, r3, #8
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d004      	beq.n	80012e4 <HAL_RCC_OscConfig+0x7c>
 80012da:	4b7f      	ldr	r3, [pc, #508]	; (80014d8 <HAL_RCC_OscConfig+0x270>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012e2:	e005      	b.n	80012f0 <HAL_RCC_OscConfig+0x88>
 80012e4:	4b7c      	ldr	r3, [pc, #496]	; (80014d8 <HAL_RCC_OscConfig+0x270>)
 80012e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012ea:	091b      	lsrs	r3, r3, #4
 80012ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d223      	bcs.n	800133c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a1b      	ldr	r3, [r3, #32]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f000 fd55 	bl	8001da8 <RCC_SetFlashLatencyFromMSIRange>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e383      	b.n	8001a10 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001308:	4b73      	ldr	r3, [pc, #460]	; (80014d8 <HAL_RCC_OscConfig+0x270>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a72      	ldr	r2, [pc, #456]	; (80014d8 <HAL_RCC_OscConfig+0x270>)
 800130e:	f043 0308 	orr.w	r3, r3, #8
 8001312:	6013      	str	r3, [r2, #0]
 8001314:	4b70      	ldr	r3, [pc, #448]	; (80014d8 <HAL_RCC_OscConfig+0x270>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a1b      	ldr	r3, [r3, #32]
 8001320:	496d      	ldr	r1, [pc, #436]	; (80014d8 <HAL_RCC_OscConfig+0x270>)
 8001322:	4313      	orrs	r3, r2
 8001324:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001326:	4b6c      	ldr	r3, [pc, #432]	; (80014d8 <HAL_RCC_OscConfig+0x270>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	021b      	lsls	r3, r3, #8
 8001334:	4968      	ldr	r1, [pc, #416]	; (80014d8 <HAL_RCC_OscConfig+0x270>)
 8001336:	4313      	orrs	r3, r2
 8001338:	604b      	str	r3, [r1, #4]
 800133a:	e025      	b.n	8001388 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800133c:	4b66      	ldr	r3, [pc, #408]	; (80014d8 <HAL_RCC_OscConfig+0x270>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a65      	ldr	r2, [pc, #404]	; (80014d8 <HAL_RCC_OscConfig+0x270>)
 8001342:	f043 0308 	orr.w	r3, r3, #8
 8001346:	6013      	str	r3, [r2, #0]
 8001348:	4b63      	ldr	r3, [pc, #396]	; (80014d8 <HAL_RCC_OscConfig+0x270>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a1b      	ldr	r3, [r3, #32]
 8001354:	4960      	ldr	r1, [pc, #384]	; (80014d8 <HAL_RCC_OscConfig+0x270>)
 8001356:	4313      	orrs	r3, r2
 8001358:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800135a:	4b5f      	ldr	r3, [pc, #380]	; (80014d8 <HAL_RCC_OscConfig+0x270>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	69db      	ldr	r3, [r3, #28]
 8001366:	021b      	lsls	r3, r3, #8
 8001368:	495b      	ldr	r1, [pc, #364]	; (80014d8 <HAL_RCC_OscConfig+0x270>)
 800136a:	4313      	orrs	r3, r2
 800136c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d109      	bne.n	8001388 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a1b      	ldr	r3, [r3, #32]
 8001378:	4618      	mov	r0, r3
 800137a:	f000 fd15 	bl	8001da8 <RCC_SetFlashLatencyFromMSIRange>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e343      	b.n	8001a10 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001388:	f000 fc4a 	bl	8001c20 <HAL_RCC_GetSysClockFreq>
 800138c:	4602      	mov	r2, r0
 800138e:	4b52      	ldr	r3, [pc, #328]	; (80014d8 <HAL_RCC_OscConfig+0x270>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	091b      	lsrs	r3, r3, #4
 8001394:	f003 030f 	and.w	r3, r3, #15
 8001398:	4950      	ldr	r1, [pc, #320]	; (80014dc <HAL_RCC_OscConfig+0x274>)
 800139a:	5ccb      	ldrb	r3, [r1, r3]
 800139c:	f003 031f 	and.w	r3, r3, #31
 80013a0:	fa22 f303 	lsr.w	r3, r2, r3
 80013a4:	4a4e      	ldr	r2, [pc, #312]	; (80014e0 <HAL_RCC_OscConfig+0x278>)
 80013a6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013a8:	4b4e      	ldr	r3, [pc, #312]	; (80014e4 <HAL_RCC_OscConfig+0x27c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff fbf3 	bl	8000b98 <HAL_InitTick>
 80013b2:	4603      	mov	r3, r0
 80013b4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80013b6:	7bfb      	ldrb	r3, [r7, #15]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d052      	beq.n	8001462 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
 80013be:	e327      	b.n	8001a10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d032      	beq.n	800142e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013c8:	4b43      	ldr	r3, [pc, #268]	; (80014d8 <HAL_RCC_OscConfig+0x270>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a42      	ldr	r2, [pc, #264]	; (80014d8 <HAL_RCC_OscConfig+0x270>)
 80013ce:	f043 0301 	orr.w	r3, r3, #1
 80013d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013d4:	f7ff fc30 	bl	8000c38 <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013dc:	f7ff fc2c 	bl	8000c38 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e310      	b.n	8001a10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013ee:	4b3a      	ldr	r3, [pc, #232]	; (80014d8 <HAL_RCC_OscConfig+0x270>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d0f0      	beq.n	80013dc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013fa:	4b37      	ldr	r3, [pc, #220]	; (80014d8 <HAL_RCC_OscConfig+0x270>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a36      	ldr	r2, [pc, #216]	; (80014d8 <HAL_RCC_OscConfig+0x270>)
 8001400:	f043 0308 	orr.w	r3, r3, #8
 8001404:	6013      	str	r3, [r2, #0]
 8001406:	4b34      	ldr	r3, [pc, #208]	; (80014d8 <HAL_RCC_OscConfig+0x270>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6a1b      	ldr	r3, [r3, #32]
 8001412:	4931      	ldr	r1, [pc, #196]	; (80014d8 <HAL_RCC_OscConfig+0x270>)
 8001414:	4313      	orrs	r3, r2
 8001416:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001418:	4b2f      	ldr	r3, [pc, #188]	; (80014d8 <HAL_RCC_OscConfig+0x270>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	69db      	ldr	r3, [r3, #28]
 8001424:	021b      	lsls	r3, r3, #8
 8001426:	492c      	ldr	r1, [pc, #176]	; (80014d8 <HAL_RCC_OscConfig+0x270>)
 8001428:	4313      	orrs	r3, r2
 800142a:	604b      	str	r3, [r1, #4]
 800142c:	e01a      	b.n	8001464 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800142e:	4b2a      	ldr	r3, [pc, #168]	; (80014d8 <HAL_RCC_OscConfig+0x270>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a29      	ldr	r2, [pc, #164]	; (80014d8 <HAL_RCC_OscConfig+0x270>)
 8001434:	f023 0301 	bic.w	r3, r3, #1
 8001438:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800143a:	f7ff fbfd 	bl	8000c38 <HAL_GetTick>
 800143e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001440:	e008      	b.n	8001454 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001442:	f7ff fbf9 	bl	8000c38 <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b02      	cmp	r3, #2
 800144e:	d901      	bls.n	8001454 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e2dd      	b.n	8001a10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001454:	4b20      	ldr	r3, [pc, #128]	; (80014d8 <HAL_RCC_OscConfig+0x270>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0302 	and.w	r3, r3, #2
 800145c:	2b00      	cmp	r3, #0
 800145e:	d1f0      	bne.n	8001442 <HAL_RCC_OscConfig+0x1da>
 8001460:	e000      	b.n	8001464 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001462:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	2b00      	cmp	r3, #0
 800146e:	d074      	beq.n	800155a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	2b08      	cmp	r3, #8
 8001474:	d005      	beq.n	8001482 <HAL_RCC_OscConfig+0x21a>
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	2b0c      	cmp	r3, #12
 800147a:	d10e      	bne.n	800149a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	2b03      	cmp	r3, #3
 8001480:	d10b      	bne.n	800149a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001482:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <HAL_RCC_OscConfig+0x270>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d064      	beq.n	8001558 <HAL_RCC_OscConfig+0x2f0>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d160      	bne.n	8001558 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e2ba      	b.n	8001a10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014a2:	d106      	bne.n	80014b2 <HAL_RCC_OscConfig+0x24a>
 80014a4:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <HAL_RCC_OscConfig+0x270>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a0b      	ldr	r2, [pc, #44]	; (80014d8 <HAL_RCC_OscConfig+0x270>)
 80014aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014ae:	6013      	str	r3, [r2, #0]
 80014b0:	e026      	b.n	8001500 <HAL_RCC_OscConfig+0x298>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014ba:	d115      	bne.n	80014e8 <HAL_RCC_OscConfig+0x280>
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <HAL_RCC_OscConfig+0x270>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a05      	ldr	r2, [pc, #20]	; (80014d8 <HAL_RCC_OscConfig+0x270>)
 80014c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014c6:	6013      	str	r3, [r2, #0]
 80014c8:	4b03      	ldr	r3, [pc, #12]	; (80014d8 <HAL_RCC_OscConfig+0x270>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a02      	ldr	r2, [pc, #8]	; (80014d8 <HAL_RCC_OscConfig+0x270>)
 80014ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014d2:	6013      	str	r3, [r2, #0]
 80014d4:	e014      	b.n	8001500 <HAL_RCC_OscConfig+0x298>
 80014d6:	bf00      	nop
 80014d8:	40021000 	.word	0x40021000
 80014dc:	08004a0c 	.word	0x08004a0c
 80014e0:	20000000 	.word	0x20000000
 80014e4:	20000004 	.word	0x20000004
 80014e8:	4ba0      	ldr	r3, [pc, #640]	; (800176c <HAL_RCC_OscConfig+0x504>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a9f      	ldr	r2, [pc, #636]	; (800176c <HAL_RCC_OscConfig+0x504>)
 80014ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014f2:	6013      	str	r3, [r2, #0]
 80014f4:	4b9d      	ldr	r3, [pc, #628]	; (800176c <HAL_RCC_OscConfig+0x504>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a9c      	ldr	r2, [pc, #624]	; (800176c <HAL_RCC_OscConfig+0x504>)
 80014fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d013      	beq.n	8001530 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001508:	f7ff fb96 	bl	8000c38 <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001510:	f7ff fb92 	bl	8000c38 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b64      	cmp	r3, #100	; 0x64
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e276      	b.n	8001a10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001522:	4b92      	ldr	r3, [pc, #584]	; (800176c <HAL_RCC_OscConfig+0x504>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d0f0      	beq.n	8001510 <HAL_RCC_OscConfig+0x2a8>
 800152e:	e014      	b.n	800155a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001530:	f7ff fb82 	bl	8000c38 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001538:	f7ff fb7e 	bl	8000c38 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b64      	cmp	r3, #100	; 0x64
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e262      	b.n	8001a10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800154a:	4b88      	ldr	r3, [pc, #544]	; (800176c <HAL_RCC_OscConfig+0x504>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1f0      	bne.n	8001538 <HAL_RCC_OscConfig+0x2d0>
 8001556:	e000      	b.n	800155a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001558:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d060      	beq.n	8001628 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	2b04      	cmp	r3, #4
 800156a:	d005      	beq.n	8001578 <HAL_RCC_OscConfig+0x310>
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	2b0c      	cmp	r3, #12
 8001570:	d119      	bne.n	80015a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	2b02      	cmp	r3, #2
 8001576:	d116      	bne.n	80015a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001578:	4b7c      	ldr	r3, [pc, #496]	; (800176c <HAL_RCC_OscConfig+0x504>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001580:	2b00      	cmp	r3, #0
 8001582:	d005      	beq.n	8001590 <HAL_RCC_OscConfig+0x328>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d101      	bne.n	8001590 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e23f      	b.n	8001a10 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001590:	4b76      	ldr	r3, [pc, #472]	; (800176c <HAL_RCC_OscConfig+0x504>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	691b      	ldr	r3, [r3, #16]
 800159c:	061b      	lsls	r3, r3, #24
 800159e:	4973      	ldr	r1, [pc, #460]	; (800176c <HAL_RCC_OscConfig+0x504>)
 80015a0:	4313      	orrs	r3, r2
 80015a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015a4:	e040      	b.n	8001628 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d023      	beq.n	80015f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015ae:	4b6f      	ldr	r3, [pc, #444]	; (800176c <HAL_RCC_OscConfig+0x504>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a6e      	ldr	r2, [pc, #440]	; (800176c <HAL_RCC_OscConfig+0x504>)
 80015b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ba:	f7ff fb3d 	bl	8000c38 <HAL_GetTick>
 80015be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015c0:	e008      	b.n	80015d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015c2:	f7ff fb39 	bl	8000c38 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e21d      	b.n	8001a10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015d4:	4b65      	ldr	r3, [pc, #404]	; (800176c <HAL_RCC_OscConfig+0x504>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d0f0      	beq.n	80015c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e0:	4b62      	ldr	r3, [pc, #392]	; (800176c <HAL_RCC_OscConfig+0x504>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	061b      	lsls	r3, r3, #24
 80015ee:	495f      	ldr	r1, [pc, #380]	; (800176c <HAL_RCC_OscConfig+0x504>)
 80015f0:	4313      	orrs	r3, r2
 80015f2:	604b      	str	r3, [r1, #4]
 80015f4:	e018      	b.n	8001628 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015f6:	4b5d      	ldr	r3, [pc, #372]	; (800176c <HAL_RCC_OscConfig+0x504>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a5c      	ldr	r2, [pc, #368]	; (800176c <HAL_RCC_OscConfig+0x504>)
 80015fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001600:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001602:	f7ff fb19 	bl	8000c38 <HAL_GetTick>
 8001606:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001608:	e008      	b.n	800161c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800160a:	f7ff fb15 	bl	8000c38 <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d901      	bls.n	800161c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e1f9      	b.n	8001a10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800161c:	4b53      	ldr	r3, [pc, #332]	; (800176c <HAL_RCC_OscConfig+0x504>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1f0      	bne.n	800160a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0308 	and.w	r3, r3, #8
 8001630:	2b00      	cmp	r3, #0
 8001632:	d03c      	beq.n	80016ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	695b      	ldr	r3, [r3, #20]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d01c      	beq.n	8001676 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800163c:	4b4b      	ldr	r3, [pc, #300]	; (800176c <HAL_RCC_OscConfig+0x504>)
 800163e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001642:	4a4a      	ldr	r2, [pc, #296]	; (800176c <HAL_RCC_OscConfig+0x504>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800164c:	f7ff faf4 	bl	8000c38 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001654:	f7ff faf0 	bl	8000c38 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e1d4      	b.n	8001a10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001666:	4b41      	ldr	r3, [pc, #260]	; (800176c <HAL_RCC_OscConfig+0x504>)
 8001668:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d0ef      	beq.n	8001654 <HAL_RCC_OscConfig+0x3ec>
 8001674:	e01b      	b.n	80016ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001676:	4b3d      	ldr	r3, [pc, #244]	; (800176c <HAL_RCC_OscConfig+0x504>)
 8001678:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800167c:	4a3b      	ldr	r2, [pc, #236]	; (800176c <HAL_RCC_OscConfig+0x504>)
 800167e:	f023 0301 	bic.w	r3, r3, #1
 8001682:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001686:	f7ff fad7 	bl	8000c38 <HAL_GetTick>
 800168a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800168c:	e008      	b.n	80016a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800168e:	f7ff fad3 	bl	8000c38 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b02      	cmp	r3, #2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e1b7      	b.n	8001a10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016a0:	4b32      	ldr	r3, [pc, #200]	; (800176c <HAL_RCC_OscConfig+0x504>)
 80016a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1ef      	bne.n	800168e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0304 	and.w	r3, r3, #4
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f000 80a6 	beq.w	8001808 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016bc:	2300      	movs	r3, #0
 80016be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80016c0:	4b2a      	ldr	r3, [pc, #168]	; (800176c <HAL_RCC_OscConfig+0x504>)
 80016c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d10d      	bne.n	80016e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016cc:	4b27      	ldr	r3, [pc, #156]	; (800176c <HAL_RCC_OscConfig+0x504>)
 80016ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d0:	4a26      	ldr	r2, [pc, #152]	; (800176c <HAL_RCC_OscConfig+0x504>)
 80016d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d6:	6593      	str	r3, [r2, #88]	; 0x58
 80016d8:	4b24      	ldr	r3, [pc, #144]	; (800176c <HAL_RCC_OscConfig+0x504>)
 80016da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e0:	60bb      	str	r3, [r7, #8]
 80016e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016e4:	2301      	movs	r3, #1
 80016e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016e8:	4b21      	ldr	r3, [pc, #132]	; (8001770 <HAL_RCC_OscConfig+0x508>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d118      	bne.n	8001726 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016f4:	4b1e      	ldr	r3, [pc, #120]	; (8001770 <HAL_RCC_OscConfig+0x508>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a1d      	ldr	r2, [pc, #116]	; (8001770 <HAL_RCC_OscConfig+0x508>)
 80016fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001700:	f7ff fa9a 	bl	8000c38 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001708:	f7ff fa96 	bl	8000c38 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e17a      	b.n	8001a10 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800171a:	4b15      	ldr	r3, [pc, #84]	; (8001770 <HAL_RCC_OscConfig+0x508>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0f0      	beq.n	8001708 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d108      	bne.n	8001740 <HAL_RCC_OscConfig+0x4d8>
 800172e:	4b0f      	ldr	r3, [pc, #60]	; (800176c <HAL_RCC_OscConfig+0x504>)
 8001730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001734:	4a0d      	ldr	r2, [pc, #52]	; (800176c <HAL_RCC_OscConfig+0x504>)
 8001736:	f043 0301 	orr.w	r3, r3, #1
 800173a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800173e:	e029      	b.n	8001794 <HAL_RCC_OscConfig+0x52c>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	2b05      	cmp	r3, #5
 8001746:	d115      	bne.n	8001774 <HAL_RCC_OscConfig+0x50c>
 8001748:	4b08      	ldr	r3, [pc, #32]	; (800176c <HAL_RCC_OscConfig+0x504>)
 800174a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800174e:	4a07      	ldr	r2, [pc, #28]	; (800176c <HAL_RCC_OscConfig+0x504>)
 8001750:	f043 0304 	orr.w	r3, r3, #4
 8001754:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001758:	4b04      	ldr	r3, [pc, #16]	; (800176c <HAL_RCC_OscConfig+0x504>)
 800175a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800175e:	4a03      	ldr	r2, [pc, #12]	; (800176c <HAL_RCC_OscConfig+0x504>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001768:	e014      	b.n	8001794 <HAL_RCC_OscConfig+0x52c>
 800176a:	bf00      	nop
 800176c:	40021000 	.word	0x40021000
 8001770:	40007000 	.word	0x40007000
 8001774:	4b9c      	ldr	r3, [pc, #624]	; (80019e8 <HAL_RCC_OscConfig+0x780>)
 8001776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800177a:	4a9b      	ldr	r2, [pc, #620]	; (80019e8 <HAL_RCC_OscConfig+0x780>)
 800177c:	f023 0301 	bic.w	r3, r3, #1
 8001780:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001784:	4b98      	ldr	r3, [pc, #608]	; (80019e8 <HAL_RCC_OscConfig+0x780>)
 8001786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800178a:	4a97      	ldr	r2, [pc, #604]	; (80019e8 <HAL_RCC_OscConfig+0x780>)
 800178c:	f023 0304 	bic.w	r3, r3, #4
 8001790:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d016      	beq.n	80017ca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800179c:	f7ff fa4c 	bl	8000c38 <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017a2:	e00a      	b.n	80017ba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017a4:	f7ff fa48 	bl	8000c38 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e12a      	b.n	8001a10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017ba:	4b8b      	ldr	r3, [pc, #556]	; (80019e8 <HAL_RCC_OscConfig+0x780>)
 80017bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d0ed      	beq.n	80017a4 <HAL_RCC_OscConfig+0x53c>
 80017c8:	e015      	b.n	80017f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ca:	f7ff fa35 	bl	8000c38 <HAL_GetTick>
 80017ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017d0:	e00a      	b.n	80017e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017d2:	f7ff fa31 	bl	8000c38 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e113      	b.n	8001a10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017e8:	4b7f      	ldr	r3, [pc, #508]	; (80019e8 <HAL_RCC_OscConfig+0x780>)
 80017ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1ed      	bne.n	80017d2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017f6:	7ffb      	ldrb	r3, [r7, #31]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d105      	bne.n	8001808 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017fc:	4b7a      	ldr	r3, [pc, #488]	; (80019e8 <HAL_RCC_OscConfig+0x780>)
 80017fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001800:	4a79      	ldr	r2, [pc, #484]	; (80019e8 <HAL_RCC_OscConfig+0x780>)
 8001802:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001806:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180c:	2b00      	cmp	r3, #0
 800180e:	f000 80fe 	beq.w	8001a0e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001816:	2b02      	cmp	r3, #2
 8001818:	f040 80d0 	bne.w	80019bc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800181c:	4b72      	ldr	r3, [pc, #456]	; (80019e8 <HAL_RCC_OscConfig+0x780>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	f003 0203 	and.w	r2, r3, #3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182c:	429a      	cmp	r2, r3
 800182e:	d130      	bne.n	8001892 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	3b01      	subs	r3, #1
 800183c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800183e:	429a      	cmp	r2, r3
 8001840:	d127      	bne.n	8001892 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800184c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800184e:	429a      	cmp	r2, r3
 8001850:	d11f      	bne.n	8001892 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800185c:	2a07      	cmp	r2, #7
 800185e:	bf14      	ite	ne
 8001860:	2201      	movne	r2, #1
 8001862:	2200      	moveq	r2, #0
 8001864:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001866:	4293      	cmp	r3, r2
 8001868:	d113      	bne.n	8001892 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001874:	085b      	lsrs	r3, r3, #1
 8001876:	3b01      	subs	r3, #1
 8001878:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800187a:	429a      	cmp	r2, r3
 800187c:	d109      	bne.n	8001892 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001888:	085b      	lsrs	r3, r3, #1
 800188a:	3b01      	subs	r3, #1
 800188c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800188e:	429a      	cmp	r2, r3
 8001890:	d06e      	beq.n	8001970 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	2b0c      	cmp	r3, #12
 8001896:	d069      	beq.n	800196c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001898:	4b53      	ldr	r3, [pc, #332]	; (80019e8 <HAL_RCC_OscConfig+0x780>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d105      	bne.n	80018b0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80018a4:	4b50      	ldr	r3, [pc, #320]	; (80019e8 <HAL_RCC_OscConfig+0x780>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e0ad      	b.n	8001a10 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80018b4:	4b4c      	ldr	r3, [pc, #304]	; (80019e8 <HAL_RCC_OscConfig+0x780>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a4b      	ldr	r2, [pc, #300]	; (80019e8 <HAL_RCC_OscConfig+0x780>)
 80018ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018be:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018c0:	f7ff f9ba 	bl	8000c38 <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c8:	f7ff f9b6 	bl	8000c38 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e09a      	b.n	8001a10 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018da:	4b43      	ldr	r3, [pc, #268]	; (80019e8 <HAL_RCC_OscConfig+0x780>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1f0      	bne.n	80018c8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018e6:	4b40      	ldr	r3, [pc, #256]	; (80019e8 <HAL_RCC_OscConfig+0x780>)
 80018e8:	68da      	ldr	r2, [r3, #12]
 80018ea:	4b40      	ldr	r3, [pc, #256]	; (80019ec <HAL_RCC_OscConfig+0x784>)
 80018ec:	4013      	ands	r3, r2
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80018f6:	3a01      	subs	r2, #1
 80018f8:	0112      	lsls	r2, r2, #4
 80018fa:	4311      	orrs	r1, r2
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001900:	0212      	lsls	r2, r2, #8
 8001902:	4311      	orrs	r1, r2
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001908:	0852      	lsrs	r2, r2, #1
 800190a:	3a01      	subs	r2, #1
 800190c:	0552      	lsls	r2, r2, #21
 800190e:	4311      	orrs	r1, r2
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001914:	0852      	lsrs	r2, r2, #1
 8001916:	3a01      	subs	r2, #1
 8001918:	0652      	lsls	r2, r2, #25
 800191a:	4311      	orrs	r1, r2
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001920:	0912      	lsrs	r2, r2, #4
 8001922:	0452      	lsls	r2, r2, #17
 8001924:	430a      	orrs	r2, r1
 8001926:	4930      	ldr	r1, [pc, #192]	; (80019e8 <HAL_RCC_OscConfig+0x780>)
 8001928:	4313      	orrs	r3, r2
 800192a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800192c:	4b2e      	ldr	r3, [pc, #184]	; (80019e8 <HAL_RCC_OscConfig+0x780>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a2d      	ldr	r2, [pc, #180]	; (80019e8 <HAL_RCC_OscConfig+0x780>)
 8001932:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001936:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001938:	4b2b      	ldr	r3, [pc, #172]	; (80019e8 <HAL_RCC_OscConfig+0x780>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	4a2a      	ldr	r2, [pc, #168]	; (80019e8 <HAL_RCC_OscConfig+0x780>)
 800193e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001942:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001944:	f7ff f978 	bl	8000c38 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800194c:	f7ff f974 	bl	8000c38 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e058      	b.n	8001a10 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800195e:	4b22      	ldr	r3, [pc, #136]	; (80019e8 <HAL_RCC_OscConfig+0x780>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d0f0      	beq.n	800194c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800196a:	e050      	b.n	8001a0e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e04f      	b.n	8001a10 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001970:	4b1d      	ldr	r3, [pc, #116]	; (80019e8 <HAL_RCC_OscConfig+0x780>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d148      	bne.n	8001a0e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800197c:	4b1a      	ldr	r3, [pc, #104]	; (80019e8 <HAL_RCC_OscConfig+0x780>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a19      	ldr	r2, [pc, #100]	; (80019e8 <HAL_RCC_OscConfig+0x780>)
 8001982:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001986:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001988:	4b17      	ldr	r3, [pc, #92]	; (80019e8 <HAL_RCC_OscConfig+0x780>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	4a16      	ldr	r2, [pc, #88]	; (80019e8 <HAL_RCC_OscConfig+0x780>)
 800198e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001992:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001994:	f7ff f950 	bl	8000c38 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800199c:	f7ff f94c 	bl	8000c38 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e030      	b.n	8001a10 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ae:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <HAL_RCC_OscConfig+0x780>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d0f0      	beq.n	800199c <HAL_RCC_OscConfig+0x734>
 80019ba:	e028      	b.n	8001a0e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	2b0c      	cmp	r3, #12
 80019c0:	d023      	beq.n	8001a0a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c2:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <HAL_RCC_OscConfig+0x780>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a08      	ldr	r2, [pc, #32]	; (80019e8 <HAL_RCC_OscConfig+0x780>)
 80019c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ce:	f7ff f933 	bl	8000c38 <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019d4:	e00c      	b.n	80019f0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d6:	f7ff f92f 	bl	8000c38 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d905      	bls.n	80019f0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e013      	b.n	8001a10 <HAL_RCC_OscConfig+0x7a8>
 80019e8:	40021000 	.word	0x40021000
 80019ec:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019f0:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <HAL_RCC_OscConfig+0x7b0>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d1ec      	bne.n	80019d6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80019fc:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <HAL_RCC_OscConfig+0x7b0>)
 80019fe:	68da      	ldr	r2, [r3, #12]
 8001a00:	4905      	ldr	r1, [pc, #20]	; (8001a18 <HAL_RCC_OscConfig+0x7b0>)
 8001a02:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <HAL_RCC_OscConfig+0x7b4>)
 8001a04:	4013      	ands	r3, r2
 8001a06:	60cb      	str	r3, [r1, #12]
 8001a08:	e001      	b.n	8001a0e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e000      	b.n	8001a10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3720      	adds	r7, #32
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	feeefffc 	.word	0xfeeefffc

08001a20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d101      	bne.n	8001a34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e0e7      	b.n	8001c04 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a34:	4b75      	ldr	r3, [pc, #468]	; (8001c0c <HAL_RCC_ClockConfig+0x1ec>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0307 	and.w	r3, r3, #7
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d910      	bls.n	8001a64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a42:	4b72      	ldr	r3, [pc, #456]	; (8001c0c <HAL_RCC_ClockConfig+0x1ec>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f023 0207 	bic.w	r2, r3, #7
 8001a4a:	4970      	ldr	r1, [pc, #448]	; (8001c0c <HAL_RCC_ClockConfig+0x1ec>)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a52:	4b6e      	ldr	r3, [pc, #440]	; (8001c0c <HAL_RCC_ClockConfig+0x1ec>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d001      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e0cf      	b.n	8001c04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d010      	beq.n	8001a92 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	4b66      	ldr	r3, [pc, #408]	; (8001c10 <HAL_RCC_ClockConfig+0x1f0>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d908      	bls.n	8001a92 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a80:	4b63      	ldr	r3, [pc, #396]	; (8001c10 <HAL_RCC_ClockConfig+0x1f0>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	4960      	ldr	r1, [pc, #384]	; (8001c10 <HAL_RCC_ClockConfig+0x1f0>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d04c      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b03      	cmp	r3, #3
 8001aa4:	d107      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aa6:	4b5a      	ldr	r3, [pc, #360]	; (8001c10 <HAL_RCC_ClockConfig+0x1f0>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d121      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e0a6      	b.n	8001c04 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d107      	bne.n	8001ace <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001abe:	4b54      	ldr	r3, [pc, #336]	; (8001c10 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d115      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e09a      	b.n	8001c04 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d107      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ad6:	4b4e      	ldr	r3, [pc, #312]	; (8001c10 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d109      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e08e      	b.n	8001c04 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ae6:	4b4a      	ldr	r3, [pc, #296]	; (8001c10 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e086      	b.n	8001c04 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001af6:	4b46      	ldr	r3, [pc, #280]	; (8001c10 <HAL_RCC_ClockConfig+0x1f0>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f023 0203 	bic.w	r2, r3, #3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	4943      	ldr	r1, [pc, #268]	; (8001c10 <HAL_RCC_ClockConfig+0x1f0>)
 8001b04:	4313      	orrs	r3, r2
 8001b06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b08:	f7ff f896 	bl	8000c38 <HAL_GetTick>
 8001b0c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b0e:	e00a      	b.n	8001b26 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b10:	f7ff f892 	bl	8000c38 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e06e      	b.n	8001c04 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b26:	4b3a      	ldr	r3, [pc, #232]	; (8001c10 <HAL_RCC_ClockConfig+0x1f0>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 020c 	and.w	r2, r3, #12
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d1eb      	bne.n	8001b10 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d010      	beq.n	8001b66 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	4b31      	ldr	r3, [pc, #196]	; (8001c10 <HAL_RCC_ClockConfig+0x1f0>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d208      	bcs.n	8001b66 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b54:	4b2e      	ldr	r3, [pc, #184]	; (8001c10 <HAL_RCC_ClockConfig+0x1f0>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	492b      	ldr	r1, [pc, #172]	; (8001c10 <HAL_RCC_ClockConfig+0x1f0>)
 8001b62:	4313      	orrs	r3, r2
 8001b64:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b66:	4b29      	ldr	r3, [pc, #164]	; (8001c0c <HAL_RCC_ClockConfig+0x1ec>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d210      	bcs.n	8001b96 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b74:	4b25      	ldr	r3, [pc, #148]	; (8001c0c <HAL_RCC_ClockConfig+0x1ec>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f023 0207 	bic.w	r2, r3, #7
 8001b7c:	4923      	ldr	r1, [pc, #140]	; (8001c0c <HAL_RCC_ClockConfig+0x1ec>)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b84:	4b21      	ldr	r3, [pc, #132]	; (8001c0c <HAL_RCC_ClockConfig+0x1ec>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0307 	and.w	r3, r3, #7
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d001      	beq.n	8001b96 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e036      	b.n	8001c04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0304 	and.w	r3, r3, #4
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d008      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ba2:	4b1b      	ldr	r3, [pc, #108]	; (8001c10 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	4918      	ldr	r1, [pc, #96]	; (8001c10 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0308 	and.w	r3, r3, #8
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d009      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bc0:	4b13      	ldr	r3, [pc, #76]	; (8001c10 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	4910      	ldr	r1, [pc, #64]	; (8001c10 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bd4:	f000 f824 	bl	8001c20 <HAL_RCC_GetSysClockFreq>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	4b0d      	ldr	r3, [pc, #52]	; (8001c10 <HAL_RCC_ClockConfig+0x1f0>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	091b      	lsrs	r3, r3, #4
 8001be0:	f003 030f 	and.w	r3, r3, #15
 8001be4:	490b      	ldr	r1, [pc, #44]	; (8001c14 <HAL_RCC_ClockConfig+0x1f4>)
 8001be6:	5ccb      	ldrb	r3, [r1, r3]
 8001be8:	f003 031f 	and.w	r3, r3, #31
 8001bec:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf0:	4a09      	ldr	r2, [pc, #36]	; (8001c18 <HAL_RCC_ClockConfig+0x1f8>)
 8001bf2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001bf4:	4b09      	ldr	r3, [pc, #36]	; (8001c1c <HAL_RCC_ClockConfig+0x1fc>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7fe ffcd 	bl	8000b98 <HAL_InitTick>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c02:	7afb      	ldrb	r3, [r7, #11]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40022000 	.word	0x40022000
 8001c10:	40021000 	.word	0x40021000
 8001c14:	08004a0c 	.word	0x08004a0c
 8001c18:	20000000 	.word	0x20000000
 8001c1c:	20000004 	.word	0x20000004

08001c20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b089      	sub	sp, #36	; 0x24
 8001c24:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	61fb      	str	r3, [r7, #28]
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c2e:	4b3e      	ldr	r3, [pc, #248]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f003 030c 	and.w	r3, r3, #12
 8001c36:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c38:	4b3b      	ldr	r3, [pc, #236]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	f003 0303 	and.w	r3, r3, #3
 8001c40:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d005      	beq.n	8001c54 <HAL_RCC_GetSysClockFreq+0x34>
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	2b0c      	cmp	r3, #12
 8001c4c:	d121      	bne.n	8001c92 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d11e      	bne.n	8001c92 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c54:	4b34      	ldr	r3, [pc, #208]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0308 	and.w	r3, r3, #8
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d107      	bne.n	8001c70 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c60:	4b31      	ldr	r3, [pc, #196]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c66:	0a1b      	lsrs	r3, r3, #8
 8001c68:	f003 030f 	and.w	r3, r3, #15
 8001c6c:	61fb      	str	r3, [r7, #28]
 8001c6e:	e005      	b.n	8001c7c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c70:	4b2d      	ldr	r3, [pc, #180]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	091b      	lsrs	r3, r3, #4
 8001c76:	f003 030f 	and.w	r3, r3, #15
 8001c7a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c7c:	4a2b      	ldr	r2, [pc, #172]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c84:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d10d      	bne.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c90:	e00a      	b.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	d102      	bne.n	8001c9e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c98:	4b25      	ldr	r3, [pc, #148]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c9a:	61bb      	str	r3, [r7, #24]
 8001c9c:	e004      	b.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	2b08      	cmp	r3, #8
 8001ca2:	d101      	bne.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ca4:	4b23      	ldr	r3, [pc, #140]	; (8001d34 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ca6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	2b0c      	cmp	r3, #12
 8001cac:	d134      	bne.n	8001d18 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cae:	4b1e      	ldr	r3, [pc, #120]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	f003 0303 	and.w	r3, r3, #3
 8001cb6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d003      	beq.n	8001cc6 <HAL_RCC_GetSysClockFreq+0xa6>
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	2b03      	cmp	r3, #3
 8001cc2:	d003      	beq.n	8001ccc <HAL_RCC_GetSysClockFreq+0xac>
 8001cc4:	e005      	b.n	8001cd2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001cc6:	4b1a      	ldr	r3, [pc, #104]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cc8:	617b      	str	r3, [r7, #20]
      break;
 8001cca:	e005      	b.n	8001cd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ccc:	4b19      	ldr	r3, [pc, #100]	; (8001d34 <HAL_RCC_GetSysClockFreq+0x114>)
 8001cce:	617b      	str	r3, [r7, #20]
      break;
 8001cd0:	e002      	b.n	8001cd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	617b      	str	r3, [r7, #20]
      break;
 8001cd6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cd8:	4b13      	ldr	r3, [pc, #76]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	091b      	lsrs	r3, r3, #4
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ce6:	4b10      	ldr	r3, [pc, #64]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	0a1b      	lsrs	r3, r3, #8
 8001cec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	fb03 f202 	mul.w	r2, r3, r2
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cfc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cfe:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	0e5b      	lsrs	r3, r3, #25
 8001d04:	f003 0303 	and.w	r3, r3, #3
 8001d08:	3301      	adds	r3, #1
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d0e:	697a      	ldr	r2, [r7, #20]
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d16:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d18:	69bb      	ldr	r3, [r7, #24]
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3724      	adds	r7, #36	; 0x24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	08004a24 	.word	0x08004a24
 8001d30:	00f42400 	.word	0x00f42400
 8001d34:	007a1200 	.word	0x007a1200

08001d38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d3c:	4b03      	ldr	r3, [pc, #12]	; (8001d4c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	20000000 	.word	0x20000000

08001d50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d54:	f7ff fff0 	bl	8001d38 <HAL_RCC_GetHCLKFreq>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	0a1b      	lsrs	r3, r3, #8
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	4904      	ldr	r1, [pc, #16]	; (8001d78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d66:	5ccb      	ldrb	r3, [r1, r3]
 8001d68:	f003 031f 	and.w	r3, r3, #31
 8001d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40021000 	.word	0x40021000
 8001d78:	08004a1c 	.word	0x08004a1c

08001d7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d80:	f7ff ffda 	bl	8001d38 <HAL_RCC_GetHCLKFreq>
 8001d84:	4602      	mov	r2, r0
 8001d86:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	0adb      	lsrs	r3, r3, #11
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	4904      	ldr	r1, [pc, #16]	; (8001da4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d92:	5ccb      	ldrb	r3, [r1, r3]
 8001d94:	f003 031f 	and.w	r3, r3, #31
 8001d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40021000 	.word	0x40021000
 8001da4:	08004a1c 	.word	0x08004a1c

08001da8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001db0:	2300      	movs	r3, #0
 8001db2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001db4:	4b2a      	ldr	r3, [pc, #168]	; (8001e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d003      	beq.n	8001dc8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001dc0:	f7ff f9ee 	bl	80011a0 <HAL_PWREx_GetVoltageRange>
 8001dc4:	6178      	str	r0, [r7, #20]
 8001dc6:	e014      	b.n	8001df2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001dc8:	4b25      	ldr	r3, [pc, #148]	; (8001e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dcc:	4a24      	ldr	r2, [pc, #144]	; (8001e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd2:	6593      	str	r3, [r2, #88]	; 0x58
 8001dd4:	4b22      	ldr	r3, [pc, #136]	; (8001e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001de0:	f7ff f9de 	bl	80011a0 <HAL_PWREx_GetVoltageRange>
 8001de4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001de6:	4b1e      	ldr	r3, [pc, #120]	; (8001e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dea:	4a1d      	ldr	r2, [pc, #116]	; (8001e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001df0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001df8:	d10b      	bne.n	8001e12 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b80      	cmp	r3, #128	; 0x80
 8001dfe:	d919      	bls.n	8001e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2ba0      	cmp	r3, #160	; 0xa0
 8001e04:	d902      	bls.n	8001e0c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e06:	2302      	movs	r3, #2
 8001e08:	613b      	str	r3, [r7, #16]
 8001e0a:	e013      	b.n	8001e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	e010      	b.n	8001e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2b80      	cmp	r3, #128	; 0x80
 8001e16:	d902      	bls.n	8001e1e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e18:	2303      	movs	r3, #3
 8001e1a:	613b      	str	r3, [r7, #16]
 8001e1c:	e00a      	b.n	8001e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b80      	cmp	r3, #128	; 0x80
 8001e22:	d102      	bne.n	8001e2a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e24:	2302      	movs	r3, #2
 8001e26:	613b      	str	r3, [r7, #16]
 8001e28:	e004      	b.n	8001e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2b70      	cmp	r3, #112	; 0x70
 8001e2e:	d101      	bne.n	8001e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e30:	2301      	movs	r3, #1
 8001e32:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e34:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f023 0207 	bic.w	r2, r3, #7
 8001e3c:	4909      	ldr	r1, [pc, #36]	; (8001e64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e44:	4b07      	ldr	r3, [pc, #28]	; (8001e64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d001      	beq.n	8001e56 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e000      	b.n	8001e58 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3718      	adds	r7, #24
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40021000 	.word	0x40021000
 8001e64:	40022000 	.word	0x40022000

08001e68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e70:	2300      	movs	r3, #0
 8001e72:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e74:	2300      	movs	r3, #0
 8001e76:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d041      	beq.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e88:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e8c:	d02a      	beq.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001e8e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e92:	d824      	bhi.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e94:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e98:	d008      	beq.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001e9a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e9e:	d81e      	bhi.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00a      	beq.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001ea4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ea8:	d010      	beq.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001eaa:	e018      	b.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001eac:	4b86      	ldr	r3, [pc, #536]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	4a85      	ldr	r2, [pc, #532]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001eb8:	e015      	b.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	3304      	adds	r3, #4
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f000 fabb 	bl	800243c <RCCEx_PLLSAI1_Config>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001eca:	e00c      	b.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	3320      	adds	r3, #32
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f000 fba6 	bl	8002624 <RCCEx_PLLSAI2_Config>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001edc:	e003      	b.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	74fb      	strb	r3, [r7, #19]
      break;
 8001ee2:	e000      	b.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001ee4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001ee6:	7cfb      	ldrb	r3, [r7, #19]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d10b      	bne.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001eec:	4b76      	ldr	r3, [pc, #472]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ef2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001efa:	4973      	ldr	r1, [pc, #460]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f02:	e001      	b.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f04:	7cfb      	ldrb	r3, [r7, #19]
 8001f06:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d041      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f18:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f1c:	d02a      	beq.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001f1e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f22:	d824      	bhi.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f28:	d008      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f2e:	d81e      	bhi.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d00a      	beq.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001f34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f38:	d010      	beq.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f3a:	e018      	b.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f3c:	4b62      	ldr	r3, [pc, #392]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	4a61      	ldr	r2, [pc, #388]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f46:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f48:	e015      	b.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	3304      	adds	r3, #4
 8001f4e:	2100      	movs	r1, #0
 8001f50:	4618      	mov	r0, r3
 8001f52:	f000 fa73 	bl	800243c <RCCEx_PLLSAI1_Config>
 8001f56:	4603      	mov	r3, r0
 8001f58:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f5a:	e00c      	b.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3320      	adds	r3, #32
 8001f60:	2100      	movs	r1, #0
 8001f62:	4618      	mov	r0, r3
 8001f64:	f000 fb5e 	bl	8002624 <RCCEx_PLLSAI2_Config>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f6c:	e003      	b.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	74fb      	strb	r3, [r7, #19]
      break;
 8001f72:	e000      	b.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001f74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f76:	7cfb      	ldrb	r3, [r7, #19]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d10b      	bne.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f7c:	4b52      	ldr	r3, [pc, #328]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f82:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f8a:	494f      	ldr	r1, [pc, #316]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f92:	e001      	b.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f94:	7cfb      	ldrb	r3, [r7, #19]
 8001f96:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f000 80a0 	beq.w	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001faa:	4b47      	ldr	r3, [pc, #284]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e000      	b.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001fba:	2300      	movs	r3, #0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00d      	beq.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fc0:	4b41      	ldr	r3, [pc, #260]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc4:	4a40      	ldr	r2, [pc, #256]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fca:	6593      	str	r3, [r2, #88]	; 0x58
 8001fcc:	4b3e      	ldr	r3, [pc, #248]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd4:	60bb      	str	r3, [r7, #8]
 8001fd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fdc:	4b3b      	ldr	r3, [pc, #236]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a3a      	ldr	r2, [pc, #232]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fe6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fe8:	f7fe fe26 	bl	8000c38 <HAL_GetTick>
 8001fec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001fee:	e009      	b.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ff0:	f7fe fe22 	bl	8000c38 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d902      	bls.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	74fb      	strb	r3, [r7, #19]
        break;
 8002002:	e005      	b.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002004:	4b31      	ldr	r3, [pc, #196]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800200c:	2b00      	cmp	r3, #0
 800200e:	d0ef      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002010:	7cfb      	ldrb	r3, [r7, #19]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d15c      	bne.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002016:	4b2c      	ldr	r3, [pc, #176]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800201c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002020:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d01f      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	429a      	cmp	r2, r3
 8002032:	d019      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002034:	4b24      	ldr	r3, [pc, #144]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800203e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002040:	4b21      	ldr	r3, [pc, #132]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002046:	4a20      	ldr	r2, [pc, #128]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800204c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002050:	4b1d      	ldr	r3, [pc, #116]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002056:	4a1c      	ldr	r2, [pc, #112]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002058:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800205c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002060:	4a19      	ldr	r2, [pc, #100]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b00      	cmp	r3, #0
 8002070:	d016      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002072:	f7fe fde1 	bl	8000c38 <HAL_GetTick>
 8002076:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002078:	e00b      	b.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800207a:	f7fe fddd 	bl	8000c38 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	f241 3288 	movw	r2, #5000	; 0x1388
 8002088:	4293      	cmp	r3, r2
 800208a:	d902      	bls.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	74fb      	strb	r3, [r7, #19]
            break;
 8002090:	e006      	b.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002092:	4b0d      	ldr	r3, [pc, #52]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d0ec      	beq.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80020a0:	7cfb      	ldrb	r3, [r7, #19]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10c      	bne.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020a6:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020b6:	4904      	ldr	r1, [pc, #16]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80020be:	e009      	b.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020c0:	7cfb      	ldrb	r3, [r7, #19]
 80020c2:	74bb      	strb	r3, [r7, #18]
 80020c4:	e006      	b.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80020c6:	bf00      	nop
 80020c8:	40021000 	.word	0x40021000
 80020cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020d0:	7cfb      	ldrb	r3, [r7, #19]
 80020d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020d4:	7c7b      	ldrb	r3, [r7, #17]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d105      	bne.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020da:	4b9e      	ldr	r3, [pc, #632]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020de:	4a9d      	ldr	r2, [pc, #628]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00a      	beq.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020f2:	4b98      	ldr	r3, [pc, #608]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f8:	f023 0203 	bic.w	r2, r3, #3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002100:	4994      	ldr	r1, [pc, #592]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002102:	4313      	orrs	r3, r2
 8002104:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00a      	beq.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002114:	4b8f      	ldr	r3, [pc, #572]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800211a:	f023 020c 	bic.w	r2, r3, #12
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002122:	498c      	ldr	r1, [pc, #560]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002124:	4313      	orrs	r3, r2
 8002126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0304 	and.w	r3, r3, #4
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00a      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002136:	4b87      	ldr	r3, [pc, #540]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800213c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002144:	4983      	ldr	r1, [pc, #524]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002146:	4313      	orrs	r3, r2
 8002148:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0308 	and.w	r3, r3, #8
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00a      	beq.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002158:	4b7e      	ldr	r3, [pc, #504]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800215a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800215e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002166:	497b      	ldr	r1, [pc, #492]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002168:	4313      	orrs	r3, r2
 800216a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0310 	and.w	r3, r3, #16
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00a      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800217a:	4b76      	ldr	r3, [pc, #472]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800217c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002180:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002188:	4972      	ldr	r1, [pc, #456]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800218a:	4313      	orrs	r3, r2
 800218c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0320 	and.w	r3, r3, #32
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00a      	beq.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800219c:	4b6d      	ldr	r3, [pc, #436]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800219e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021aa:	496a      	ldr	r1, [pc, #424]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00a      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021be:	4b65      	ldr	r3, [pc, #404]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021cc:	4961      	ldr	r1, [pc, #388]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00a      	beq.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80021e0:	4b5c      	ldr	r3, [pc, #368]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ee:	4959      	ldr	r1, [pc, #356]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00a      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002202:	4b54      	ldr	r3, [pc, #336]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002208:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002210:	4950      	ldr	r1, [pc, #320]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002212:	4313      	orrs	r3, r2
 8002214:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00a      	beq.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002224:	4b4b      	ldr	r3, [pc, #300]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800222a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002232:	4948      	ldr	r1, [pc, #288]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002234:	4313      	orrs	r3, r2
 8002236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00a      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002246:	4b43      	ldr	r3, [pc, #268]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800224c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002254:	493f      	ldr	r1, [pc, #252]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002256:	4313      	orrs	r3, r2
 8002258:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d028      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002268:	4b3a      	ldr	r3, [pc, #232]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800226a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800226e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002276:	4937      	ldr	r1, [pc, #220]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002278:	4313      	orrs	r3, r2
 800227a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002282:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002286:	d106      	bne.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002288:	4b32      	ldr	r3, [pc, #200]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	4a31      	ldr	r2, [pc, #196]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800228e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002292:	60d3      	str	r3, [r2, #12]
 8002294:	e011      	b.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800229a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800229e:	d10c      	bne.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3304      	adds	r3, #4
 80022a4:	2101      	movs	r1, #1
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 f8c8 	bl	800243c <RCCEx_PLLSAI1_Config>
 80022ac:	4603      	mov	r3, r0
 80022ae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80022b0:	7cfb      	ldrb	r3, [r7, #19]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80022b6:	7cfb      	ldrb	r3, [r7, #19]
 80022b8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d028      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80022c6:	4b23      	ldr	r3, [pc, #140]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022cc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d4:	491f      	ldr	r1, [pc, #124]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022e4:	d106      	bne.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022e6:	4b1b      	ldr	r3, [pc, #108]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	4a1a      	ldr	r2, [pc, #104]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022f0:	60d3      	str	r3, [r2, #12]
 80022f2:	e011      	b.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022fc:	d10c      	bne.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3304      	adds	r3, #4
 8002302:	2101      	movs	r1, #1
 8002304:	4618      	mov	r0, r3
 8002306:	f000 f899 	bl	800243c <RCCEx_PLLSAI1_Config>
 800230a:	4603      	mov	r3, r0
 800230c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800230e:	7cfb      	ldrb	r3, [r7, #19]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002314:	7cfb      	ldrb	r3, [r7, #19]
 8002316:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d02b      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002324:	4b0b      	ldr	r3, [pc, #44]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002332:	4908      	ldr	r1, [pc, #32]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002334:	4313      	orrs	r3, r2
 8002336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800233e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002342:	d109      	bne.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002344:	4b03      	ldr	r3, [pc, #12]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	4a02      	ldr	r2, [pc, #8]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800234a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800234e:	60d3      	str	r3, [r2, #12]
 8002350:	e014      	b.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002352:	bf00      	nop
 8002354:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800235c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002360:	d10c      	bne.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	3304      	adds	r3, #4
 8002366:	2101      	movs	r1, #1
 8002368:	4618      	mov	r0, r3
 800236a:	f000 f867 	bl	800243c <RCCEx_PLLSAI1_Config>
 800236e:	4603      	mov	r3, r0
 8002370:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002372:	7cfb      	ldrb	r3, [r7, #19]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002378:	7cfb      	ldrb	r3, [r7, #19]
 800237a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d02f      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002388:	4b2b      	ldr	r3, [pc, #172]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800238a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002396:	4928      	ldr	r1, [pc, #160]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002398:	4313      	orrs	r3, r2
 800239a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023a6:	d10d      	bne.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3304      	adds	r3, #4
 80023ac:	2102      	movs	r1, #2
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 f844 	bl	800243c <RCCEx_PLLSAI1_Config>
 80023b4:	4603      	mov	r3, r0
 80023b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023b8:	7cfb      	ldrb	r3, [r7, #19]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d014      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80023be:	7cfb      	ldrb	r3, [r7, #19]
 80023c0:	74bb      	strb	r3, [r7, #18]
 80023c2:	e011      	b.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023cc:	d10c      	bne.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	3320      	adds	r3, #32
 80023d2:	2102      	movs	r1, #2
 80023d4:	4618      	mov	r0, r3
 80023d6:	f000 f925 	bl	8002624 <RCCEx_PLLSAI2_Config>
 80023da:	4603      	mov	r3, r0
 80023dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023de:	7cfb      	ldrb	r3, [r7, #19]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80023e4:	7cfb      	ldrb	r3, [r7, #19]
 80023e6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00a      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80023f4:	4b10      	ldr	r3, [pc, #64]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023fa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002402:	490d      	ldr	r1, [pc, #52]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002404:	4313      	orrs	r3, r2
 8002406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00b      	beq.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002416:	4b08      	ldr	r3, [pc, #32]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800241c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002426:	4904      	ldr	r1, [pc, #16]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002428:	4313      	orrs	r3, r2
 800242a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800242e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3718      	adds	r7, #24
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40021000 	.word	0x40021000

0800243c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002446:	2300      	movs	r3, #0
 8002448:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800244a:	4b75      	ldr	r3, [pc, #468]	; (8002620 <RCCEx_PLLSAI1_Config+0x1e4>)
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d018      	beq.n	8002488 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002456:	4b72      	ldr	r3, [pc, #456]	; (8002620 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	f003 0203 	and.w	r2, r3, #3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	429a      	cmp	r2, r3
 8002464:	d10d      	bne.n	8002482 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
       ||
 800246a:	2b00      	cmp	r3, #0
 800246c:	d009      	beq.n	8002482 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800246e:	4b6c      	ldr	r3, [pc, #432]	; (8002620 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	091b      	lsrs	r3, r3, #4
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	1c5a      	adds	r2, r3, #1
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
       ||
 800247e:	429a      	cmp	r2, r3
 8002480:	d047      	beq.n	8002512 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	73fb      	strb	r3, [r7, #15]
 8002486:	e044      	b.n	8002512 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2b03      	cmp	r3, #3
 800248e:	d018      	beq.n	80024c2 <RCCEx_PLLSAI1_Config+0x86>
 8002490:	2b03      	cmp	r3, #3
 8002492:	d825      	bhi.n	80024e0 <RCCEx_PLLSAI1_Config+0xa4>
 8002494:	2b01      	cmp	r3, #1
 8002496:	d002      	beq.n	800249e <RCCEx_PLLSAI1_Config+0x62>
 8002498:	2b02      	cmp	r3, #2
 800249a:	d009      	beq.n	80024b0 <RCCEx_PLLSAI1_Config+0x74>
 800249c:	e020      	b.n	80024e0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800249e:	4b60      	ldr	r3, [pc, #384]	; (8002620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d11d      	bne.n	80024e6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024ae:	e01a      	b.n	80024e6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80024b0:	4b5b      	ldr	r3, [pc, #364]	; (8002620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d116      	bne.n	80024ea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024c0:	e013      	b.n	80024ea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80024c2:	4b57      	ldr	r3, [pc, #348]	; (8002620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10f      	bne.n	80024ee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80024ce:	4b54      	ldr	r3, [pc, #336]	; (8002620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d109      	bne.n	80024ee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80024de:	e006      	b.n	80024ee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	73fb      	strb	r3, [r7, #15]
      break;
 80024e4:	e004      	b.n	80024f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024e6:	bf00      	nop
 80024e8:	e002      	b.n	80024f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024ea:	bf00      	nop
 80024ec:	e000      	b.n	80024f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80024f0:	7bfb      	ldrb	r3, [r7, #15]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10d      	bne.n	8002512 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80024f6:	4b4a      	ldr	r3, [pc, #296]	; (8002620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6819      	ldr	r1, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	3b01      	subs	r3, #1
 8002508:	011b      	lsls	r3, r3, #4
 800250a:	430b      	orrs	r3, r1
 800250c:	4944      	ldr	r1, [pc, #272]	; (8002620 <RCCEx_PLLSAI1_Config+0x1e4>)
 800250e:	4313      	orrs	r3, r2
 8002510:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002512:	7bfb      	ldrb	r3, [r7, #15]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d17d      	bne.n	8002614 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002518:	4b41      	ldr	r3, [pc, #260]	; (8002620 <RCCEx_PLLSAI1_Config+0x1e4>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a40      	ldr	r2, [pc, #256]	; (8002620 <RCCEx_PLLSAI1_Config+0x1e4>)
 800251e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002522:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002524:	f7fe fb88 	bl	8000c38 <HAL_GetTick>
 8002528:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800252a:	e009      	b.n	8002540 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800252c:	f7fe fb84 	bl	8000c38 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d902      	bls.n	8002540 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	73fb      	strb	r3, [r7, #15]
        break;
 800253e:	e005      	b.n	800254c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002540:	4b37      	ldr	r3, [pc, #220]	; (8002620 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1ef      	bne.n	800252c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800254c:	7bfb      	ldrb	r3, [r7, #15]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d160      	bne.n	8002614 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d111      	bne.n	800257c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002558:	4b31      	ldr	r3, [pc, #196]	; (8002620 <RCCEx_PLLSAI1_Config+0x1e4>)
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002560:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	6892      	ldr	r2, [r2, #8]
 8002568:	0211      	lsls	r1, r2, #8
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	68d2      	ldr	r2, [r2, #12]
 800256e:	0912      	lsrs	r2, r2, #4
 8002570:	0452      	lsls	r2, r2, #17
 8002572:	430a      	orrs	r2, r1
 8002574:	492a      	ldr	r1, [pc, #168]	; (8002620 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002576:	4313      	orrs	r3, r2
 8002578:	610b      	str	r3, [r1, #16]
 800257a:	e027      	b.n	80025cc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d112      	bne.n	80025a8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002582:	4b27      	ldr	r3, [pc, #156]	; (8002620 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800258a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	6892      	ldr	r2, [r2, #8]
 8002592:	0211      	lsls	r1, r2, #8
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	6912      	ldr	r2, [r2, #16]
 8002598:	0852      	lsrs	r2, r2, #1
 800259a:	3a01      	subs	r2, #1
 800259c:	0552      	lsls	r2, r2, #21
 800259e:	430a      	orrs	r2, r1
 80025a0:	491f      	ldr	r1, [pc, #124]	; (8002620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	610b      	str	r3, [r1, #16]
 80025a6:	e011      	b.n	80025cc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025a8:	4b1d      	ldr	r3, [pc, #116]	; (8002620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80025b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	6892      	ldr	r2, [r2, #8]
 80025b8:	0211      	lsls	r1, r2, #8
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6952      	ldr	r2, [r2, #20]
 80025be:	0852      	lsrs	r2, r2, #1
 80025c0:	3a01      	subs	r2, #1
 80025c2:	0652      	lsls	r2, r2, #25
 80025c4:	430a      	orrs	r2, r1
 80025c6:	4916      	ldr	r1, [pc, #88]	; (8002620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80025cc:	4b14      	ldr	r3, [pc, #80]	; (8002620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a13      	ldr	r2, [pc, #76]	; (8002620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d8:	f7fe fb2e 	bl	8000c38 <HAL_GetTick>
 80025dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025de:	e009      	b.n	80025f4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025e0:	f7fe fb2a 	bl	8000c38 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d902      	bls.n	80025f4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	73fb      	strb	r3, [r7, #15]
          break;
 80025f2:	e005      	b.n	8002600 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025f4:	4b0a      	ldr	r3, [pc, #40]	; (8002620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d0ef      	beq.n	80025e0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002600:	7bfb      	ldrb	r3, [r7, #15]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d106      	bne.n	8002614 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002606:	4b06      	ldr	r3, [pc, #24]	; (8002620 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002608:	691a      	ldr	r2, [r3, #16]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	4904      	ldr	r1, [pc, #16]	; (8002620 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002610:	4313      	orrs	r3, r2
 8002612:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002614:	7bfb      	ldrb	r3, [r7, #15]
}
 8002616:	4618      	mov	r0, r3
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40021000 	.word	0x40021000

08002624 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800262e:	2300      	movs	r3, #0
 8002630:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002632:	4b6a      	ldr	r3, [pc, #424]	; (80027dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d018      	beq.n	8002670 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800263e:	4b67      	ldr	r3, [pc, #412]	; (80027dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	f003 0203 	and.w	r2, r3, #3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	429a      	cmp	r2, r3
 800264c:	d10d      	bne.n	800266a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
       ||
 8002652:	2b00      	cmp	r3, #0
 8002654:	d009      	beq.n	800266a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002656:	4b61      	ldr	r3, [pc, #388]	; (80027dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	091b      	lsrs	r3, r3, #4
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	1c5a      	adds	r2, r3, #1
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
       ||
 8002666:	429a      	cmp	r2, r3
 8002668:	d047      	beq.n	80026fa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	73fb      	strb	r3, [r7, #15]
 800266e:	e044      	b.n	80026fa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2b03      	cmp	r3, #3
 8002676:	d018      	beq.n	80026aa <RCCEx_PLLSAI2_Config+0x86>
 8002678:	2b03      	cmp	r3, #3
 800267a:	d825      	bhi.n	80026c8 <RCCEx_PLLSAI2_Config+0xa4>
 800267c:	2b01      	cmp	r3, #1
 800267e:	d002      	beq.n	8002686 <RCCEx_PLLSAI2_Config+0x62>
 8002680:	2b02      	cmp	r3, #2
 8002682:	d009      	beq.n	8002698 <RCCEx_PLLSAI2_Config+0x74>
 8002684:	e020      	b.n	80026c8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002686:	4b55      	ldr	r3, [pc, #340]	; (80027dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d11d      	bne.n	80026ce <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002696:	e01a      	b.n	80026ce <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002698:	4b50      	ldr	r3, [pc, #320]	; (80027dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d116      	bne.n	80026d2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026a8:	e013      	b.n	80026d2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80026aa:	4b4c      	ldr	r3, [pc, #304]	; (80027dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10f      	bne.n	80026d6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80026b6:	4b49      	ldr	r3, [pc, #292]	; (80027dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d109      	bne.n	80026d6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80026c6:	e006      	b.n	80026d6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	73fb      	strb	r3, [r7, #15]
      break;
 80026cc:	e004      	b.n	80026d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026ce:	bf00      	nop
 80026d0:	e002      	b.n	80026d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026d2:	bf00      	nop
 80026d4:	e000      	b.n	80026d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80026d8:	7bfb      	ldrb	r3, [r7, #15]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10d      	bne.n	80026fa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026de:	4b3f      	ldr	r3, [pc, #252]	; (80027dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6819      	ldr	r1, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	3b01      	subs	r3, #1
 80026f0:	011b      	lsls	r3, r3, #4
 80026f2:	430b      	orrs	r3, r1
 80026f4:	4939      	ldr	r1, [pc, #228]	; (80027dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80026fa:	7bfb      	ldrb	r3, [r7, #15]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d167      	bne.n	80027d0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002700:	4b36      	ldr	r3, [pc, #216]	; (80027dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a35      	ldr	r2, [pc, #212]	; (80027dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002706:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800270a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800270c:	f7fe fa94 	bl	8000c38 <HAL_GetTick>
 8002710:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002712:	e009      	b.n	8002728 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002714:	f7fe fa90 	bl	8000c38 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d902      	bls.n	8002728 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	73fb      	strb	r3, [r7, #15]
        break;
 8002726:	e005      	b.n	8002734 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002728:	4b2c      	ldr	r3, [pc, #176]	; (80027dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1ef      	bne.n	8002714 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002734:	7bfb      	ldrb	r3, [r7, #15]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d14a      	bne.n	80027d0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d111      	bne.n	8002764 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002740:	4b26      	ldr	r3, [pc, #152]	; (80027dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002748:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	6892      	ldr	r2, [r2, #8]
 8002750:	0211      	lsls	r1, r2, #8
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	68d2      	ldr	r2, [r2, #12]
 8002756:	0912      	lsrs	r2, r2, #4
 8002758:	0452      	lsls	r2, r2, #17
 800275a:	430a      	orrs	r2, r1
 800275c:	491f      	ldr	r1, [pc, #124]	; (80027dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800275e:	4313      	orrs	r3, r2
 8002760:	614b      	str	r3, [r1, #20]
 8002762:	e011      	b.n	8002788 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002764:	4b1d      	ldr	r3, [pc, #116]	; (80027dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800276c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6892      	ldr	r2, [r2, #8]
 8002774:	0211      	lsls	r1, r2, #8
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	6912      	ldr	r2, [r2, #16]
 800277a:	0852      	lsrs	r2, r2, #1
 800277c:	3a01      	subs	r2, #1
 800277e:	0652      	lsls	r2, r2, #25
 8002780:	430a      	orrs	r2, r1
 8002782:	4916      	ldr	r1, [pc, #88]	; (80027dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002784:	4313      	orrs	r3, r2
 8002786:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002788:	4b14      	ldr	r3, [pc, #80]	; (80027dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a13      	ldr	r2, [pc, #76]	; (80027dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800278e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002792:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002794:	f7fe fa50 	bl	8000c38 <HAL_GetTick>
 8002798:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800279a:	e009      	b.n	80027b0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800279c:	f7fe fa4c 	bl	8000c38 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d902      	bls.n	80027b0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	73fb      	strb	r3, [r7, #15]
          break;
 80027ae:	e005      	b.n	80027bc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80027b0:	4b0a      	ldr	r3, [pc, #40]	; (80027dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d0ef      	beq.n	800279c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80027bc:	7bfb      	ldrb	r3, [r7, #15]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d106      	bne.n	80027d0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80027c2:	4b06      	ldr	r3, [pc, #24]	; (80027dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80027c4:	695a      	ldr	r2, [r3, #20]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	4904      	ldr	r1, [pc, #16]	; (80027dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80027d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40021000 	.word	0x40021000

080027e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e095      	b.n	800291e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d108      	bne.n	800280c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002802:	d009      	beq.n	8002818 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	61da      	str	r2, [r3, #28]
 800280a:	e005      	b.n	8002818 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d106      	bne.n	8002838 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7fe f856 	bl	80008e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2202      	movs	r2, #2
 800283c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800284e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002858:	d902      	bls.n	8002860 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800285a:	2300      	movs	r3, #0
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	e002      	b.n	8002866 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002860:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002864:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800286e:	d007      	beq.n	8002880 <HAL_SPI_Init+0xa0>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002878:	d002      	beq.n	8002880 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002890:	431a      	orrs	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	431a      	orrs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	695b      	ldr	r3, [r3, #20]
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	431a      	orrs	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	69db      	ldr	r3, [r3, #28]
 80028b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028b8:	431a      	orrs	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028c2:	ea42 0103 	orr.w	r1, r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	430a      	orrs	r2, r1
 80028d4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	0c1b      	lsrs	r3, r3, #16
 80028dc:	f003 0204 	and.w	r2, r3, #4
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e4:	f003 0310 	and.w	r3, r3, #16
 80028e8:	431a      	orrs	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ee:	f003 0308 	and.w	r3, r3, #8
 80028f2:	431a      	orrs	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80028fc:	ea42 0103 	orr.w	r1, r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	430a      	orrs	r2, r1
 800290c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b088      	sub	sp, #32
 800292a:	af00      	add	r7, sp, #0
 800292c:	60f8      	str	r0, [r7, #12]
 800292e:	60b9      	str	r1, [r7, #8]
 8002930:	603b      	str	r3, [r7, #0]
 8002932:	4613      	mov	r3, r2
 8002934:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002936:	2300      	movs	r3, #0
 8002938:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002940:	2b01      	cmp	r3, #1
 8002942:	d101      	bne.n	8002948 <HAL_SPI_Transmit+0x22>
 8002944:	2302      	movs	r3, #2
 8002946:	e158      	b.n	8002bfa <HAL_SPI_Transmit+0x2d4>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002950:	f7fe f972 	bl	8000c38 <HAL_GetTick>
 8002954:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002956:	88fb      	ldrh	r3, [r7, #6]
 8002958:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b01      	cmp	r3, #1
 8002964:	d002      	beq.n	800296c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002966:	2302      	movs	r3, #2
 8002968:	77fb      	strb	r3, [r7, #31]
    goto error;
 800296a:	e13d      	b.n	8002be8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d002      	beq.n	8002978 <HAL_SPI_Transmit+0x52>
 8002972:	88fb      	ldrh	r3, [r7, #6]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d102      	bne.n	800297e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800297c:	e134      	b.n	8002be8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2203      	movs	r2, #3
 8002982:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	88fa      	ldrh	r2, [r7, #6]
 8002996:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	88fa      	ldrh	r2, [r7, #6]
 800299c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029c8:	d10f      	bne.n	80029ea <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f4:	2b40      	cmp	r3, #64	; 0x40
 80029f6:	d007      	beq.n	8002a08 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a10:	d94b      	bls.n	8002aaa <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d002      	beq.n	8002a20 <HAL_SPI_Transmit+0xfa>
 8002a1a:	8afb      	ldrh	r3, [r7, #22]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d13e      	bne.n	8002a9e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a24:	881a      	ldrh	r2, [r3, #0]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a30:	1c9a      	adds	r2, r3, #2
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a44:	e02b      	b.n	8002a9e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d112      	bne.n	8002a7a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a58:	881a      	ldrh	r2, [r3, #0]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a64:	1c9a      	adds	r2, r3, #2
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	3b01      	subs	r3, #1
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a78:	e011      	b.n	8002a9e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a7a:	f7fe f8dd 	bl	8000c38 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d803      	bhi.n	8002a92 <HAL_SPI_Transmit+0x16c>
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a90:	d102      	bne.n	8002a98 <HAL_SPI_Transmit+0x172>
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d102      	bne.n	8002a9e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a9c:	e0a4      	b.n	8002be8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1ce      	bne.n	8002a46 <HAL_SPI_Transmit+0x120>
 8002aa8:	e07c      	b.n	8002ba4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d002      	beq.n	8002ab8 <HAL_SPI_Transmit+0x192>
 8002ab2:	8afb      	ldrh	r3, [r7, #22]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d170      	bne.n	8002b9a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d912      	bls.n	8002ae8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac6:	881a      	ldrh	r2, [r3, #0]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad2:	1c9a      	adds	r2, r3, #2
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	3b02      	subs	r3, #2
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ae6:	e058      	b.n	8002b9a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	330c      	adds	r3, #12
 8002af2:	7812      	ldrb	r2, [r2, #0]
 8002af4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afa:	1c5a      	adds	r2, r3, #1
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	3b01      	subs	r3, #1
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002b0e:	e044      	b.n	8002b9a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d12b      	bne.n	8002b76 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d912      	bls.n	8002b4e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b2c:	881a      	ldrh	r2, [r3, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b38:	1c9a      	adds	r2, r3, #2
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	3b02      	subs	r3, #2
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b4c:	e025      	b.n	8002b9a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	330c      	adds	r3, #12
 8002b58:	7812      	ldrb	r2, [r2, #0]
 8002b5a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b60:	1c5a      	adds	r2, r3, #1
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b74:	e011      	b.n	8002b9a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b76:	f7fe f85f 	bl	8000c38 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d803      	bhi.n	8002b8e <HAL_SPI_Transmit+0x268>
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b8c:	d102      	bne.n	8002b94 <HAL_SPI_Transmit+0x26e>
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d102      	bne.n	8002b9a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002b98:	e026      	b.n	8002be8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1b5      	bne.n	8002b10 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	6839      	ldr	r1, [r7, #0]
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 fce3 	bl	8003574 <SPI_EndRxTxTransaction>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d002      	beq.n	8002bba <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2220      	movs	r2, #32
 8002bb8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10a      	bne.n	8002bd8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	613b      	str	r3, [r7, #16]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	613b      	str	r3, [r7, #16]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	613b      	str	r3, [r7, #16]
 8002bd6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d002      	beq.n	8002be6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	77fb      	strb	r3, [r7, #31]
 8002be4:	e000      	b.n	8002be8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002be6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002bf8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3720      	adds	r7, #32
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b088      	sub	sp, #32
 8002c06:	af02      	add	r7, sp, #8
 8002c08:	60f8      	str	r0, [r7, #12]
 8002c0a:	60b9      	str	r1, [r7, #8]
 8002c0c:	603b      	str	r3, [r7, #0]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c12:	2300      	movs	r3, #0
 8002c14:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c1e:	d112      	bne.n	8002c46 <HAL_SPI_Receive+0x44>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10e      	bne.n	8002c46 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2204      	movs	r2, #4
 8002c2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002c30:	88fa      	ldrh	r2, [r7, #6]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	9300      	str	r3, [sp, #0]
 8002c36:	4613      	mov	r3, r2
 8002c38:	68ba      	ldr	r2, [r7, #8]
 8002c3a:	68b9      	ldr	r1, [r7, #8]
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f000 f910 	bl	8002e62 <HAL_SPI_TransmitReceive>
 8002c42:	4603      	mov	r3, r0
 8002c44:	e109      	b.n	8002e5a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d101      	bne.n	8002c54 <HAL_SPI_Receive+0x52>
 8002c50:	2302      	movs	r3, #2
 8002c52:	e102      	b.n	8002e5a <HAL_SPI_Receive+0x258>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c5c:	f7fd ffec 	bl	8000c38 <HAL_GetTick>
 8002c60:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d002      	beq.n	8002c74 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002c6e:	2302      	movs	r3, #2
 8002c70:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c72:	e0e9      	b.n	8002e48 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d002      	beq.n	8002c80 <HAL_SPI_Receive+0x7e>
 8002c7a:	88fb      	ldrh	r3, [r7, #6]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d102      	bne.n	8002c86 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c84:	e0e0      	b.n	8002e48 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2204      	movs	r2, #4
 8002c8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	68ba      	ldr	r2, [r7, #8]
 8002c98:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	88fa      	ldrh	r2, [r7, #6]
 8002c9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	88fa      	ldrh	r2, [r7, #6]
 8002ca6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002cd0:	d908      	bls.n	8002ce4 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ce0:	605a      	str	r2, [r3, #4]
 8002ce2:	e007      	b.n	8002cf4 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002cf2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cfc:	d10f      	bne.n	8002d1e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d0c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d1c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d28:	2b40      	cmp	r3, #64	; 0x40
 8002d2a:	d007      	beq.n	8002d3c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d3a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d44:	d867      	bhi.n	8002e16 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002d46:	e030      	b.n	8002daa <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d117      	bne.n	8002d86 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f103 020c 	add.w	r2, r3, #12
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	7812      	ldrb	r2, [r2, #0]
 8002d64:	b2d2      	uxtb	r2, r2
 8002d66:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6c:	1c5a      	adds	r2, r3, #1
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002d84:	e011      	b.n	8002daa <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d86:	f7fd ff57 	bl	8000c38 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	683a      	ldr	r2, [r7, #0]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d803      	bhi.n	8002d9e <HAL_SPI_Receive+0x19c>
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d9c:	d102      	bne.n	8002da4 <HAL_SPI_Receive+0x1a2>
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d102      	bne.n	8002daa <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002da8:	e04e      	b.n	8002e48 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1c8      	bne.n	8002d48 <HAL_SPI_Receive+0x146>
 8002db6:	e034      	b.n	8002e22 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d115      	bne.n	8002df2 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68da      	ldr	r2, [r3, #12]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd0:	b292      	uxth	r2, r2
 8002dd2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd8:	1c9a      	adds	r2, r3, #2
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	3b01      	subs	r3, #1
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002df0:	e011      	b.n	8002e16 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002df2:	f7fd ff21 	bl	8000c38 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d803      	bhi.n	8002e0a <HAL_SPI_Receive+0x208>
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e08:	d102      	bne.n	8002e10 <HAL_SPI_Receive+0x20e>
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d102      	bne.n	8002e16 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002e14:	e018      	b.n	8002e48 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1ca      	bne.n	8002db8 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	6839      	ldr	r1, [r7, #0]
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f000 fb4c 	bl	80034c4 <SPI_EndRxTransaction>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d002      	beq.n	8002e38 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2220      	movs	r2, #32
 8002e36:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d002      	beq.n	8002e46 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	75fb      	strb	r3, [r7, #23]
 8002e44:	e000      	b.n	8002e48 <HAL_SPI_Receive+0x246>
  }

error :
 8002e46:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002e58:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3718      	adds	r7, #24
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b08a      	sub	sp, #40	; 0x28
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	60f8      	str	r0, [r7, #12]
 8002e6a:	60b9      	str	r1, [r7, #8]
 8002e6c:	607a      	str	r2, [r7, #4]
 8002e6e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002e70:	2301      	movs	r3, #1
 8002e72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002e74:	2300      	movs	r3, #0
 8002e76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d101      	bne.n	8002e88 <HAL_SPI_TransmitReceive+0x26>
 8002e84:	2302      	movs	r3, #2
 8002e86:	e1fb      	b.n	8003280 <HAL_SPI_TransmitReceive+0x41e>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e90:	f7fd fed2 	bl	8000c38 <HAL_GetTick>
 8002e94:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002e9c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002ea4:	887b      	ldrh	r3, [r7, #2]
 8002ea6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002ea8:	887b      	ldrh	r3, [r7, #2]
 8002eaa:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002eac:	7efb      	ldrb	r3, [r7, #27]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d00e      	beq.n	8002ed0 <HAL_SPI_TransmitReceive+0x6e>
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002eb8:	d106      	bne.n	8002ec8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d102      	bne.n	8002ec8 <HAL_SPI_TransmitReceive+0x66>
 8002ec2:	7efb      	ldrb	r3, [r7, #27]
 8002ec4:	2b04      	cmp	r3, #4
 8002ec6:	d003      	beq.n	8002ed0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002ec8:	2302      	movs	r3, #2
 8002eca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002ece:	e1cd      	b.n	800326c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d005      	beq.n	8002ee2 <HAL_SPI_TransmitReceive+0x80>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d002      	beq.n	8002ee2 <HAL_SPI_TransmitReceive+0x80>
 8002edc:	887b      	ldrh	r3, [r7, #2]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d103      	bne.n	8002eea <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002ee8:	e1c0      	b.n	800326c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	d003      	beq.n	8002efe <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2205      	movs	r2, #5
 8002efa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	887a      	ldrh	r2, [r7, #2]
 8002f0e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	887a      	ldrh	r2, [r7, #2]
 8002f16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	68ba      	ldr	r2, [r7, #8]
 8002f1e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	887a      	ldrh	r2, [r7, #2]
 8002f24:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	887a      	ldrh	r2, [r7, #2]
 8002f2a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f40:	d802      	bhi.n	8002f48 <HAL_SPI_TransmitReceive+0xe6>
 8002f42:	8a3b      	ldrh	r3, [r7, #16]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d908      	bls.n	8002f5a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	685a      	ldr	r2, [r3, #4]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f56:	605a      	str	r2, [r3, #4]
 8002f58:	e007      	b.n	8002f6a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f68:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f74:	2b40      	cmp	r3, #64	; 0x40
 8002f76:	d007      	beq.n	8002f88 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f90:	d97c      	bls.n	800308c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d002      	beq.n	8002fa0 <HAL_SPI_TransmitReceive+0x13e>
 8002f9a:	8a7b      	ldrh	r3, [r7, #18]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d169      	bne.n	8003074 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa4:	881a      	ldrh	r2, [r3, #0]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb0:	1c9a      	adds	r2, r3, #2
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fc4:	e056      	b.n	8003074 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d11b      	bne.n	800300c <HAL_SPI_TransmitReceive+0x1aa>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d016      	beq.n	800300c <HAL_SPI_TransmitReceive+0x1aa>
 8002fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d113      	bne.n	800300c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe8:	881a      	ldrh	r2, [r3, #0]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff4:	1c9a      	adds	r2, r3, #2
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	3b01      	subs	r3, #1
 8003002:	b29a      	uxth	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003008:	2300      	movs	r3, #0
 800300a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b01      	cmp	r3, #1
 8003018:	d11c      	bne.n	8003054 <HAL_SPI_TransmitReceive+0x1f2>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003020:	b29b      	uxth	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d016      	beq.n	8003054 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68da      	ldr	r2, [r3, #12]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003030:	b292      	uxth	r2, r2
 8003032:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003038:	1c9a      	adds	r2, r3, #2
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003044:	b29b      	uxth	r3, r3
 8003046:	3b01      	subs	r3, #1
 8003048:	b29a      	uxth	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003050:	2301      	movs	r3, #1
 8003052:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003054:	f7fd fdf0 	bl	8000c38 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003060:	429a      	cmp	r2, r3
 8003062:	d807      	bhi.n	8003074 <HAL_SPI_TransmitReceive+0x212>
 8003064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306a:	d003      	beq.n	8003074 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003072:	e0fb      	b.n	800326c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003078:	b29b      	uxth	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1a3      	bne.n	8002fc6 <HAL_SPI_TransmitReceive+0x164>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003084:	b29b      	uxth	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d19d      	bne.n	8002fc6 <HAL_SPI_TransmitReceive+0x164>
 800308a:	e0df      	b.n	800324c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d003      	beq.n	800309c <HAL_SPI_TransmitReceive+0x23a>
 8003094:	8a7b      	ldrh	r3, [r7, #18]
 8003096:	2b01      	cmp	r3, #1
 8003098:	f040 80cb 	bne.w	8003232 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d912      	bls.n	80030cc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030aa:	881a      	ldrh	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b6:	1c9a      	adds	r2, r3, #2
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	3b02      	subs	r3, #2
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80030ca:	e0b2      	b.n	8003232 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	330c      	adds	r3, #12
 80030d6:	7812      	ldrb	r2, [r2, #0]
 80030d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030de:	1c5a      	adds	r2, r3, #1
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	3b01      	subs	r3, #1
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030f2:	e09e      	b.n	8003232 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d134      	bne.n	800316c <HAL_SPI_TransmitReceive+0x30a>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003106:	b29b      	uxth	r3, r3
 8003108:	2b00      	cmp	r3, #0
 800310a:	d02f      	beq.n	800316c <HAL_SPI_TransmitReceive+0x30a>
 800310c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310e:	2b01      	cmp	r3, #1
 8003110:	d12c      	bne.n	800316c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003116:	b29b      	uxth	r3, r3
 8003118:	2b01      	cmp	r3, #1
 800311a:	d912      	bls.n	8003142 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003120:	881a      	ldrh	r2, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312c:	1c9a      	adds	r2, r3, #2
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003136:	b29b      	uxth	r3, r3
 8003138:	3b02      	subs	r3, #2
 800313a:	b29a      	uxth	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003140:	e012      	b.n	8003168 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	330c      	adds	r3, #12
 800314c:	7812      	ldrb	r2, [r2, #0]
 800314e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003154:	1c5a      	adds	r2, r3, #1
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800315e:	b29b      	uxth	r3, r3
 8003160:	3b01      	subs	r3, #1
 8003162:	b29a      	uxth	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003168:	2300      	movs	r3, #0
 800316a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b01      	cmp	r3, #1
 8003178:	d148      	bne.n	800320c <HAL_SPI_TransmitReceive+0x3aa>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003180:	b29b      	uxth	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d042      	beq.n	800320c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800318c:	b29b      	uxth	r3, r3
 800318e:	2b01      	cmp	r3, #1
 8003190:	d923      	bls.n	80031da <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68da      	ldr	r2, [r3, #12]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	b292      	uxth	r2, r2
 800319e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a4:	1c9a      	adds	r2, r3, #2
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	3b02      	subs	r3, #2
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d81f      	bhi.n	8003208 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80031d6:	605a      	str	r2, [r3, #4]
 80031d8:	e016      	b.n	8003208 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f103 020c 	add.w	r2, r3, #12
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	7812      	ldrb	r2, [r2, #0]
 80031e8:	b2d2      	uxtb	r2, r2
 80031ea:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f0:	1c5a      	adds	r2, r3, #1
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	3b01      	subs	r3, #1
 8003200:	b29a      	uxth	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003208:	2301      	movs	r3, #1
 800320a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800320c:	f7fd fd14 	bl	8000c38 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003218:	429a      	cmp	r2, r3
 800321a:	d803      	bhi.n	8003224 <HAL_SPI_TransmitReceive+0x3c2>
 800321c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800321e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003222:	d102      	bne.n	800322a <HAL_SPI_TransmitReceive+0x3c8>
 8003224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003226:	2b00      	cmp	r3, #0
 8003228:	d103      	bne.n	8003232 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003230:	e01c      	b.n	800326c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003236:	b29b      	uxth	r3, r3
 8003238:	2b00      	cmp	r3, #0
 800323a:	f47f af5b 	bne.w	80030f4 <HAL_SPI_TransmitReceive+0x292>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003244:	b29b      	uxth	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	f47f af54 	bne.w	80030f4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800324c:	69fa      	ldr	r2, [r7, #28]
 800324e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f000 f98f 	bl	8003574 <SPI_EndRxTxTransaction>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d006      	beq.n	800326a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2220      	movs	r2, #32
 8003266:	661a      	str	r2, [r3, #96]	; 0x60
 8003268:	e000      	b.n	800326c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800326a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800327c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003280:	4618      	mov	r0, r3
 8003282:	3728      	adds	r7, #40	; 0x28
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b088      	sub	sp, #32
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	603b      	str	r3, [r7, #0]
 8003294:	4613      	mov	r3, r2
 8003296:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003298:	f7fd fcce 	bl	8000c38 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a0:	1a9b      	subs	r3, r3, r2
 80032a2:	683a      	ldr	r2, [r7, #0]
 80032a4:	4413      	add	r3, r2
 80032a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80032a8:	f7fd fcc6 	bl	8000c38 <HAL_GetTick>
 80032ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80032ae:	4b39      	ldr	r3, [pc, #228]	; (8003394 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	015b      	lsls	r3, r3, #5
 80032b4:	0d1b      	lsrs	r3, r3, #20
 80032b6:	69fa      	ldr	r2, [r7, #28]
 80032b8:	fb02 f303 	mul.w	r3, r2, r3
 80032bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032be:	e054      	b.n	800336a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c6:	d050      	beq.n	800336a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032c8:	f7fd fcb6 	bl	8000c38 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	69fa      	ldr	r2, [r7, #28]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d902      	bls.n	80032de <SPI_WaitFlagStateUntilTimeout+0x56>
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d13d      	bne.n	800335a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	685a      	ldr	r2, [r3, #4]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80032ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032f6:	d111      	bne.n	800331c <SPI_WaitFlagStateUntilTimeout+0x94>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003300:	d004      	beq.n	800330c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800330a:	d107      	bne.n	800331c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800331a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003320:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003324:	d10f      	bne.n	8003346 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003334:	601a      	str	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003344:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e017      	b.n	800338a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d101      	bne.n	8003364 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003360:	2300      	movs	r3, #0
 8003362:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	3b01      	subs	r3, #1
 8003368:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689a      	ldr	r2, [r3, #8]
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	4013      	ands	r3, r2
 8003374:	68ba      	ldr	r2, [r7, #8]
 8003376:	429a      	cmp	r2, r3
 8003378:	bf0c      	ite	eq
 800337a:	2301      	moveq	r3, #1
 800337c:	2300      	movne	r3, #0
 800337e:	b2db      	uxtb	r3, r3
 8003380:	461a      	mov	r2, r3
 8003382:	79fb      	ldrb	r3, [r7, #7]
 8003384:	429a      	cmp	r2, r3
 8003386:	d19b      	bne.n	80032c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3720      	adds	r7, #32
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	20000000 	.word	0x20000000

08003398 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b08a      	sub	sp, #40	; 0x28
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
 80033a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80033a6:	2300      	movs	r3, #0
 80033a8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80033aa:	f7fd fc45 	bl	8000c38 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b2:	1a9b      	subs	r3, r3, r2
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	4413      	add	r3, r2
 80033b8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80033ba:	f7fd fc3d 	bl	8000c38 <HAL_GetTick>
 80033be:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	330c      	adds	r3, #12
 80033c6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80033c8:	4b3d      	ldr	r3, [pc, #244]	; (80034c0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	4613      	mov	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4413      	add	r3, r2
 80033d2:	00da      	lsls	r2, r3, #3
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	0d1b      	lsrs	r3, r3, #20
 80033d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033da:	fb02 f303 	mul.w	r3, r2, r3
 80033de:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80033e0:	e060      	b.n	80034a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80033e8:	d107      	bne.n	80033fa <SPI_WaitFifoStateUntilTimeout+0x62>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d104      	bne.n	80033fa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80033f8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003400:	d050      	beq.n	80034a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003402:	f7fd fc19 	bl	8000c38 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	6a3b      	ldr	r3, [r7, #32]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800340e:	429a      	cmp	r2, r3
 8003410:	d902      	bls.n	8003418 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	2b00      	cmp	r3, #0
 8003416:	d13d      	bne.n	8003494 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	685a      	ldr	r2, [r3, #4]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003426:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003430:	d111      	bne.n	8003456 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800343a:	d004      	beq.n	8003446 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003444:	d107      	bne.n	8003456 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003454:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800345e:	d10f      	bne.n	8003480 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800347e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e010      	b.n	80034b6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800349a:	2300      	movs	r3, #0
 800349c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	3b01      	subs	r3, #1
 80034a2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	689a      	ldr	r2, [r3, #8]
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	4013      	ands	r3, r2
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d196      	bne.n	80033e2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3728      	adds	r7, #40	; 0x28
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	20000000 	.word	0x20000000

080034c4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af02      	add	r7, sp, #8
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034d8:	d111      	bne.n	80034fe <SPI_EndRxTransaction+0x3a>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034e2:	d004      	beq.n	80034ee <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ec:	d107      	bne.n	80034fe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034fc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	9300      	str	r3, [sp, #0]
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	2200      	movs	r2, #0
 8003506:	2180      	movs	r1, #128	; 0x80
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f7ff febd 	bl	8003288 <SPI_WaitFlagStateUntilTimeout>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d007      	beq.n	8003524 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003518:	f043 0220 	orr.w	r2, r3, #32
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e023      	b.n	800356c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800352c:	d11d      	bne.n	800356a <SPI_EndRxTransaction+0xa6>
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003536:	d004      	beq.n	8003542 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003540:	d113      	bne.n	800356a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	2200      	movs	r2, #0
 800354a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f7ff ff22 	bl	8003398 <SPI_WaitFifoStateUntilTimeout>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d007      	beq.n	800356a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800355e:	f043 0220 	orr.w	r2, r3, #32
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e000      	b.n	800356c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af02      	add	r7, sp, #8
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	9300      	str	r3, [sp, #0]
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	2200      	movs	r2, #0
 8003588:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	f7ff ff03 	bl	8003398 <SPI_WaitFifoStateUntilTimeout>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d007      	beq.n	80035a8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800359c:	f043 0220 	orr.w	r2, r3, #32
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e027      	b.n	80035f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	2200      	movs	r2, #0
 80035b0:	2180      	movs	r1, #128	; 0x80
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f7ff fe68 	bl	8003288 <SPI_WaitFlagStateUntilTimeout>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d007      	beq.n	80035ce <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035c2:	f043 0220 	orr.w	r2, r3, #32
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e014      	b.n	80035f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f7ff fedc 	bl	8003398 <SPI_WaitFifoStateUntilTimeout>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d007      	beq.n	80035f6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ea:	f043 0220 	orr.w	r2, r3, #32
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e000      	b.n	80035f8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e040      	b.n	8003694 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003616:	2b00      	cmp	r3, #0
 8003618:	d106      	bne.n	8003628 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f7fd f9a0 	bl	8000968 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2224      	movs	r2, #36	; 0x24
 800362c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 0201 	bic.w	r2, r2, #1
 800363c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 f8c0 	bl	80037c4 <UART_SetConfig>
 8003644:	4603      	mov	r3, r0
 8003646:	2b01      	cmp	r3, #1
 8003648:	d101      	bne.n	800364e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e022      	b.n	8003694 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003652:	2b00      	cmp	r3, #0
 8003654:	d002      	beq.n	800365c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 fb6c 	bl	8003d34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800366a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689a      	ldr	r2, [r3, #8]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800367a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f042 0201 	orr.w	r2, r2, #1
 800368a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 fbf3 	bl	8003e78 <UART_CheckIdleState>
 8003692:	4603      	mov	r3, r0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3708      	adds	r7, #8
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b08a      	sub	sp, #40	; 0x28
 80036a0:	af02      	add	r7, sp, #8
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	603b      	str	r3, [r7, #0]
 80036a8:	4613      	mov	r3, r2
 80036aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036b0:	2b20      	cmp	r3, #32
 80036b2:	f040 8082 	bne.w	80037ba <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d002      	beq.n	80036c2 <HAL_UART_Transmit+0x26>
 80036bc:	88fb      	ldrh	r3, [r7, #6]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e07a      	b.n	80037bc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d101      	bne.n	80036d4 <HAL_UART_Transmit+0x38>
 80036d0:	2302      	movs	r3, #2
 80036d2:	e073      	b.n	80037bc <HAL_UART_Transmit+0x120>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2221      	movs	r2, #33	; 0x21
 80036e8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036ea:	f7fd faa5 	bl	8000c38 <HAL_GetTick>
 80036ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	88fa      	ldrh	r2, [r7, #6]
 80036f4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	88fa      	ldrh	r2, [r7, #6]
 80036fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003708:	d108      	bne.n	800371c <HAL_UART_Transmit+0x80>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d104      	bne.n	800371c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003712:	2300      	movs	r3, #0
 8003714:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	61bb      	str	r3, [r7, #24]
 800371a:	e003      	b.n	8003724 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003720:	2300      	movs	r3, #0
 8003722:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800372c:	e02d      	b.n	800378a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	9300      	str	r3, [sp, #0]
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	2200      	movs	r2, #0
 8003736:	2180      	movs	r1, #128	; 0x80
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f000 fbe6 	bl	8003f0a <UART_WaitOnFlagUntilTimeout>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d001      	beq.n	8003748 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e039      	b.n	80037bc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10b      	bne.n	8003766 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	881a      	ldrh	r2, [r3, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800375a:	b292      	uxth	r2, r2
 800375c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	3302      	adds	r3, #2
 8003762:	61bb      	str	r3, [r7, #24]
 8003764:	e008      	b.n	8003778 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	781a      	ldrb	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	b292      	uxth	r2, r2
 8003770:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	3301      	adds	r3, #1
 8003776:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800377e:	b29b      	uxth	r3, r3
 8003780:	3b01      	subs	r3, #1
 8003782:	b29a      	uxth	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003790:	b29b      	uxth	r3, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1cb      	bne.n	800372e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	9300      	str	r3, [sp, #0]
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	2200      	movs	r2, #0
 800379e:	2140      	movs	r1, #64	; 0x40
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f000 fbb2 	bl	8003f0a <UART_WaitOnFlagUntilTimeout>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d001      	beq.n	80037b0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e005      	b.n	80037bc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2220      	movs	r2, #32
 80037b4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80037b6:	2300      	movs	r3, #0
 80037b8:	e000      	b.n	80037bc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80037ba:	2302      	movs	r3, #2
  }
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3720      	adds	r7, #32
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037c8:	b08a      	sub	sp, #40	; 0x28
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037ce:	2300      	movs	r3, #0
 80037d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	431a      	orrs	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	431a      	orrs	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	69db      	ldr	r3, [r3, #28]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	4ba4      	ldr	r3, [pc, #656]	; (8003a84 <UART_SetConfig+0x2c0>)
 80037f4:	4013      	ands	r3, r2
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	6812      	ldr	r2, [r2, #0]
 80037fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037fc:	430b      	orrs	r3, r1
 80037fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	68da      	ldr	r2, [r3, #12]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	430a      	orrs	r2, r1
 8003814:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a99      	ldr	r2, [pc, #612]	; (8003a88 <UART_SetConfig+0x2c4>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d004      	beq.n	8003830 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800382c:	4313      	orrs	r3, r2
 800382e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003840:	430a      	orrs	r2, r1
 8003842:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a90      	ldr	r2, [pc, #576]	; (8003a8c <UART_SetConfig+0x2c8>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d126      	bne.n	800389c <UART_SetConfig+0xd8>
 800384e:	4b90      	ldr	r3, [pc, #576]	; (8003a90 <UART_SetConfig+0x2cc>)
 8003850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003854:	f003 0303 	and.w	r3, r3, #3
 8003858:	2b03      	cmp	r3, #3
 800385a:	d81b      	bhi.n	8003894 <UART_SetConfig+0xd0>
 800385c:	a201      	add	r2, pc, #4	; (adr r2, 8003864 <UART_SetConfig+0xa0>)
 800385e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003862:	bf00      	nop
 8003864:	08003875 	.word	0x08003875
 8003868:	08003885 	.word	0x08003885
 800386c:	0800387d 	.word	0x0800387d
 8003870:	0800388d 	.word	0x0800388d
 8003874:	2301      	movs	r3, #1
 8003876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800387a:	e116      	b.n	8003aaa <UART_SetConfig+0x2e6>
 800387c:	2302      	movs	r3, #2
 800387e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003882:	e112      	b.n	8003aaa <UART_SetConfig+0x2e6>
 8003884:	2304      	movs	r3, #4
 8003886:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800388a:	e10e      	b.n	8003aaa <UART_SetConfig+0x2e6>
 800388c:	2308      	movs	r3, #8
 800388e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003892:	e10a      	b.n	8003aaa <UART_SetConfig+0x2e6>
 8003894:	2310      	movs	r3, #16
 8003896:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800389a:	e106      	b.n	8003aaa <UART_SetConfig+0x2e6>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a7c      	ldr	r2, [pc, #496]	; (8003a94 <UART_SetConfig+0x2d0>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d138      	bne.n	8003918 <UART_SetConfig+0x154>
 80038a6:	4b7a      	ldr	r3, [pc, #488]	; (8003a90 <UART_SetConfig+0x2cc>)
 80038a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ac:	f003 030c 	and.w	r3, r3, #12
 80038b0:	2b0c      	cmp	r3, #12
 80038b2:	d82d      	bhi.n	8003910 <UART_SetConfig+0x14c>
 80038b4:	a201      	add	r2, pc, #4	; (adr r2, 80038bc <UART_SetConfig+0xf8>)
 80038b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ba:	bf00      	nop
 80038bc:	080038f1 	.word	0x080038f1
 80038c0:	08003911 	.word	0x08003911
 80038c4:	08003911 	.word	0x08003911
 80038c8:	08003911 	.word	0x08003911
 80038cc:	08003901 	.word	0x08003901
 80038d0:	08003911 	.word	0x08003911
 80038d4:	08003911 	.word	0x08003911
 80038d8:	08003911 	.word	0x08003911
 80038dc:	080038f9 	.word	0x080038f9
 80038e0:	08003911 	.word	0x08003911
 80038e4:	08003911 	.word	0x08003911
 80038e8:	08003911 	.word	0x08003911
 80038ec:	08003909 	.word	0x08003909
 80038f0:	2300      	movs	r3, #0
 80038f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038f6:	e0d8      	b.n	8003aaa <UART_SetConfig+0x2e6>
 80038f8:	2302      	movs	r3, #2
 80038fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038fe:	e0d4      	b.n	8003aaa <UART_SetConfig+0x2e6>
 8003900:	2304      	movs	r3, #4
 8003902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003906:	e0d0      	b.n	8003aaa <UART_SetConfig+0x2e6>
 8003908:	2308      	movs	r3, #8
 800390a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800390e:	e0cc      	b.n	8003aaa <UART_SetConfig+0x2e6>
 8003910:	2310      	movs	r3, #16
 8003912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003916:	e0c8      	b.n	8003aaa <UART_SetConfig+0x2e6>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a5e      	ldr	r2, [pc, #376]	; (8003a98 <UART_SetConfig+0x2d4>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d125      	bne.n	800396e <UART_SetConfig+0x1aa>
 8003922:	4b5b      	ldr	r3, [pc, #364]	; (8003a90 <UART_SetConfig+0x2cc>)
 8003924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003928:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800392c:	2b30      	cmp	r3, #48	; 0x30
 800392e:	d016      	beq.n	800395e <UART_SetConfig+0x19a>
 8003930:	2b30      	cmp	r3, #48	; 0x30
 8003932:	d818      	bhi.n	8003966 <UART_SetConfig+0x1a2>
 8003934:	2b20      	cmp	r3, #32
 8003936:	d00a      	beq.n	800394e <UART_SetConfig+0x18a>
 8003938:	2b20      	cmp	r3, #32
 800393a:	d814      	bhi.n	8003966 <UART_SetConfig+0x1a2>
 800393c:	2b00      	cmp	r3, #0
 800393e:	d002      	beq.n	8003946 <UART_SetConfig+0x182>
 8003940:	2b10      	cmp	r3, #16
 8003942:	d008      	beq.n	8003956 <UART_SetConfig+0x192>
 8003944:	e00f      	b.n	8003966 <UART_SetConfig+0x1a2>
 8003946:	2300      	movs	r3, #0
 8003948:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800394c:	e0ad      	b.n	8003aaa <UART_SetConfig+0x2e6>
 800394e:	2302      	movs	r3, #2
 8003950:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003954:	e0a9      	b.n	8003aaa <UART_SetConfig+0x2e6>
 8003956:	2304      	movs	r3, #4
 8003958:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800395c:	e0a5      	b.n	8003aaa <UART_SetConfig+0x2e6>
 800395e:	2308      	movs	r3, #8
 8003960:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003964:	e0a1      	b.n	8003aaa <UART_SetConfig+0x2e6>
 8003966:	2310      	movs	r3, #16
 8003968:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800396c:	e09d      	b.n	8003aaa <UART_SetConfig+0x2e6>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a4a      	ldr	r2, [pc, #296]	; (8003a9c <UART_SetConfig+0x2d8>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d125      	bne.n	80039c4 <UART_SetConfig+0x200>
 8003978:	4b45      	ldr	r3, [pc, #276]	; (8003a90 <UART_SetConfig+0x2cc>)
 800397a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800397e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003982:	2bc0      	cmp	r3, #192	; 0xc0
 8003984:	d016      	beq.n	80039b4 <UART_SetConfig+0x1f0>
 8003986:	2bc0      	cmp	r3, #192	; 0xc0
 8003988:	d818      	bhi.n	80039bc <UART_SetConfig+0x1f8>
 800398a:	2b80      	cmp	r3, #128	; 0x80
 800398c:	d00a      	beq.n	80039a4 <UART_SetConfig+0x1e0>
 800398e:	2b80      	cmp	r3, #128	; 0x80
 8003990:	d814      	bhi.n	80039bc <UART_SetConfig+0x1f8>
 8003992:	2b00      	cmp	r3, #0
 8003994:	d002      	beq.n	800399c <UART_SetConfig+0x1d8>
 8003996:	2b40      	cmp	r3, #64	; 0x40
 8003998:	d008      	beq.n	80039ac <UART_SetConfig+0x1e8>
 800399a:	e00f      	b.n	80039bc <UART_SetConfig+0x1f8>
 800399c:	2300      	movs	r3, #0
 800399e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039a2:	e082      	b.n	8003aaa <UART_SetConfig+0x2e6>
 80039a4:	2302      	movs	r3, #2
 80039a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039aa:	e07e      	b.n	8003aaa <UART_SetConfig+0x2e6>
 80039ac:	2304      	movs	r3, #4
 80039ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039b2:	e07a      	b.n	8003aaa <UART_SetConfig+0x2e6>
 80039b4:	2308      	movs	r3, #8
 80039b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ba:	e076      	b.n	8003aaa <UART_SetConfig+0x2e6>
 80039bc:	2310      	movs	r3, #16
 80039be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039c2:	e072      	b.n	8003aaa <UART_SetConfig+0x2e6>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a35      	ldr	r2, [pc, #212]	; (8003aa0 <UART_SetConfig+0x2dc>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d12a      	bne.n	8003a24 <UART_SetConfig+0x260>
 80039ce:	4b30      	ldr	r3, [pc, #192]	; (8003a90 <UART_SetConfig+0x2cc>)
 80039d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039dc:	d01a      	beq.n	8003a14 <UART_SetConfig+0x250>
 80039de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039e2:	d81b      	bhi.n	8003a1c <UART_SetConfig+0x258>
 80039e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039e8:	d00c      	beq.n	8003a04 <UART_SetConfig+0x240>
 80039ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039ee:	d815      	bhi.n	8003a1c <UART_SetConfig+0x258>
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d003      	beq.n	80039fc <UART_SetConfig+0x238>
 80039f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039f8:	d008      	beq.n	8003a0c <UART_SetConfig+0x248>
 80039fa:	e00f      	b.n	8003a1c <UART_SetConfig+0x258>
 80039fc:	2300      	movs	r3, #0
 80039fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a02:	e052      	b.n	8003aaa <UART_SetConfig+0x2e6>
 8003a04:	2302      	movs	r3, #2
 8003a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a0a:	e04e      	b.n	8003aaa <UART_SetConfig+0x2e6>
 8003a0c:	2304      	movs	r3, #4
 8003a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a12:	e04a      	b.n	8003aaa <UART_SetConfig+0x2e6>
 8003a14:	2308      	movs	r3, #8
 8003a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a1a:	e046      	b.n	8003aaa <UART_SetConfig+0x2e6>
 8003a1c:	2310      	movs	r3, #16
 8003a1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a22:	e042      	b.n	8003aaa <UART_SetConfig+0x2e6>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a17      	ldr	r2, [pc, #92]	; (8003a88 <UART_SetConfig+0x2c4>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d13a      	bne.n	8003aa4 <UART_SetConfig+0x2e0>
 8003a2e:	4b18      	ldr	r3, [pc, #96]	; (8003a90 <UART_SetConfig+0x2cc>)
 8003a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a34:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a38:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a3c:	d01a      	beq.n	8003a74 <UART_SetConfig+0x2b0>
 8003a3e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a42:	d81b      	bhi.n	8003a7c <UART_SetConfig+0x2b8>
 8003a44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a48:	d00c      	beq.n	8003a64 <UART_SetConfig+0x2a0>
 8003a4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a4e:	d815      	bhi.n	8003a7c <UART_SetConfig+0x2b8>
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d003      	beq.n	8003a5c <UART_SetConfig+0x298>
 8003a54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a58:	d008      	beq.n	8003a6c <UART_SetConfig+0x2a8>
 8003a5a:	e00f      	b.n	8003a7c <UART_SetConfig+0x2b8>
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a62:	e022      	b.n	8003aaa <UART_SetConfig+0x2e6>
 8003a64:	2302      	movs	r3, #2
 8003a66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a6a:	e01e      	b.n	8003aaa <UART_SetConfig+0x2e6>
 8003a6c:	2304      	movs	r3, #4
 8003a6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a72:	e01a      	b.n	8003aaa <UART_SetConfig+0x2e6>
 8003a74:	2308      	movs	r3, #8
 8003a76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a7a:	e016      	b.n	8003aaa <UART_SetConfig+0x2e6>
 8003a7c:	2310      	movs	r3, #16
 8003a7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a82:	e012      	b.n	8003aaa <UART_SetConfig+0x2e6>
 8003a84:	efff69f3 	.word	0xefff69f3
 8003a88:	40008000 	.word	0x40008000
 8003a8c:	40013800 	.word	0x40013800
 8003a90:	40021000 	.word	0x40021000
 8003a94:	40004400 	.word	0x40004400
 8003a98:	40004800 	.word	0x40004800
 8003a9c:	40004c00 	.word	0x40004c00
 8003aa0:	40005000 	.word	0x40005000
 8003aa4:	2310      	movs	r3, #16
 8003aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a9f      	ldr	r2, [pc, #636]	; (8003d2c <UART_SetConfig+0x568>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d17a      	bne.n	8003baa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ab4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ab8:	2b08      	cmp	r3, #8
 8003aba:	d824      	bhi.n	8003b06 <UART_SetConfig+0x342>
 8003abc:	a201      	add	r2, pc, #4	; (adr r2, 8003ac4 <UART_SetConfig+0x300>)
 8003abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac2:	bf00      	nop
 8003ac4:	08003ae9 	.word	0x08003ae9
 8003ac8:	08003b07 	.word	0x08003b07
 8003acc:	08003af1 	.word	0x08003af1
 8003ad0:	08003b07 	.word	0x08003b07
 8003ad4:	08003af7 	.word	0x08003af7
 8003ad8:	08003b07 	.word	0x08003b07
 8003adc:	08003b07 	.word	0x08003b07
 8003ae0:	08003b07 	.word	0x08003b07
 8003ae4:	08003aff 	.word	0x08003aff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ae8:	f7fe f932 	bl	8001d50 <HAL_RCC_GetPCLK1Freq>
 8003aec:	61f8      	str	r0, [r7, #28]
        break;
 8003aee:	e010      	b.n	8003b12 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003af0:	4b8f      	ldr	r3, [pc, #572]	; (8003d30 <UART_SetConfig+0x56c>)
 8003af2:	61fb      	str	r3, [r7, #28]
        break;
 8003af4:	e00d      	b.n	8003b12 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003af6:	f7fe f893 	bl	8001c20 <HAL_RCC_GetSysClockFreq>
 8003afa:	61f8      	str	r0, [r7, #28]
        break;
 8003afc:	e009      	b.n	8003b12 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003afe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b02:	61fb      	str	r3, [r7, #28]
        break;
 8003b04:	e005      	b.n	8003b12 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003b06:	2300      	movs	r3, #0
 8003b08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003b10:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 80fb 	beq.w	8003d10 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	685a      	ldr	r2, [r3, #4]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	4413      	add	r3, r2
 8003b24:	69fa      	ldr	r2, [r7, #28]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d305      	bcc.n	8003b36 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b30:	69fa      	ldr	r2, [r7, #28]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d903      	bls.n	8003b3e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003b3c:	e0e8      	b.n	8003d10 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	2200      	movs	r2, #0
 8003b42:	461c      	mov	r4, r3
 8003b44:	4615      	mov	r5, r2
 8003b46:	f04f 0200 	mov.w	r2, #0
 8003b4a:	f04f 0300 	mov.w	r3, #0
 8003b4e:	022b      	lsls	r3, r5, #8
 8003b50:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003b54:	0222      	lsls	r2, r4, #8
 8003b56:	68f9      	ldr	r1, [r7, #12]
 8003b58:	6849      	ldr	r1, [r1, #4]
 8003b5a:	0849      	lsrs	r1, r1, #1
 8003b5c:	2000      	movs	r0, #0
 8003b5e:	4688      	mov	r8, r1
 8003b60:	4681      	mov	r9, r0
 8003b62:	eb12 0a08 	adds.w	sl, r2, r8
 8003b66:	eb43 0b09 	adc.w	fp, r3, r9
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	603b      	str	r3, [r7, #0]
 8003b72:	607a      	str	r2, [r7, #4]
 8003b74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b78:	4650      	mov	r0, sl
 8003b7a:	4659      	mov	r1, fp
 8003b7c:	f7fc fb78 	bl	8000270 <__aeabi_uldivmod>
 8003b80:	4602      	mov	r2, r0
 8003b82:	460b      	mov	r3, r1
 8003b84:	4613      	mov	r3, r2
 8003b86:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b8e:	d308      	bcc.n	8003ba2 <UART_SetConfig+0x3de>
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b96:	d204      	bcs.n	8003ba2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	60da      	str	r2, [r3, #12]
 8003ba0:	e0b6      	b.n	8003d10 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003ba8:	e0b2      	b.n	8003d10 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	69db      	ldr	r3, [r3, #28]
 8003bae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bb2:	d15e      	bne.n	8003c72 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003bb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003bb8:	2b08      	cmp	r3, #8
 8003bba:	d828      	bhi.n	8003c0e <UART_SetConfig+0x44a>
 8003bbc:	a201      	add	r2, pc, #4	; (adr r2, 8003bc4 <UART_SetConfig+0x400>)
 8003bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc2:	bf00      	nop
 8003bc4:	08003be9 	.word	0x08003be9
 8003bc8:	08003bf1 	.word	0x08003bf1
 8003bcc:	08003bf9 	.word	0x08003bf9
 8003bd0:	08003c0f 	.word	0x08003c0f
 8003bd4:	08003bff 	.word	0x08003bff
 8003bd8:	08003c0f 	.word	0x08003c0f
 8003bdc:	08003c0f 	.word	0x08003c0f
 8003be0:	08003c0f 	.word	0x08003c0f
 8003be4:	08003c07 	.word	0x08003c07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003be8:	f7fe f8b2 	bl	8001d50 <HAL_RCC_GetPCLK1Freq>
 8003bec:	61f8      	str	r0, [r7, #28]
        break;
 8003bee:	e014      	b.n	8003c1a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bf0:	f7fe f8c4 	bl	8001d7c <HAL_RCC_GetPCLK2Freq>
 8003bf4:	61f8      	str	r0, [r7, #28]
        break;
 8003bf6:	e010      	b.n	8003c1a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bf8:	4b4d      	ldr	r3, [pc, #308]	; (8003d30 <UART_SetConfig+0x56c>)
 8003bfa:	61fb      	str	r3, [r7, #28]
        break;
 8003bfc:	e00d      	b.n	8003c1a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bfe:	f7fe f80f 	bl	8001c20 <HAL_RCC_GetSysClockFreq>
 8003c02:	61f8      	str	r0, [r7, #28]
        break;
 8003c04:	e009      	b.n	8003c1a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c0a:	61fb      	str	r3, [r7, #28]
        break;
 8003c0c:	e005      	b.n	8003c1a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003c18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d077      	beq.n	8003d10 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	005a      	lsls	r2, r3, #1
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	085b      	lsrs	r3, r3, #1
 8003c2a:	441a      	add	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c34:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	2b0f      	cmp	r3, #15
 8003c3a:	d916      	bls.n	8003c6a <UART_SetConfig+0x4a6>
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c42:	d212      	bcs.n	8003c6a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	f023 030f 	bic.w	r3, r3, #15
 8003c4c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	085b      	lsrs	r3, r3, #1
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	f003 0307 	and.w	r3, r3, #7
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	8afb      	ldrh	r3, [r7, #22]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	8afa      	ldrh	r2, [r7, #22]
 8003c66:	60da      	str	r2, [r3, #12]
 8003c68:	e052      	b.n	8003d10 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c70:	e04e      	b.n	8003d10 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c76:	2b08      	cmp	r3, #8
 8003c78:	d827      	bhi.n	8003cca <UART_SetConfig+0x506>
 8003c7a:	a201      	add	r2, pc, #4	; (adr r2, 8003c80 <UART_SetConfig+0x4bc>)
 8003c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c80:	08003ca5 	.word	0x08003ca5
 8003c84:	08003cad 	.word	0x08003cad
 8003c88:	08003cb5 	.word	0x08003cb5
 8003c8c:	08003ccb 	.word	0x08003ccb
 8003c90:	08003cbb 	.word	0x08003cbb
 8003c94:	08003ccb 	.word	0x08003ccb
 8003c98:	08003ccb 	.word	0x08003ccb
 8003c9c:	08003ccb 	.word	0x08003ccb
 8003ca0:	08003cc3 	.word	0x08003cc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ca4:	f7fe f854 	bl	8001d50 <HAL_RCC_GetPCLK1Freq>
 8003ca8:	61f8      	str	r0, [r7, #28]
        break;
 8003caa:	e014      	b.n	8003cd6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cac:	f7fe f866 	bl	8001d7c <HAL_RCC_GetPCLK2Freq>
 8003cb0:	61f8      	str	r0, [r7, #28]
        break;
 8003cb2:	e010      	b.n	8003cd6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cb4:	4b1e      	ldr	r3, [pc, #120]	; (8003d30 <UART_SetConfig+0x56c>)
 8003cb6:	61fb      	str	r3, [r7, #28]
        break;
 8003cb8:	e00d      	b.n	8003cd6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cba:	f7fd ffb1 	bl	8001c20 <HAL_RCC_GetSysClockFreq>
 8003cbe:	61f8      	str	r0, [r7, #28]
        break;
 8003cc0:	e009      	b.n	8003cd6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cc6:	61fb      	str	r3, [r7, #28]
        break;
 8003cc8:	e005      	b.n	8003cd6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003cd4:	bf00      	nop
    }

    if (pclk != 0U)
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d019      	beq.n	8003d10 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	085a      	lsrs	r2, r3, #1
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	441a      	add	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cee:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	2b0f      	cmp	r3, #15
 8003cf4:	d909      	bls.n	8003d0a <UART_SetConfig+0x546>
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cfc:	d205      	bcs.n	8003d0a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	60da      	str	r2, [r3, #12]
 8003d08:	e002      	b.n	8003d10 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003d1c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3728      	adds	r7, #40	; 0x28
 8003d24:	46bd      	mov	sp, r7
 8003d26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d2a:	bf00      	nop
 8003d2c:	40008000 	.word	0x40008000
 8003d30:	00f42400 	.word	0x00f42400

08003d34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00a      	beq.n	8003d5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00a      	beq.n	8003d80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d84:	f003 0304 	and.w	r3, r3, #4
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00a      	beq.n	8003da2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da6:	f003 0308 	and.w	r3, r3, #8
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00a      	beq.n	8003dc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc8:	f003 0310 	and.w	r3, r3, #16
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00a      	beq.n	8003de6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	430a      	orrs	r2, r1
 8003de4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dea:	f003 0320 	and.w	r3, r3, #32
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00a      	beq.n	8003e08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	430a      	orrs	r2, r1
 8003e06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d01a      	beq.n	8003e4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e32:	d10a      	bne.n	8003e4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	430a      	orrs	r2, r1
 8003e48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00a      	beq.n	8003e6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	605a      	str	r2, [r3, #4]
  }
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af02      	add	r7, sp, #8
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e88:	f7fc fed6 	bl	8000c38 <HAL_GetTick>
 8003e8c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0308 	and.w	r3, r3, #8
 8003e98:	2b08      	cmp	r3, #8
 8003e9a:	d10e      	bne.n	8003eba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ea0:	9300      	str	r3, [sp, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 f82d 	bl	8003f0a <UART_WaitOnFlagUntilTimeout>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e023      	b.n	8003f02 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0304 	and.w	r3, r3, #4
 8003ec4:	2b04      	cmp	r3, #4
 8003ec6:	d10e      	bne.n	8003ee6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ec8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ecc:	9300      	str	r3, [sp, #0]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f817 	bl	8003f0a <UART_WaitOnFlagUntilTimeout>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e00d      	b.n	8003f02 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2220      	movs	r2, #32
 8003eea:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2220      	movs	r2, #32
 8003ef0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b09c      	sub	sp, #112	; 0x70
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	60f8      	str	r0, [r7, #12]
 8003f12:	60b9      	str	r1, [r7, #8]
 8003f14:	603b      	str	r3, [r7, #0]
 8003f16:	4613      	mov	r3, r2
 8003f18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f1a:	e0a5      	b.n	8004068 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f22:	f000 80a1 	beq.w	8004068 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f26:	f7fc fe87 	bl	8000c38 <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d302      	bcc.n	8003f3c <UART_WaitOnFlagUntilTimeout+0x32>
 8003f36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d13e      	bne.n	8003fba <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f44:	e853 3f00 	ldrex	r3, [r3]
 8003f48:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f50:	667b      	str	r3, [r7, #100]	; 0x64
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	461a      	mov	r2, r3
 8003f58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f5c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003f60:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f62:	e841 2300 	strex	r3, r2, [r1]
 8003f66:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003f68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1e6      	bne.n	8003f3c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	3308      	adds	r3, #8
 8003f74:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f78:	e853 3f00 	ldrex	r3, [r3]
 8003f7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f80:	f023 0301 	bic.w	r3, r3, #1
 8003f84:	663b      	str	r3, [r7, #96]	; 0x60
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	3308      	adds	r3, #8
 8003f8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f8e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003f90:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f96:	e841 2300 	strex	r3, r2, [r1]
 8003f9a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003f9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1e5      	bne.n	8003f6e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2220      	movs	r2, #32
 8003fa6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2220      	movs	r2, #32
 8003fac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e067      	b.n	800408a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0304 	and.w	r3, r3, #4
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d04f      	beq.n	8004068 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	69db      	ldr	r3, [r3, #28]
 8003fce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fd6:	d147      	bne.n	8004068 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fe0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fea:	e853 3f00 	ldrex	r3, [r3]
 8003fee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ff6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004000:	637b      	str	r3, [r7, #52]	; 0x34
 8004002:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004004:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004006:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004008:	e841 2300 	strex	r3, r2, [r1]
 800400c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800400e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004010:	2b00      	cmp	r3, #0
 8004012:	d1e6      	bne.n	8003fe2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	3308      	adds	r3, #8
 800401a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	e853 3f00 	ldrex	r3, [r3]
 8004022:	613b      	str	r3, [r7, #16]
   return(result);
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	f023 0301 	bic.w	r3, r3, #1
 800402a:	66bb      	str	r3, [r7, #104]	; 0x68
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	3308      	adds	r3, #8
 8004032:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004034:	623a      	str	r2, [r7, #32]
 8004036:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004038:	69f9      	ldr	r1, [r7, #28]
 800403a:	6a3a      	ldr	r2, [r7, #32]
 800403c:	e841 2300 	strex	r3, r2, [r1]
 8004040:	61bb      	str	r3, [r7, #24]
   return(result);
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1e5      	bne.n	8004014 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2220      	movs	r2, #32
 800404c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2220      	movs	r2, #32
 8004052:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2220      	movs	r2, #32
 8004058:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e010      	b.n	800408a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	69da      	ldr	r2, [r3, #28]
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	4013      	ands	r3, r2
 8004072:	68ba      	ldr	r2, [r7, #8]
 8004074:	429a      	cmp	r2, r3
 8004076:	bf0c      	ite	eq
 8004078:	2301      	moveq	r3, #1
 800407a:	2300      	movne	r3, #0
 800407c:	b2db      	uxtb	r3, r3
 800407e:	461a      	mov	r2, r3
 8004080:	79fb      	ldrb	r3, [r7, #7]
 8004082:	429a      	cmp	r2, r3
 8004084:	f43f af4a 	beq.w	8003f1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3770      	adds	r7, #112	; 0x70
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
	...

08004094 <__errno>:
 8004094:	4b01      	ldr	r3, [pc, #4]	; (800409c <__errno+0x8>)
 8004096:	6818      	ldr	r0, [r3, #0]
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	2000000c 	.word	0x2000000c

080040a0 <__libc_init_array>:
 80040a0:	b570      	push	{r4, r5, r6, lr}
 80040a2:	4d0d      	ldr	r5, [pc, #52]	; (80040d8 <__libc_init_array+0x38>)
 80040a4:	4c0d      	ldr	r4, [pc, #52]	; (80040dc <__libc_init_array+0x3c>)
 80040a6:	1b64      	subs	r4, r4, r5
 80040a8:	10a4      	asrs	r4, r4, #2
 80040aa:	2600      	movs	r6, #0
 80040ac:	42a6      	cmp	r6, r4
 80040ae:	d109      	bne.n	80040c4 <__libc_init_array+0x24>
 80040b0:	4d0b      	ldr	r5, [pc, #44]	; (80040e0 <__libc_init_array+0x40>)
 80040b2:	4c0c      	ldr	r4, [pc, #48]	; (80040e4 <__libc_init_array+0x44>)
 80040b4:	f000 fc8e 	bl	80049d4 <_init>
 80040b8:	1b64      	subs	r4, r4, r5
 80040ba:	10a4      	asrs	r4, r4, #2
 80040bc:	2600      	movs	r6, #0
 80040be:	42a6      	cmp	r6, r4
 80040c0:	d105      	bne.n	80040ce <__libc_init_array+0x2e>
 80040c2:	bd70      	pop	{r4, r5, r6, pc}
 80040c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80040c8:	4798      	blx	r3
 80040ca:	3601      	adds	r6, #1
 80040cc:	e7ee      	b.n	80040ac <__libc_init_array+0xc>
 80040ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80040d2:	4798      	blx	r3
 80040d4:	3601      	adds	r6, #1
 80040d6:	e7f2      	b.n	80040be <__libc_init_array+0x1e>
 80040d8:	08004a90 	.word	0x08004a90
 80040dc:	08004a90 	.word	0x08004a90
 80040e0:	08004a90 	.word	0x08004a90
 80040e4:	08004a94 	.word	0x08004a94

080040e8 <memset>:
 80040e8:	4402      	add	r2, r0
 80040ea:	4603      	mov	r3, r0
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d100      	bne.n	80040f2 <memset+0xa>
 80040f0:	4770      	bx	lr
 80040f2:	f803 1b01 	strb.w	r1, [r3], #1
 80040f6:	e7f9      	b.n	80040ec <memset+0x4>

080040f8 <siprintf>:
 80040f8:	b40e      	push	{r1, r2, r3}
 80040fa:	b500      	push	{lr}
 80040fc:	b09c      	sub	sp, #112	; 0x70
 80040fe:	ab1d      	add	r3, sp, #116	; 0x74
 8004100:	9002      	str	r0, [sp, #8]
 8004102:	9006      	str	r0, [sp, #24]
 8004104:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004108:	4809      	ldr	r0, [pc, #36]	; (8004130 <siprintf+0x38>)
 800410a:	9107      	str	r1, [sp, #28]
 800410c:	9104      	str	r1, [sp, #16]
 800410e:	4909      	ldr	r1, [pc, #36]	; (8004134 <siprintf+0x3c>)
 8004110:	f853 2b04 	ldr.w	r2, [r3], #4
 8004114:	9105      	str	r1, [sp, #20]
 8004116:	6800      	ldr	r0, [r0, #0]
 8004118:	9301      	str	r3, [sp, #4]
 800411a:	a902      	add	r1, sp, #8
 800411c:	f000 f868 	bl	80041f0 <_svfiprintf_r>
 8004120:	9b02      	ldr	r3, [sp, #8]
 8004122:	2200      	movs	r2, #0
 8004124:	701a      	strb	r2, [r3, #0]
 8004126:	b01c      	add	sp, #112	; 0x70
 8004128:	f85d eb04 	ldr.w	lr, [sp], #4
 800412c:	b003      	add	sp, #12
 800412e:	4770      	bx	lr
 8004130:	2000000c 	.word	0x2000000c
 8004134:	ffff0208 	.word	0xffff0208

08004138 <__ssputs_r>:
 8004138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800413c:	688e      	ldr	r6, [r1, #8]
 800413e:	429e      	cmp	r6, r3
 8004140:	4682      	mov	sl, r0
 8004142:	460c      	mov	r4, r1
 8004144:	4690      	mov	r8, r2
 8004146:	461f      	mov	r7, r3
 8004148:	d838      	bhi.n	80041bc <__ssputs_r+0x84>
 800414a:	898a      	ldrh	r2, [r1, #12]
 800414c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004150:	d032      	beq.n	80041b8 <__ssputs_r+0x80>
 8004152:	6825      	ldr	r5, [r4, #0]
 8004154:	6909      	ldr	r1, [r1, #16]
 8004156:	eba5 0901 	sub.w	r9, r5, r1
 800415a:	6965      	ldr	r5, [r4, #20]
 800415c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004160:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004164:	3301      	adds	r3, #1
 8004166:	444b      	add	r3, r9
 8004168:	106d      	asrs	r5, r5, #1
 800416a:	429d      	cmp	r5, r3
 800416c:	bf38      	it	cc
 800416e:	461d      	movcc	r5, r3
 8004170:	0553      	lsls	r3, r2, #21
 8004172:	d531      	bpl.n	80041d8 <__ssputs_r+0xa0>
 8004174:	4629      	mov	r1, r5
 8004176:	f000 fb63 	bl	8004840 <_malloc_r>
 800417a:	4606      	mov	r6, r0
 800417c:	b950      	cbnz	r0, 8004194 <__ssputs_r+0x5c>
 800417e:	230c      	movs	r3, #12
 8004180:	f8ca 3000 	str.w	r3, [sl]
 8004184:	89a3      	ldrh	r3, [r4, #12]
 8004186:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800418a:	81a3      	strh	r3, [r4, #12]
 800418c:	f04f 30ff 	mov.w	r0, #4294967295
 8004190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004194:	6921      	ldr	r1, [r4, #16]
 8004196:	464a      	mov	r2, r9
 8004198:	f000 fabe 	bl	8004718 <memcpy>
 800419c:	89a3      	ldrh	r3, [r4, #12]
 800419e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80041a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041a6:	81a3      	strh	r3, [r4, #12]
 80041a8:	6126      	str	r6, [r4, #16]
 80041aa:	6165      	str	r5, [r4, #20]
 80041ac:	444e      	add	r6, r9
 80041ae:	eba5 0509 	sub.w	r5, r5, r9
 80041b2:	6026      	str	r6, [r4, #0]
 80041b4:	60a5      	str	r5, [r4, #8]
 80041b6:	463e      	mov	r6, r7
 80041b8:	42be      	cmp	r6, r7
 80041ba:	d900      	bls.n	80041be <__ssputs_r+0x86>
 80041bc:	463e      	mov	r6, r7
 80041be:	6820      	ldr	r0, [r4, #0]
 80041c0:	4632      	mov	r2, r6
 80041c2:	4641      	mov	r1, r8
 80041c4:	f000 fab6 	bl	8004734 <memmove>
 80041c8:	68a3      	ldr	r3, [r4, #8]
 80041ca:	1b9b      	subs	r3, r3, r6
 80041cc:	60a3      	str	r3, [r4, #8]
 80041ce:	6823      	ldr	r3, [r4, #0]
 80041d0:	4433      	add	r3, r6
 80041d2:	6023      	str	r3, [r4, #0]
 80041d4:	2000      	movs	r0, #0
 80041d6:	e7db      	b.n	8004190 <__ssputs_r+0x58>
 80041d8:	462a      	mov	r2, r5
 80041da:	f000 fba5 	bl	8004928 <_realloc_r>
 80041de:	4606      	mov	r6, r0
 80041e0:	2800      	cmp	r0, #0
 80041e2:	d1e1      	bne.n	80041a8 <__ssputs_r+0x70>
 80041e4:	6921      	ldr	r1, [r4, #16]
 80041e6:	4650      	mov	r0, sl
 80041e8:	f000 fabe 	bl	8004768 <_free_r>
 80041ec:	e7c7      	b.n	800417e <__ssputs_r+0x46>
	...

080041f0 <_svfiprintf_r>:
 80041f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041f4:	4698      	mov	r8, r3
 80041f6:	898b      	ldrh	r3, [r1, #12]
 80041f8:	061b      	lsls	r3, r3, #24
 80041fa:	b09d      	sub	sp, #116	; 0x74
 80041fc:	4607      	mov	r7, r0
 80041fe:	460d      	mov	r5, r1
 8004200:	4614      	mov	r4, r2
 8004202:	d50e      	bpl.n	8004222 <_svfiprintf_r+0x32>
 8004204:	690b      	ldr	r3, [r1, #16]
 8004206:	b963      	cbnz	r3, 8004222 <_svfiprintf_r+0x32>
 8004208:	2140      	movs	r1, #64	; 0x40
 800420a:	f000 fb19 	bl	8004840 <_malloc_r>
 800420e:	6028      	str	r0, [r5, #0]
 8004210:	6128      	str	r0, [r5, #16]
 8004212:	b920      	cbnz	r0, 800421e <_svfiprintf_r+0x2e>
 8004214:	230c      	movs	r3, #12
 8004216:	603b      	str	r3, [r7, #0]
 8004218:	f04f 30ff 	mov.w	r0, #4294967295
 800421c:	e0d1      	b.n	80043c2 <_svfiprintf_r+0x1d2>
 800421e:	2340      	movs	r3, #64	; 0x40
 8004220:	616b      	str	r3, [r5, #20]
 8004222:	2300      	movs	r3, #0
 8004224:	9309      	str	r3, [sp, #36]	; 0x24
 8004226:	2320      	movs	r3, #32
 8004228:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800422c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004230:	2330      	movs	r3, #48	; 0x30
 8004232:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80043dc <_svfiprintf_r+0x1ec>
 8004236:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800423a:	f04f 0901 	mov.w	r9, #1
 800423e:	4623      	mov	r3, r4
 8004240:	469a      	mov	sl, r3
 8004242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004246:	b10a      	cbz	r2, 800424c <_svfiprintf_r+0x5c>
 8004248:	2a25      	cmp	r2, #37	; 0x25
 800424a:	d1f9      	bne.n	8004240 <_svfiprintf_r+0x50>
 800424c:	ebba 0b04 	subs.w	fp, sl, r4
 8004250:	d00b      	beq.n	800426a <_svfiprintf_r+0x7a>
 8004252:	465b      	mov	r3, fp
 8004254:	4622      	mov	r2, r4
 8004256:	4629      	mov	r1, r5
 8004258:	4638      	mov	r0, r7
 800425a:	f7ff ff6d 	bl	8004138 <__ssputs_r>
 800425e:	3001      	adds	r0, #1
 8004260:	f000 80aa 	beq.w	80043b8 <_svfiprintf_r+0x1c8>
 8004264:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004266:	445a      	add	r2, fp
 8004268:	9209      	str	r2, [sp, #36]	; 0x24
 800426a:	f89a 3000 	ldrb.w	r3, [sl]
 800426e:	2b00      	cmp	r3, #0
 8004270:	f000 80a2 	beq.w	80043b8 <_svfiprintf_r+0x1c8>
 8004274:	2300      	movs	r3, #0
 8004276:	f04f 32ff 	mov.w	r2, #4294967295
 800427a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800427e:	f10a 0a01 	add.w	sl, sl, #1
 8004282:	9304      	str	r3, [sp, #16]
 8004284:	9307      	str	r3, [sp, #28]
 8004286:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800428a:	931a      	str	r3, [sp, #104]	; 0x68
 800428c:	4654      	mov	r4, sl
 800428e:	2205      	movs	r2, #5
 8004290:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004294:	4851      	ldr	r0, [pc, #324]	; (80043dc <_svfiprintf_r+0x1ec>)
 8004296:	f7fb ff9b 	bl	80001d0 <memchr>
 800429a:	9a04      	ldr	r2, [sp, #16]
 800429c:	b9d8      	cbnz	r0, 80042d6 <_svfiprintf_r+0xe6>
 800429e:	06d0      	lsls	r0, r2, #27
 80042a0:	bf44      	itt	mi
 80042a2:	2320      	movmi	r3, #32
 80042a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042a8:	0711      	lsls	r1, r2, #28
 80042aa:	bf44      	itt	mi
 80042ac:	232b      	movmi	r3, #43	; 0x2b
 80042ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042b2:	f89a 3000 	ldrb.w	r3, [sl]
 80042b6:	2b2a      	cmp	r3, #42	; 0x2a
 80042b8:	d015      	beq.n	80042e6 <_svfiprintf_r+0xf6>
 80042ba:	9a07      	ldr	r2, [sp, #28]
 80042bc:	4654      	mov	r4, sl
 80042be:	2000      	movs	r0, #0
 80042c0:	f04f 0c0a 	mov.w	ip, #10
 80042c4:	4621      	mov	r1, r4
 80042c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042ca:	3b30      	subs	r3, #48	; 0x30
 80042cc:	2b09      	cmp	r3, #9
 80042ce:	d94e      	bls.n	800436e <_svfiprintf_r+0x17e>
 80042d0:	b1b0      	cbz	r0, 8004300 <_svfiprintf_r+0x110>
 80042d2:	9207      	str	r2, [sp, #28]
 80042d4:	e014      	b.n	8004300 <_svfiprintf_r+0x110>
 80042d6:	eba0 0308 	sub.w	r3, r0, r8
 80042da:	fa09 f303 	lsl.w	r3, r9, r3
 80042de:	4313      	orrs	r3, r2
 80042e0:	9304      	str	r3, [sp, #16]
 80042e2:	46a2      	mov	sl, r4
 80042e4:	e7d2      	b.n	800428c <_svfiprintf_r+0x9c>
 80042e6:	9b03      	ldr	r3, [sp, #12]
 80042e8:	1d19      	adds	r1, r3, #4
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	9103      	str	r1, [sp, #12]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	bfbb      	ittet	lt
 80042f2:	425b      	neglt	r3, r3
 80042f4:	f042 0202 	orrlt.w	r2, r2, #2
 80042f8:	9307      	strge	r3, [sp, #28]
 80042fa:	9307      	strlt	r3, [sp, #28]
 80042fc:	bfb8      	it	lt
 80042fe:	9204      	strlt	r2, [sp, #16]
 8004300:	7823      	ldrb	r3, [r4, #0]
 8004302:	2b2e      	cmp	r3, #46	; 0x2e
 8004304:	d10c      	bne.n	8004320 <_svfiprintf_r+0x130>
 8004306:	7863      	ldrb	r3, [r4, #1]
 8004308:	2b2a      	cmp	r3, #42	; 0x2a
 800430a:	d135      	bne.n	8004378 <_svfiprintf_r+0x188>
 800430c:	9b03      	ldr	r3, [sp, #12]
 800430e:	1d1a      	adds	r2, r3, #4
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	9203      	str	r2, [sp, #12]
 8004314:	2b00      	cmp	r3, #0
 8004316:	bfb8      	it	lt
 8004318:	f04f 33ff 	movlt.w	r3, #4294967295
 800431c:	3402      	adds	r4, #2
 800431e:	9305      	str	r3, [sp, #20]
 8004320:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80043ec <_svfiprintf_r+0x1fc>
 8004324:	7821      	ldrb	r1, [r4, #0]
 8004326:	2203      	movs	r2, #3
 8004328:	4650      	mov	r0, sl
 800432a:	f7fb ff51 	bl	80001d0 <memchr>
 800432e:	b140      	cbz	r0, 8004342 <_svfiprintf_r+0x152>
 8004330:	2340      	movs	r3, #64	; 0x40
 8004332:	eba0 000a 	sub.w	r0, r0, sl
 8004336:	fa03 f000 	lsl.w	r0, r3, r0
 800433a:	9b04      	ldr	r3, [sp, #16]
 800433c:	4303      	orrs	r3, r0
 800433e:	3401      	adds	r4, #1
 8004340:	9304      	str	r3, [sp, #16]
 8004342:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004346:	4826      	ldr	r0, [pc, #152]	; (80043e0 <_svfiprintf_r+0x1f0>)
 8004348:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800434c:	2206      	movs	r2, #6
 800434e:	f7fb ff3f 	bl	80001d0 <memchr>
 8004352:	2800      	cmp	r0, #0
 8004354:	d038      	beq.n	80043c8 <_svfiprintf_r+0x1d8>
 8004356:	4b23      	ldr	r3, [pc, #140]	; (80043e4 <_svfiprintf_r+0x1f4>)
 8004358:	bb1b      	cbnz	r3, 80043a2 <_svfiprintf_r+0x1b2>
 800435a:	9b03      	ldr	r3, [sp, #12]
 800435c:	3307      	adds	r3, #7
 800435e:	f023 0307 	bic.w	r3, r3, #7
 8004362:	3308      	adds	r3, #8
 8004364:	9303      	str	r3, [sp, #12]
 8004366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004368:	4433      	add	r3, r6
 800436a:	9309      	str	r3, [sp, #36]	; 0x24
 800436c:	e767      	b.n	800423e <_svfiprintf_r+0x4e>
 800436e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004372:	460c      	mov	r4, r1
 8004374:	2001      	movs	r0, #1
 8004376:	e7a5      	b.n	80042c4 <_svfiprintf_r+0xd4>
 8004378:	2300      	movs	r3, #0
 800437a:	3401      	adds	r4, #1
 800437c:	9305      	str	r3, [sp, #20]
 800437e:	4619      	mov	r1, r3
 8004380:	f04f 0c0a 	mov.w	ip, #10
 8004384:	4620      	mov	r0, r4
 8004386:	f810 2b01 	ldrb.w	r2, [r0], #1
 800438a:	3a30      	subs	r2, #48	; 0x30
 800438c:	2a09      	cmp	r2, #9
 800438e:	d903      	bls.n	8004398 <_svfiprintf_r+0x1a8>
 8004390:	2b00      	cmp	r3, #0
 8004392:	d0c5      	beq.n	8004320 <_svfiprintf_r+0x130>
 8004394:	9105      	str	r1, [sp, #20]
 8004396:	e7c3      	b.n	8004320 <_svfiprintf_r+0x130>
 8004398:	fb0c 2101 	mla	r1, ip, r1, r2
 800439c:	4604      	mov	r4, r0
 800439e:	2301      	movs	r3, #1
 80043a0:	e7f0      	b.n	8004384 <_svfiprintf_r+0x194>
 80043a2:	ab03      	add	r3, sp, #12
 80043a4:	9300      	str	r3, [sp, #0]
 80043a6:	462a      	mov	r2, r5
 80043a8:	4b0f      	ldr	r3, [pc, #60]	; (80043e8 <_svfiprintf_r+0x1f8>)
 80043aa:	a904      	add	r1, sp, #16
 80043ac:	4638      	mov	r0, r7
 80043ae:	f3af 8000 	nop.w
 80043b2:	1c42      	adds	r2, r0, #1
 80043b4:	4606      	mov	r6, r0
 80043b6:	d1d6      	bne.n	8004366 <_svfiprintf_r+0x176>
 80043b8:	89ab      	ldrh	r3, [r5, #12]
 80043ba:	065b      	lsls	r3, r3, #25
 80043bc:	f53f af2c 	bmi.w	8004218 <_svfiprintf_r+0x28>
 80043c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80043c2:	b01d      	add	sp, #116	; 0x74
 80043c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043c8:	ab03      	add	r3, sp, #12
 80043ca:	9300      	str	r3, [sp, #0]
 80043cc:	462a      	mov	r2, r5
 80043ce:	4b06      	ldr	r3, [pc, #24]	; (80043e8 <_svfiprintf_r+0x1f8>)
 80043d0:	a904      	add	r1, sp, #16
 80043d2:	4638      	mov	r0, r7
 80043d4:	f000 f87a 	bl	80044cc <_printf_i>
 80043d8:	e7eb      	b.n	80043b2 <_svfiprintf_r+0x1c2>
 80043da:	bf00      	nop
 80043dc:	08004a54 	.word	0x08004a54
 80043e0:	08004a5e 	.word	0x08004a5e
 80043e4:	00000000 	.word	0x00000000
 80043e8:	08004139 	.word	0x08004139
 80043ec:	08004a5a 	.word	0x08004a5a

080043f0 <_printf_common>:
 80043f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043f4:	4616      	mov	r6, r2
 80043f6:	4699      	mov	r9, r3
 80043f8:	688a      	ldr	r2, [r1, #8]
 80043fa:	690b      	ldr	r3, [r1, #16]
 80043fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004400:	4293      	cmp	r3, r2
 8004402:	bfb8      	it	lt
 8004404:	4613      	movlt	r3, r2
 8004406:	6033      	str	r3, [r6, #0]
 8004408:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800440c:	4607      	mov	r7, r0
 800440e:	460c      	mov	r4, r1
 8004410:	b10a      	cbz	r2, 8004416 <_printf_common+0x26>
 8004412:	3301      	adds	r3, #1
 8004414:	6033      	str	r3, [r6, #0]
 8004416:	6823      	ldr	r3, [r4, #0]
 8004418:	0699      	lsls	r1, r3, #26
 800441a:	bf42      	ittt	mi
 800441c:	6833      	ldrmi	r3, [r6, #0]
 800441e:	3302      	addmi	r3, #2
 8004420:	6033      	strmi	r3, [r6, #0]
 8004422:	6825      	ldr	r5, [r4, #0]
 8004424:	f015 0506 	ands.w	r5, r5, #6
 8004428:	d106      	bne.n	8004438 <_printf_common+0x48>
 800442a:	f104 0a19 	add.w	sl, r4, #25
 800442e:	68e3      	ldr	r3, [r4, #12]
 8004430:	6832      	ldr	r2, [r6, #0]
 8004432:	1a9b      	subs	r3, r3, r2
 8004434:	42ab      	cmp	r3, r5
 8004436:	dc26      	bgt.n	8004486 <_printf_common+0x96>
 8004438:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800443c:	1e13      	subs	r3, r2, #0
 800443e:	6822      	ldr	r2, [r4, #0]
 8004440:	bf18      	it	ne
 8004442:	2301      	movne	r3, #1
 8004444:	0692      	lsls	r2, r2, #26
 8004446:	d42b      	bmi.n	80044a0 <_printf_common+0xb0>
 8004448:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800444c:	4649      	mov	r1, r9
 800444e:	4638      	mov	r0, r7
 8004450:	47c0      	blx	r8
 8004452:	3001      	adds	r0, #1
 8004454:	d01e      	beq.n	8004494 <_printf_common+0xa4>
 8004456:	6823      	ldr	r3, [r4, #0]
 8004458:	68e5      	ldr	r5, [r4, #12]
 800445a:	6832      	ldr	r2, [r6, #0]
 800445c:	f003 0306 	and.w	r3, r3, #6
 8004460:	2b04      	cmp	r3, #4
 8004462:	bf08      	it	eq
 8004464:	1aad      	subeq	r5, r5, r2
 8004466:	68a3      	ldr	r3, [r4, #8]
 8004468:	6922      	ldr	r2, [r4, #16]
 800446a:	bf0c      	ite	eq
 800446c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004470:	2500      	movne	r5, #0
 8004472:	4293      	cmp	r3, r2
 8004474:	bfc4      	itt	gt
 8004476:	1a9b      	subgt	r3, r3, r2
 8004478:	18ed      	addgt	r5, r5, r3
 800447a:	2600      	movs	r6, #0
 800447c:	341a      	adds	r4, #26
 800447e:	42b5      	cmp	r5, r6
 8004480:	d11a      	bne.n	80044b8 <_printf_common+0xc8>
 8004482:	2000      	movs	r0, #0
 8004484:	e008      	b.n	8004498 <_printf_common+0xa8>
 8004486:	2301      	movs	r3, #1
 8004488:	4652      	mov	r2, sl
 800448a:	4649      	mov	r1, r9
 800448c:	4638      	mov	r0, r7
 800448e:	47c0      	blx	r8
 8004490:	3001      	adds	r0, #1
 8004492:	d103      	bne.n	800449c <_printf_common+0xac>
 8004494:	f04f 30ff 	mov.w	r0, #4294967295
 8004498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800449c:	3501      	adds	r5, #1
 800449e:	e7c6      	b.n	800442e <_printf_common+0x3e>
 80044a0:	18e1      	adds	r1, r4, r3
 80044a2:	1c5a      	adds	r2, r3, #1
 80044a4:	2030      	movs	r0, #48	; 0x30
 80044a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044aa:	4422      	add	r2, r4
 80044ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044b4:	3302      	adds	r3, #2
 80044b6:	e7c7      	b.n	8004448 <_printf_common+0x58>
 80044b8:	2301      	movs	r3, #1
 80044ba:	4622      	mov	r2, r4
 80044bc:	4649      	mov	r1, r9
 80044be:	4638      	mov	r0, r7
 80044c0:	47c0      	blx	r8
 80044c2:	3001      	adds	r0, #1
 80044c4:	d0e6      	beq.n	8004494 <_printf_common+0xa4>
 80044c6:	3601      	adds	r6, #1
 80044c8:	e7d9      	b.n	800447e <_printf_common+0x8e>
	...

080044cc <_printf_i>:
 80044cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044d0:	7e0f      	ldrb	r7, [r1, #24]
 80044d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80044d4:	2f78      	cmp	r7, #120	; 0x78
 80044d6:	4691      	mov	r9, r2
 80044d8:	4680      	mov	r8, r0
 80044da:	460c      	mov	r4, r1
 80044dc:	469a      	mov	sl, r3
 80044de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80044e2:	d807      	bhi.n	80044f4 <_printf_i+0x28>
 80044e4:	2f62      	cmp	r7, #98	; 0x62
 80044e6:	d80a      	bhi.n	80044fe <_printf_i+0x32>
 80044e8:	2f00      	cmp	r7, #0
 80044ea:	f000 80d8 	beq.w	800469e <_printf_i+0x1d2>
 80044ee:	2f58      	cmp	r7, #88	; 0x58
 80044f0:	f000 80a3 	beq.w	800463a <_printf_i+0x16e>
 80044f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80044fc:	e03a      	b.n	8004574 <_printf_i+0xa8>
 80044fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004502:	2b15      	cmp	r3, #21
 8004504:	d8f6      	bhi.n	80044f4 <_printf_i+0x28>
 8004506:	a101      	add	r1, pc, #4	; (adr r1, 800450c <_printf_i+0x40>)
 8004508:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800450c:	08004565 	.word	0x08004565
 8004510:	08004579 	.word	0x08004579
 8004514:	080044f5 	.word	0x080044f5
 8004518:	080044f5 	.word	0x080044f5
 800451c:	080044f5 	.word	0x080044f5
 8004520:	080044f5 	.word	0x080044f5
 8004524:	08004579 	.word	0x08004579
 8004528:	080044f5 	.word	0x080044f5
 800452c:	080044f5 	.word	0x080044f5
 8004530:	080044f5 	.word	0x080044f5
 8004534:	080044f5 	.word	0x080044f5
 8004538:	08004685 	.word	0x08004685
 800453c:	080045a9 	.word	0x080045a9
 8004540:	08004667 	.word	0x08004667
 8004544:	080044f5 	.word	0x080044f5
 8004548:	080044f5 	.word	0x080044f5
 800454c:	080046a7 	.word	0x080046a7
 8004550:	080044f5 	.word	0x080044f5
 8004554:	080045a9 	.word	0x080045a9
 8004558:	080044f5 	.word	0x080044f5
 800455c:	080044f5 	.word	0x080044f5
 8004560:	0800466f 	.word	0x0800466f
 8004564:	682b      	ldr	r3, [r5, #0]
 8004566:	1d1a      	adds	r2, r3, #4
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	602a      	str	r2, [r5, #0]
 800456c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004570:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004574:	2301      	movs	r3, #1
 8004576:	e0a3      	b.n	80046c0 <_printf_i+0x1f4>
 8004578:	6820      	ldr	r0, [r4, #0]
 800457a:	6829      	ldr	r1, [r5, #0]
 800457c:	0606      	lsls	r6, r0, #24
 800457e:	f101 0304 	add.w	r3, r1, #4
 8004582:	d50a      	bpl.n	800459a <_printf_i+0xce>
 8004584:	680e      	ldr	r6, [r1, #0]
 8004586:	602b      	str	r3, [r5, #0]
 8004588:	2e00      	cmp	r6, #0
 800458a:	da03      	bge.n	8004594 <_printf_i+0xc8>
 800458c:	232d      	movs	r3, #45	; 0x2d
 800458e:	4276      	negs	r6, r6
 8004590:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004594:	485e      	ldr	r0, [pc, #376]	; (8004710 <_printf_i+0x244>)
 8004596:	230a      	movs	r3, #10
 8004598:	e019      	b.n	80045ce <_printf_i+0x102>
 800459a:	680e      	ldr	r6, [r1, #0]
 800459c:	602b      	str	r3, [r5, #0]
 800459e:	f010 0f40 	tst.w	r0, #64	; 0x40
 80045a2:	bf18      	it	ne
 80045a4:	b236      	sxthne	r6, r6
 80045a6:	e7ef      	b.n	8004588 <_printf_i+0xbc>
 80045a8:	682b      	ldr	r3, [r5, #0]
 80045aa:	6820      	ldr	r0, [r4, #0]
 80045ac:	1d19      	adds	r1, r3, #4
 80045ae:	6029      	str	r1, [r5, #0]
 80045b0:	0601      	lsls	r1, r0, #24
 80045b2:	d501      	bpl.n	80045b8 <_printf_i+0xec>
 80045b4:	681e      	ldr	r6, [r3, #0]
 80045b6:	e002      	b.n	80045be <_printf_i+0xf2>
 80045b8:	0646      	lsls	r6, r0, #25
 80045ba:	d5fb      	bpl.n	80045b4 <_printf_i+0xe8>
 80045bc:	881e      	ldrh	r6, [r3, #0]
 80045be:	4854      	ldr	r0, [pc, #336]	; (8004710 <_printf_i+0x244>)
 80045c0:	2f6f      	cmp	r7, #111	; 0x6f
 80045c2:	bf0c      	ite	eq
 80045c4:	2308      	moveq	r3, #8
 80045c6:	230a      	movne	r3, #10
 80045c8:	2100      	movs	r1, #0
 80045ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80045ce:	6865      	ldr	r5, [r4, #4]
 80045d0:	60a5      	str	r5, [r4, #8]
 80045d2:	2d00      	cmp	r5, #0
 80045d4:	bfa2      	ittt	ge
 80045d6:	6821      	ldrge	r1, [r4, #0]
 80045d8:	f021 0104 	bicge.w	r1, r1, #4
 80045dc:	6021      	strge	r1, [r4, #0]
 80045de:	b90e      	cbnz	r6, 80045e4 <_printf_i+0x118>
 80045e0:	2d00      	cmp	r5, #0
 80045e2:	d04d      	beq.n	8004680 <_printf_i+0x1b4>
 80045e4:	4615      	mov	r5, r2
 80045e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80045ea:	fb03 6711 	mls	r7, r3, r1, r6
 80045ee:	5dc7      	ldrb	r7, [r0, r7]
 80045f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80045f4:	4637      	mov	r7, r6
 80045f6:	42bb      	cmp	r3, r7
 80045f8:	460e      	mov	r6, r1
 80045fa:	d9f4      	bls.n	80045e6 <_printf_i+0x11a>
 80045fc:	2b08      	cmp	r3, #8
 80045fe:	d10b      	bne.n	8004618 <_printf_i+0x14c>
 8004600:	6823      	ldr	r3, [r4, #0]
 8004602:	07de      	lsls	r6, r3, #31
 8004604:	d508      	bpl.n	8004618 <_printf_i+0x14c>
 8004606:	6923      	ldr	r3, [r4, #16]
 8004608:	6861      	ldr	r1, [r4, #4]
 800460a:	4299      	cmp	r1, r3
 800460c:	bfde      	ittt	le
 800460e:	2330      	movle	r3, #48	; 0x30
 8004610:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004614:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004618:	1b52      	subs	r2, r2, r5
 800461a:	6122      	str	r2, [r4, #16]
 800461c:	f8cd a000 	str.w	sl, [sp]
 8004620:	464b      	mov	r3, r9
 8004622:	aa03      	add	r2, sp, #12
 8004624:	4621      	mov	r1, r4
 8004626:	4640      	mov	r0, r8
 8004628:	f7ff fee2 	bl	80043f0 <_printf_common>
 800462c:	3001      	adds	r0, #1
 800462e:	d14c      	bne.n	80046ca <_printf_i+0x1fe>
 8004630:	f04f 30ff 	mov.w	r0, #4294967295
 8004634:	b004      	add	sp, #16
 8004636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800463a:	4835      	ldr	r0, [pc, #212]	; (8004710 <_printf_i+0x244>)
 800463c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004640:	6829      	ldr	r1, [r5, #0]
 8004642:	6823      	ldr	r3, [r4, #0]
 8004644:	f851 6b04 	ldr.w	r6, [r1], #4
 8004648:	6029      	str	r1, [r5, #0]
 800464a:	061d      	lsls	r5, r3, #24
 800464c:	d514      	bpl.n	8004678 <_printf_i+0x1ac>
 800464e:	07df      	lsls	r7, r3, #31
 8004650:	bf44      	itt	mi
 8004652:	f043 0320 	orrmi.w	r3, r3, #32
 8004656:	6023      	strmi	r3, [r4, #0]
 8004658:	b91e      	cbnz	r6, 8004662 <_printf_i+0x196>
 800465a:	6823      	ldr	r3, [r4, #0]
 800465c:	f023 0320 	bic.w	r3, r3, #32
 8004660:	6023      	str	r3, [r4, #0]
 8004662:	2310      	movs	r3, #16
 8004664:	e7b0      	b.n	80045c8 <_printf_i+0xfc>
 8004666:	6823      	ldr	r3, [r4, #0]
 8004668:	f043 0320 	orr.w	r3, r3, #32
 800466c:	6023      	str	r3, [r4, #0]
 800466e:	2378      	movs	r3, #120	; 0x78
 8004670:	4828      	ldr	r0, [pc, #160]	; (8004714 <_printf_i+0x248>)
 8004672:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004676:	e7e3      	b.n	8004640 <_printf_i+0x174>
 8004678:	0659      	lsls	r1, r3, #25
 800467a:	bf48      	it	mi
 800467c:	b2b6      	uxthmi	r6, r6
 800467e:	e7e6      	b.n	800464e <_printf_i+0x182>
 8004680:	4615      	mov	r5, r2
 8004682:	e7bb      	b.n	80045fc <_printf_i+0x130>
 8004684:	682b      	ldr	r3, [r5, #0]
 8004686:	6826      	ldr	r6, [r4, #0]
 8004688:	6961      	ldr	r1, [r4, #20]
 800468a:	1d18      	adds	r0, r3, #4
 800468c:	6028      	str	r0, [r5, #0]
 800468e:	0635      	lsls	r5, r6, #24
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	d501      	bpl.n	8004698 <_printf_i+0x1cc>
 8004694:	6019      	str	r1, [r3, #0]
 8004696:	e002      	b.n	800469e <_printf_i+0x1d2>
 8004698:	0670      	lsls	r0, r6, #25
 800469a:	d5fb      	bpl.n	8004694 <_printf_i+0x1c8>
 800469c:	8019      	strh	r1, [r3, #0]
 800469e:	2300      	movs	r3, #0
 80046a0:	6123      	str	r3, [r4, #16]
 80046a2:	4615      	mov	r5, r2
 80046a4:	e7ba      	b.n	800461c <_printf_i+0x150>
 80046a6:	682b      	ldr	r3, [r5, #0]
 80046a8:	1d1a      	adds	r2, r3, #4
 80046aa:	602a      	str	r2, [r5, #0]
 80046ac:	681d      	ldr	r5, [r3, #0]
 80046ae:	6862      	ldr	r2, [r4, #4]
 80046b0:	2100      	movs	r1, #0
 80046b2:	4628      	mov	r0, r5
 80046b4:	f7fb fd8c 	bl	80001d0 <memchr>
 80046b8:	b108      	cbz	r0, 80046be <_printf_i+0x1f2>
 80046ba:	1b40      	subs	r0, r0, r5
 80046bc:	6060      	str	r0, [r4, #4]
 80046be:	6863      	ldr	r3, [r4, #4]
 80046c0:	6123      	str	r3, [r4, #16]
 80046c2:	2300      	movs	r3, #0
 80046c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046c8:	e7a8      	b.n	800461c <_printf_i+0x150>
 80046ca:	6923      	ldr	r3, [r4, #16]
 80046cc:	462a      	mov	r2, r5
 80046ce:	4649      	mov	r1, r9
 80046d0:	4640      	mov	r0, r8
 80046d2:	47d0      	blx	sl
 80046d4:	3001      	adds	r0, #1
 80046d6:	d0ab      	beq.n	8004630 <_printf_i+0x164>
 80046d8:	6823      	ldr	r3, [r4, #0]
 80046da:	079b      	lsls	r3, r3, #30
 80046dc:	d413      	bmi.n	8004706 <_printf_i+0x23a>
 80046de:	68e0      	ldr	r0, [r4, #12]
 80046e0:	9b03      	ldr	r3, [sp, #12]
 80046e2:	4298      	cmp	r0, r3
 80046e4:	bfb8      	it	lt
 80046e6:	4618      	movlt	r0, r3
 80046e8:	e7a4      	b.n	8004634 <_printf_i+0x168>
 80046ea:	2301      	movs	r3, #1
 80046ec:	4632      	mov	r2, r6
 80046ee:	4649      	mov	r1, r9
 80046f0:	4640      	mov	r0, r8
 80046f2:	47d0      	blx	sl
 80046f4:	3001      	adds	r0, #1
 80046f6:	d09b      	beq.n	8004630 <_printf_i+0x164>
 80046f8:	3501      	adds	r5, #1
 80046fa:	68e3      	ldr	r3, [r4, #12]
 80046fc:	9903      	ldr	r1, [sp, #12]
 80046fe:	1a5b      	subs	r3, r3, r1
 8004700:	42ab      	cmp	r3, r5
 8004702:	dcf2      	bgt.n	80046ea <_printf_i+0x21e>
 8004704:	e7eb      	b.n	80046de <_printf_i+0x212>
 8004706:	2500      	movs	r5, #0
 8004708:	f104 0619 	add.w	r6, r4, #25
 800470c:	e7f5      	b.n	80046fa <_printf_i+0x22e>
 800470e:	bf00      	nop
 8004710:	08004a65 	.word	0x08004a65
 8004714:	08004a76 	.word	0x08004a76

08004718 <memcpy>:
 8004718:	440a      	add	r2, r1
 800471a:	4291      	cmp	r1, r2
 800471c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004720:	d100      	bne.n	8004724 <memcpy+0xc>
 8004722:	4770      	bx	lr
 8004724:	b510      	push	{r4, lr}
 8004726:	f811 4b01 	ldrb.w	r4, [r1], #1
 800472a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800472e:	4291      	cmp	r1, r2
 8004730:	d1f9      	bne.n	8004726 <memcpy+0xe>
 8004732:	bd10      	pop	{r4, pc}

08004734 <memmove>:
 8004734:	4288      	cmp	r0, r1
 8004736:	b510      	push	{r4, lr}
 8004738:	eb01 0402 	add.w	r4, r1, r2
 800473c:	d902      	bls.n	8004744 <memmove+0x10>
 800473e:	4284      	cmp	r4, r0
 8004740:	4623      	mov	r3, r4
 8004742:	d807      	bhi.n	8004754 <memmove+0x20>
 8004744:	1e43      	subs	r3, r0, #1
 8004746:	42a1      	cmp	r1, r4
 8004748:	d008      	beq.n	800475c <memmove+0x28>
 800474a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800474e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004752:	e7f8      	b.n	8004746 <memmove+0x12>
 8004754:	4402      	add	r2, r0
 8004756:	4601      	mov	r1, r0
 8004758:	428a      	cmp	r2, r1
 800475a:	d100      	bne.n	800475e <memmove+0x2a>
 800475c:	bd10      	pop	{r4, pc}
 800475e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004762:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004766:	e7f7      	b.n	8004758 <memmove+0x24>

08004768 <_free_r>:
 8004768:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800476a:	2900      	cmp	r1, #0
 800476c:	d044      	beq.n	80047f8 <_free_r+0x90>
 800476e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004772:	9001      	str	r0, [sp, #4]
 8004774:	2b00      	cmp	r3, #0
 8004776:	f1a1 0404 	sub.w	r4, r1, #4
 800477a:	bfb8      	it	lt
 800477c:	18e4      	addlt	r4, r4, r3
 800477e:	f000 f913 	bl	80049a8 <__malloc_lock>
 8004782:	4a1e      	ldr	r2, [pc, #120]	; (80047fc <_free_r+0x94>)
 8004784:	9801      	ldr	r0, [sp, #4]
 8004786:	6813      	ldr	r3, [r2, #0]
 8004788:	b933      	cbnz	r3, 8004798 <_free_r+0x30>
 800478a:	6063      	str	r3, [r4, #4]
 800478c:	6014      	str	r4, [r2, #0]
 800478e:	b003      	add	sp, #12
 8004790:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004794:	f000 b90e 	b.w	80049b4 <__malloc_unlock>
 8004798:	42a3      	cmp	r3, r4
 800479a:	d908      	bls.n	80047ae <_free_r+0x46>
 800479c:	6825      	ldr	r5, [r4, #0]
 800479e:	1961      	adds	r1, r4, r5
 80047a0:	428b      	cmp	r3, r1
 80047a2:	bf01      	itttt	eq
 80047a4:	6819      	ldreq	r1, [r3, #0]
 80047a6:	685b      	ldreq	r3, [r3, #4]
 80047a8:	1949      	addeq	r1, r1, r5
 80047aa:	6021      	streq	r1, [r4, #0]
 80047ac:	e7ed      	b.n	800478a <_free_r+0x22>
 80047ae:	461a      	mov	r2, r3
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	b10b      	cbz	r3, 80047b8 <_free_r+0x50>
 80047b4:	42a3      	cmp	r3, r4
 80047b6:	d9fa      	bls.n	80047ae <_free_r+0x46>
 80047b8:	6811      	ldr	r1, [r2, #0]
 80047ba:	1855      	adds	r5, r2, r1
 80047bc:	42a5      	cmp	r5, r4
 80047be:	d10b      	bne.n	80047d8 <_free_r+0x70>
 80047c0:	6824      	ldr	r4, [r4, #0]
 80047c2:	4421      	add	r1, r4
 80047c4:	1854      	adds	r4, r2, r1
 80047c6:	42a3      	cmp	r3, r4
 80047c8:	6011      	str	r1, [r2, #0]
 80047ca:	d1e0      	bne.n	800478e <_free_r+0x26>
 80047cc:	681c      	ldr	r4, [r3, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	6053      	str	r3, [r2, #4]
 80047d2:	4421      	add	r1, r4
 80047d4:	6011      	str	r1, [r2, #0]
 80047d6:	e7da      	b.n	800478e <_free_r+0x26>
 80047d8:	d902      	bls.n	80047e0 <_free_r+0x78>
 80047da:	230c      	movs	r3, #12
 80047dc:	6003      	str	r3, [r0, #0]
 80047de:	e7d6      	b.n	800478e <_free_r+0x26>
 80047e0:	6825      	ldr	r5, [r4, #0]
 80047e2:	1961      	adds	r1, r4, r5
 80047e4:	428b      	cmp	r3, r1
 80047e6:	bf04      	itt	eq
 80047e8:	6819      	ldreq	r1, [r3, #0]
 80047ea:	685b      	ldreq	r3, [r3, #4]
 80047ec:	6063      	str	r3, [r4, #4]
 80047ee:	bf04      	itt	eq
 80047f0:	1949      	addeq	r1, r1, r5
 80047f2:	6021      	streq	r1, [r4, #0]
 80047f4:	6054      	str	r4, [r2, #4]
 80047f6:	e7ca      	b.n	800478e <_free_r+0x26>
 80047f8:	b003      	add	sp, #12
 80047fa:	bd30      	pop	{r4, r5, pc}
 80047fc:	2000017c 	.word	0x2000017c

08004800 <sbrk_aligned>:
 8004800:	b570      	push	{r4, r5, r6, lr}
 8004802:	4e0e      	ldr	r6, [pc, #56]	; (800483c <sbrk_aligned+0x3c>)
 8004804:	460c      	mov	r4, r1
 8004806:	6831      	ldr	r1, [r6, #0]
 8004808:	4605      	mov	r5, r0
 800480a:	b911      	cbnz	r1, 8004812 <sbrk_aligned+0x12>
 800480c:	f000 f8bc 	bl	8004988 <_sbrk_r>
 8004810:	6030      	str	r0, [r6, #0]
 8004812:	4621      	mov	r1, r4
 8004814:	4628      	mov	r0, r5
 8004816:	f000 f8b7 	bl	8004988 <_sbrk_r>
 800481a:	1c43      	adds	r3, r0, #1
 800481c:	d00a      	beq.n	8004834 <sbrk_aligned+0x34>
 800481e:	1cc4      	adds	r4, r0, #3
 8004820:	f024 0403 	bic.w	r4, r4, #3
 8004824:	42a0      	cmp	r0, r4
 8004826:	d007      	beq.n	8004838 <sbrk_aligned+0x38>
 8004828:	1a21      	subs	r1, r4, r0
 800482a:	4628      	mov	r0, r5
 800482c:	f000 f8ac 	bl	8004988 <_sbrk_r>
 8004830:	3001      	adds	r0, #1
 8004832:	d101      	bne.n	8004838 <sbrk_aligned+0x38>
 8004834:	f04f 34ff 	mov.w	r4, #4294967295
 8004838:	4620      	mov	r0, r4
 800483a:	bd70      	pop	{r4, r5, r6, pc}
 800483c:	20000180 	.word	0x20000180

08004840 <_malloc_r>:
 8004840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004844:	1ccd      	adds	r5, r1, #3
 8004846:	f025 0503 	bic.w	r5, r5, #3
 800484a:	3508      	adds	r5, #8
 800484c:	2d0c      	cmp	r5, #12
 800484e:	bf38      	it	cc
 8004850:	250c      	movcc	r5, #12
 8004852:	2d00      	cmp	r5, #0
 8004854:	4607      	mov	r7, r0
 8004856:	db01      	blt.n	800485c <_malloc_r+0x1c>
 8004858:	42a9      	cmp	r1, r5
 800485a:	d905      	bls.n	8004868 <_malloc_r+0x28>
 800485c:	230c      	movs	r3, #12
 800485e:	603b      	str	r3, [r7, #0]
 8004860:	2600      	movs	r6, #0
 8004862:	4630      	mov	r0, r6
 8004864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004868:	4e2e      	ldr	r6, [pc, #184]	; (8004924 <_malloc_r+0xe4>)
 800486a:	f000 f89d 	bl	80049a8 <__malloc_lock>
 800486e:	6833      	ldr	r3, [r6, #0]
 8004870:	461c      	mov	r4, r3
 8004872:	bb34      	cbnz	r4, 80048c2 <_malloc_r+0x82>
 8004874:	4629      	mov	r1, r5
 8004876:	4638      	mov	r0, r7
 8004878:	f7ff ffc2 	bl	8004800 <sbrk_aligned>
 800487c:	1c43      	adds	r3, r0, #1
 800487e:	4604      	mov	r4, r0
 8004880:	d14d      	bne.n	800491e <_malloc_r+0xde>
 8004882:	6834      	ldr	r4, [r6, #0]
 8004884:	4626      	mov	r6, r4
 8004886:	2e00      	cmp	r6, #0
 8004888:	d140      	bne.n	800490c <_malloc_r+0xcc>
 800488a:	6823      	ldr	r3, [r4, #0]
 800488c:	4631      	mov	r1, r6
 800488e:	4638      	mov	r0, r7
 8004890:	eb04 0803 	add.w	r8, r4, r3
 8004894:	f000 f878 	bl	8004988 <_sbrk_r>
 8004898:	4580      	cmp	r8, r0
 800489a:	d13a      	bne.n	8004912 <_malloc_r+0xd2>
 800489c:	6821      	ldr	r1, [r4, #0]
 800489e:	3503      	adds	r5, #3
 80048a0:	1a6d      	subs	r5, r5, r1
 80048a2:	f025 0503 	bic.w	r5, r5, #3
 80048a6:	3508      	adds	r5, #8
 80048a8:	2d0c      	cmp	r5, #12
 80048aa:	bf38      	it	cc
 80048ac:	250c      	movcc	r5, #12
 80048ae:	4629      	mov	r1, r5
 80048b0:	4638      	mov	r0, r7
 80048b2:	f7ff ffa5 	bl	8004800 <sbrk_aligned>
 80048b6:	3001      	adds	r0, #1
 80048b8:	d02b      	beq.n	8004912 <_malloc_r+0xd2>
 80048ba:	6823      	ldr	r3, [r4, #0]
 80048bc:	442b      	add	r3, r5
 80048be:	6023      	str	r3, [r4, #0]
 80048c0:	e00e      	b.n	80048e0 <_malloc_r+0xa0>
 80048c2:	6822      	ldr	r2, [r4, #0]
 80048c4:	1b52      	subs	r2, r2, r5
 80048c6:	d41e      	bmi.n	8004906 <_malloc_r+0xc6>
 80048c8:	2a0b      	cmp	r2, #11
 80048ca:	d916      	bls.n	80048fa <_malloc_r+0xba>
 80048cc:	1961      	adds	r1, r4, r5
 80048ce:	42a3      	cmp	r3, r4
 80048d0:	6025      	str	r5, [r4, #0]
 80048d2:	bf18      	it	ne
 80048d4:	6059      	strne	r1, [r3, #4]
 80048d6:	6863      	ldr	r3, [r4, #4]
 80048d8:	bf08      	it	eq
 80048da:	6031      	streq	r1, [r6, #0]
 80048dc:	5162      	str	r2, [r4, r5]
 80048de:	604b      	str	r3, [r1, #4]
 80048e0:	4638      	mov	r0, r7
 80048e2:	f104 060b 	add.w	r6, r4, #11
 80048e6:	f000 f865 	bl	80049b4 <__malloc_unlock>
 80048ea:	f026 0607 	bic.w	r6, r6, #7
 80048ee:	1d23      	adds	r3, r4, #4
 80048f0:	1af2      	subs	r2, r6, r3
 80048f2:	d0b6      	beq.n	8004862 <_malloc_r+0x22>
 80048f4:	1b9b      	subs	r3, r3, r6
 80048f6:	50a3      	str	r3, [r4, r2]
 80048f8:	e7b3      	b.n	8004862 <_malloc_r+0x22>
 80048fa:	6862      	ldr	r2, [r4, #4]
 80048fc:	42a3      	cmp	r3, r4
 80048fe:	bf0c      	ite	eq
 8004900:	6032      	streq	r2, [r6, #0]
 8004902:	605a      	strne	r2, [r3, #4]
 8004904:	e7ec      	b.n	80048e0 <_malloc_r+0xa0>
 8004906:	4623      	mov	r3, r4
 8004908:	6864      	ldr	r4, [r4, #4]
 800490a:	e7b2      	b.n	8004872 <_malloc_r+0x32>
 800490c:	4634      	mov	r4, r6
 800490e:	6876      	ldr	r6, [r6, #4]
 8004910:	e7b9      	b.n	8004886 <_malloc_r+0x46>
 8004912:	230c      	movs	r3, #12
 8004914:	603b      	str	r3, [r7, #0]
 8004916:	4638      	mov	r0, r7
 8004918:	f000 f84c 	bl	80049b4 <__malloc_unlock>
 800491c:	e7a1      	b.n	8004862 <_malloc_r+0x22>
 800491e:	6025      	str	r5, [r4, #0]
 8004920:	e7de      	b.n	80048e0 <_malloc_r+0xa0>
 8004922:	bf00      	nop
 8004924:	2000017c 	.word	0x2000017c

08004928 <_realloc_r>:
 8004928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800492c:	4680      	mov	r8, r0
 800492e:	4614      	mov	r4, r2
 8004930:	460e      	mov	r6, r1
 8004932:	b921      	cbnz	r1, 800493e <_realloc_r+0x16>
 8004934:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004938:	4611      	mov	r1, r2
 800493a:	f7ff bf81 	b.w	8004840 <_malloc_r>
 800493e:	b92a      	cbnz	r2, 800494c <_realloc_r+0x24>
 8004940:	f7ff ff12 	bl	8004768 <_free_r>
 8004944:	4625      	mov	r5, r4
 8004946:	4628      	mov	r0, r5
 8004948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800494c:	f000 f838 	bl	80049c0 <_malloc_usable_size_r>
 8004950:	4284      	cmp	r4, r0
 8004952:	4607      	mov	r7, r0
 8004954:	d802      	bhi.n	800495c <_realloc_r+0x34>
 8004956:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800495a:	d812      	bhi.n	8004982 <_realloc_r+0x5a>
 800495c:	4621      	mov	r1, r4
 800495e:	4640      	mov	r0, r8
 8004960:	f7ff ff6e 	bl	8004840 <_malloc_r>
 8004964:	4605      	mov	r5, r0
 8004966:	2800      	cmp	r0, #0
 8004968:	d0ed      	beq.n	8004946 <_realloc_r+0x1e>
 800496a:	42bc      	cmp	r4, r7
 800496c:	4622      	mov	r2, r4
 800496e:	4631      	mov	r1, r6
 8004970:	bf28      	it	cs
 8004972:	463a      	movcs	r2, r7
 8004974:	f7ff fed0 	bl	8004718 <memcpy>
 8004978:	4631      	mov	r1, r6
 800497a:	4640      	mov	r0, r8
 800497c:	f7ff fef4 	bl	8004768 <_free_r>
 8004980:	e7e1      	b.n	8004946 <_realloc_r+0x1e>
 8004982:	4635      	mov	r5, r6
 8004984:	e7df      	b.n	8004946 <_realloc_r+0x1e>
	...

08004988 <_sbrk_r>:
 8004988:	b538      	push	{r3, r4, r5, lr}
 800498a:	4d06      	ldr	r5, [pc, #24]	; (80049a4 <_sbrk_r+0x1c>)
 800498c:	2300      	movs	r3, #0
 800498e:	4604      	mov	r4, r0
 8004990:	4608      	mov	r0, r1
 8004992:	602b      	str	r3, [r5, #0]
 8004994:	f7fc f86e 	bl	8000a74 <_sbrk>
 8004998:	1c43      	adds	r3, r0, #1
 800499a:	d102      	bne.n	80049a2 <_sbrk_r+0x1a>
 800499c:	682b      	ldr	r3, [r5, #0]
 800499e:	b103      	cbz	r3, 80049a2 <_sbrk_r+0x1a>
 80049a0:	6023      	str	r3, [r4, #0]
 80049a2:	bd38      	pop	{r3, r4, r5, pc}
 80049a4:	20000184 	.word	0x20000184

080049a8 <__malloc_lock>:
 80049a8:	4801      	ldr	r0, [pc, #4]	; (80049b0 <__malloc_lock+0x8>)
 80049aa:	f000 b811 	b.w	80049d0 <__retarget_lock_acquire_recursive>
 80049ae:	bf00      	nop
 80049b0:	20000188 	.word	0x20000188

080049b4 <__malloc_unlock>:
 80049b4:	4801      	ldr	r0, [pc, #4]	; (80049bc <__malloc_unlock+0x8>)
 80049b6:	f000 b80c 	b.w	80049d2 <__retarget_lock_release_recursive>
 80049ba:	bf00      	nop
 80049bc:	20000188 	.word	0x20000188

080049c0 <_malloc_usable_size_r>:
 80049c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049c4:	1f18      	subs	r0, r3, #4
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	bfbc      	itt	lt
 80049ca:	580b      	ldrlt	r3, [r1, r0]
 80049cc:	18c0      	addlt	r0, r0, r3
 80049ce:	4770      	bx	lr

080049d0 <__retarget_lock_acquire_recursive>:
 80049d0:	4770      	bx	lr

080049d2 <__retarget_lock_release_recursive>:
 80049d2:	4770      	bx	lr

080049d4 <_init>:
 80049d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049d6:	bf00      	nop
 80049d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049da:	bc08      	pop	{r3}
 80049dc:	469e      	mov	lr, r3
 80049de:	4770      	bx	lr

080049e0 <_fini>:
 80049e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049e2:	bf00      	nop
 80049e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049e6:	bc08      	pop	{r3}
 80049e8:	469e      	mov	lr, r3
 80049ea:	4770      	bx	lr
